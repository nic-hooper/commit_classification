__label__inline refactoring xobjectpagetypeprovider remove deprecated pagetypecommand
__label__push-down java typeres fix pr comments
__label__push-down move readonly command to clustercommands moved from binary jedis to jedis since binaryjedis doesn t implement clustercommands
__label__inline score constructor cleanup
__label__extract sgf modify the gemfiredatasourcepostprocessor basis for to not assume a gemfire server was configured and bootstrapped with spring and subsequently that the sdg listregionsonserverfunction was registered adding unit tests for the gemfiredatasourcepostprocessor class
__label__pull-up refactor main cpd class migration of command line arg handling to separate cpdconfiguration class similar to how pmd does it will eventually formalize the parameters in the same way git svn id baf d a c fc e d
__label__push-down moved references to slf j and classic into subclasswhen the concurrentserverrunner is moved to core it cannot referencedirectly the logger and loggercontext objects now the base classdelegates its logging to a subclass
__label__rename sc qcadoomes renamed metod names
__label__pull-up attached is a patch to remove some redundant code in the jdbc driver merges identical code from org postgresql jdbc statement intoorg postgresql statement moves escapesql method from connection to statement the only placeit s used minor cleanup of the new isolation level stuff minor cleanup of version string handling anders bengtsson
__label__inline refactor fileobject and fix tests
__label__rename rename field key to key
__label__move from wonder moved makeeditablesharedentitynamed from erxutilities to erxeoaccessutilities
__label__extract proper recursion limiter and code cleanup
__label__inline cleaned up the acceptedontologies code ontology search and getting all ontologies now works correctly
__label__move frag using fragtest to test both frag and frag frag moved locking into fragentry
__label__rename renamed quantized to sampling and summarized to summarizable
__label__pull-up issue socks proxy handler in netclient add socks proxy support to and netclient changed proxy options into a proxyobject class add small socks proxy for testing move proxyoptions property to clientoptionsbase add unit tests add missing ctx firexxx in vertxhandler move proxychannelprovider to its own package add classnotfound check to netclientimpl add to documentation about proxy config signed off by alexlehm
__label__extract added support for includes excludes filters in configuration
__label__inline preparing release reverted changes will return after release
__label__rename renamed usage to description to match the name used in commanddefinition
__label__inline lots of changes beginnings of a persistence framework for the svdb adding better preference pages for configuring project paths
__label__inline fixed all kinds of small ui bugs and updated the tool windows to let them more visually inline with the rest of the application
__label__inline merge htreemap and htree into single class so htree implements map interface and does not need wrapper
__label__push-down separated current state context into contextimpl and the rest into sharedcontext
__label__pull-up node attributes editor has correct functionality the functionality is not complete but everything that s there seems to work correctly you can add parameters change types set min max values etc this also required changes in parameter where we better handle type migration also you can view but not change the node ports all controls inherit from an abstract control that uses addnotify and removenotify to listen to changes in the parameter values
__label__move refactor lispminibuffer
__label__extract minor updates to extract spring cxf into their own plugingit svn id c b a b b d e 
__label__push-down remove stylecontext split customcodearea in two
__label__pull-up fix javadoc parsing remove use of reference migration fixes
__label__extract refactor createorupdate method in mongochannelstore to extract methods and make code more readable
__label__push-down changed grouprequest to use completablefuture removed grouprequest setanycasting as this is already present in the requestoptions instance passed to grouprequest async unicast rpcs with or without future don t lead to the creation of a unicastrequest but are sent directly if rpc is async don t create a grouprequest instance removed nullfuture replaced explicit message in messagedispatcher sendmessage castmessage calls with buffer unicastrequest receiveresponse should not consult rspfilter replaced org jgroups timeoutexception with java util concurrent timeoutexception changed accessors in requestoptions unicastrequest now uses completablefuture changed rsplist to subclass hashmap saves bytes plus fewer methods unicastrequest get on future removes request from correlator s table calls to an empty destination set now always return an empty rsplist
__label__extract added vob paths to manually enter paths to the vobs added dynamic view support for using existing dynamic views added dynamic and snapshot clear tool instances git svn id c de d a be ed b c a
__label__inline dataarray api refactoring
__label__pull-up pulled out some common functionality from the gl text helper implementation
__label__move post release refactor i moved almost everything that was package private in com google inject to the internal package the motivation is to simplify things the previous setup was extremely awkward because c g i could call into internal but not the reverse similarly for the spi package this refactoring reduces the visibility of many symbols in internal and makes some other code hygeine changes once this is checked in it should be much easier to add the toconstructor binding type that was previously difficult because the constructorbindingimpl class was package private and intertwined with that package git svn id d f a b b b d aecad e
__label__push-down reorganize tests to prepare for porting tokenizer spec rb
__label__push-down refactor jogltarget as interface with jogltargetfixedfunction as current implementation prepares for jogltargetshader
__label__inline minor refactoring
__label__extract o extracted a few methods
__label__pull-up tweaks clean ups
__label__inline hv merging cascade and constraint related meta data to aggregated propertymetadata work in progress
__label__move added specialvaluespinner component reworked roi panel not yet completed fixed the infamous jtextfield margin error roi added icon property for the roi panel internal overlay mouse position is now d added getnumberofedgepoints and getnumberofpoints methods used for perimeter area calculation moved getperimeter and getarea to roi d booleanmask x d added getpointsasintarray method better for gc work added getedgepointsasintarray method better for gc work better error handling in plugin class loader dynamicarray supports variable block size granularity parameter added typeutil topoint int method point x d added topoint x d and todoublearray conversion methods severals bug fixes
__label__extract added changes to avoid delete problem
__label__pull-up refactor pull out an abstract base class for deploy mojosgit svn id f bb ffa edef 
__label__inline little refactor
__label__move hh move statsdsender to common config
__label__extract implemented defaultattributebuilder addattribute
__label__pull-up update for java date time changes refactor daos back to core now that they re java too
__label__pull-up minor canidate controller refactoring added an abstract superclass to house common functionality this fixes some previously nasty cut paste code
__label__inline more code cleanup
__label__pull-up pull spunk restart into base class clean up restart usage
__label__extract view is now handled in up as well so fragments are cleared on member leave added managed operations to clear the frag table
__label__inline fcrepo tidy up fesl policy validation validation now occurs as part of object datastream validation all old fesl validation removed methods with invalid policies will result in the method failing with no change to the policy index see also fcrepo 
__label__rename rename sortdir to sortdirection and update related accessor method
__label__pull-up this update primarily modifies the rackstorageprovider due to issues surfaced in working it refactors retry patterns up from s storageprovider into storageproviderbase git svn id ed cd a f c be b fe bcb
__label__push-down refactoring to interfaces
__label__move sgf move off heap redis adapter and security annotation config from apache geode to sdg x
__label__push-down the springbox layout is now usable as a base class the old graphstream springbox graph layout is now a cut into abarneshutlayout class that serves as base for several force based layoutalgorithms and a new layout implementations package contains a springboxclass that inherit barneshutlayout nothing changed in the layout in itself excepted it is now possible tocreate new force based layouts more easily using barneshutlayout as abase
__label__inline refactoring pmd java to reduce that confusing jumble of interconnected methodsgit svn id baf d a c fc e d
__label__push-down fix memory leak in color cache push calculatedstyle field down to those derived valueswhich need it and remove it from the others remove inheritedlength class whichoriginally resulted in my misinterpretation of the spec
__label__pull-up dheeru refactored by pulling up common transitional logic to base transition class
__label__inline her refactor parameterizable policies out of frontier defaults xml update bundled profile for new chains refactoring crawlcontroller java move to three processor chains rather than one frontier java loadseeds removed toethread java delegate most processing loop to fetchchain and dispositionchain abstractfrontier java workqueuefrontier java move policies calculation out to processors candidatesprocessor java new processor for dispositionchain that runs every outlink through candidatechain crawlstateupdater java dispositionprocessor java rename expand to prep crawluri for frontier frontierscheduler java deleted use candidatesprocessor candidatechain linksscoper java deprecated use candidatesprocessor candidatechain candidatescoper only temporarily retained for ease of comparison candidatescoper java simple single uri scope testing for candidatechain frontierpreparer java precalculate all frontier policies in candidatechain before scheduling preconditionenforcer java processoruri crawluri take on some prerequisite preparation previously deferred to elsewhere processorsreport java update for chains of processors sheetoverlaysmanager java applyoverridesto moved here for broader use candidatechain java fetchchain java dispositionchain java role specific subclasses of processorchain suitable for type based autowiring crawluri java new fields accessors of use to new chains frontier postprocessor java deleted skip to postprocessing is now skip to end of chain processorchain java take on control loop formerly in toethread processresult java absorb processstatus eliminate problematic stuck result
__label__move faces move faces config processing from liferay faces bridge impl to liferay faces util
__label__pull-up canvas mouse canvas position moved in base icycanvas class d mouse image position moved in icycanvas d class icytextfield removed the consumecharkeypressevent property icyframe added getinputmap and getactionmap methods roi general performance improvement on draw and mouse events removed useless mouse position information fixed shift combination shortcuts accidently enabled on text fields better headless support fixed wrong null sequence report limited maximum memory to mb for bits jvm to reduce the cannot create native thread error minors others fixes
__label__push-down changes implementing enhancement and code review 
__label__extract extract minimizer interface and rewrite everything that used fmincghardcoded to the interface
__label__rename renamed min max and rounding mode for bigdecimal and double
__label__extract pr mng submitted by johnny r ruiz iii reviewed by brett porter added parameters printsummary reportformat and usefile to configure the reporting format git svn id plugins f bb ffa edef 
__label__move paxrunner improved daemon shutdown file creations moved to pax home added scripts for jdk improved synchronize blocks in stop and waitforexit pending issues with stop operation in windows git svn id b a c ae a bc d a bd
__label__rename renamed removeoobmessages
__label__push-down moved mouse over related code to subclass mouseovermousemanager of class defaultmousemanager so that it can be used optionally
__label__pull-up refactored admin routes to make an instance rather than static added a new all mappings resource with pagination
__label__move reorganize termapi and further move list functions to prologlists
__label__push-down revert fix of the bug this reverts commit a f f da ba f c ae e 
__label__extract generified extraction of current views filtered by type
__label__push-down checking in all the graphical updates changes from the svn branch there will be more changes later but for now this is the bulk of the updates the only conflict was a missing api in dvrimain which needed to call some function that the current trunk is missing
__label__push-down filter for creating anon users better filter api
__label__rename  rename test methods signed off by jonas berlin
__label__move added several methods on eogenericrecordclazz to support ec arguments moved a lot of stuff in erxxxutilities so the ec comes as first argument removed the xxxeditingcontext from the method name this is so the names are more like the ones in eoutilities added eocontrolutils clearsnapshotforrelationshipnamed added eocontrolutils clearsnapshotforrelationshipnamed added and fixed pkstring generation very useful for urls and das with non trivial pks added stringforprimarykey helper to prevent duplication but pk generation is still a mess added erxeoaccessutilities modelgroup ec supporting null for ec added erxeoaccessutilities entitynamed ec name supporting null for ec hopefully all eomodelgroup defaultgroup eoutilities entitynamed etc have been converted to erxeoaccessutilities modelgroup ec and entitynamed so most of the fixmes in that direction have been fixed i have not tested anything so far so please check if something broke on the way one thing might be the reordering of arguments i didn t want to deprecate them as they were pretty new anyway and shouldn t be used a lot outside of erx
__label__extract fixed a bunch of issues added metrics using yammer metrics
__label__rename renamed accelerationmodel to longitudinalmodel
__label__rename rename some classes and variables to new interpolator name
__label__rename renamed capture details view to acquisition details view some timeline chainges
__label__rename aesh removed old tostring and renamed getasstring to tostring so it should work better with printwriter
__label__push-down arqgra cannot use relative location when using standalone junit integration changed grapheneextension to setup resourceprovider for url depending on the framework integration options if container framework integration option is used then containercustomizableurlresourceprovider is chosen which first delegates to urlresourceprovider of arquillian if stand alone framework inegration option is used then customizableurlresourceprovider is chosen which returns the graphene custom url if present
__label__rename small refactoring method renamed
__label__move mapsubject containskey now shows type names when tostring s are equal note some static methods were moved from iterablesubject to subjectutils these are completely unchanged created by moe moe migrated revid 
__label__rename renamed getcurrentrow to getmasterrow
__label__push-down variable referencing refactoring starting this is needed to accommodate the recent double dotted notation and remove the current artificial refusal to handle identifiers with dots in them
__label__push-down jfg refactoring of dao add testenvironment model dao and service add tests for dao disable some pmd checks
__label__move refactoring for gipps krauss and newell model parameter dt is now taken directly from the simulation update timestep which is fix for one simulation
__label__inline refactored connection management code in defaultclientrequestdirector execute preparing to implement authentication handling for tunneling requests via an authenticating proxy git svn id f bb ffa edef 
__label__inline small tweaks while doing other work add missing nullability annotations inline single use utility methods remove redundant throws inline method only called once
__label__extract add support for signed commits add support for required number of reviews
__label__pull-up removed all gdata related code integration with gdata contacts api has been removed in favor of portable contacts api with merging of poco and google apis upgraded spring dependencies to latest versions
__label__push-down plfed adapt to the formauthenticator changes that have happened due to servlet spec changes git svn id cbddccc e a eb be d e b d 
__label__push-down hv introduced a proper implementation for propertydescriptor and refactored code also made some javadoc changes to the api git svn id b cb b d ca fae ebed b 
__label__pull-up changes from brian remedios refactored useindexofchar to extract common functionality into abstractpoormethodcall git svn id baf d a c fc e d
__label__rename added queries returns renamed all to any excluded sourceconsumer from source tracing added performance check for indexing set version to rc git svn id guice googlecode com svn trunk d f a b b b d aecad e
__label__rename rename qualifiedsrcdocname and unqualifiedsrcdocname qualified doc name already has a meaning in the client a document name with module prefix if any unqualified doc name is the document within a module if maven multi modules aren t used qualified and unqualified doc name are the same
__label__move classutil moved findpublicmethod from beanattraccessor to classutil
__label__extract fixed a reduced the resulting index size based on not storing the filename and dfilename for displaying only now we just index the lowercase variant and store the original one that has been done for filename and for path as well removed the dpath and the dfilename fields did some little refactoring extracting some methods toget an better overview and less long methods git svn id a f b ba a ce b
__label__pull-up updated to conform to the ioos milestone schema removed hardcoded strings throughout the code
__label__extract added a pow method to the groupelement class unit test for su not implemented
__label__extract add package definition
__label__rename rename
__label__push-down fix allow combining fields in a single level of the hierarchy returned to separated out import tests for the facet hierarchy generation
__label__pull-up  refactored memorystubs write ssem cpu test
__label__pull-up wagon refactor wagon and wagon webdav merged from wagon branch r git svn id f bb ffa edef 
__label__pull-up move languages certificates and year from film to content pull up the languages certificates and year fields from film to content along with accessors and mutators in both simple and internal model this is primarily for the lovefilm csv ingest
__label__rename rename things to use slice instead of partition as that is a less overloaded term
__label__move hv move constraintvalidatorpayload to constraintvalidatorcontext
__label__extract add support for short syntax with two type definitions make sure that rules inside an if else block have at least a dummy expression like so that we know where a new rule starts a b x resolution x resolution short form for a b x resolution continue a b x resolution this no longer works if expression then name x resolution end as it was not clear if this means one ot two rules you can use if expreession then name x resolution end if one rule was meant or if expression then name x resolution end for two rules of course this makes only sense if expression is a very complex term git svn id then d f ee a dfeeeb 
__label__pull-up nxp refactor test and introduce base class
__label__extract tighten up javascript extraction based on real world analysis addresses her uriutils javanew method isverylikelyuri with tighter heuristic than islikelyuri extractorjs javause uriutils isverylikelyuri and change order of operations to do fixup before call to isverylikelyuri since it doesn t expect strings with javascript escaping and stuff stringextractortestbase javahandle test data with expected value null meaning no outlinks expected extractorhtmltest javaavoid redundancy by using the extractor created in contentextractortestbase setup extractorjstest javasome new tests
__label__move refactor and modularize the jsonopenlegbill test the jsonopenlegbillspotcheck was previously named the jsonopenlegdevtests this is misleading for a variety of reasons and is now clearer additionally two methods used in processing of the bills have been moved to the jsonopenlegdaoutils this removes duplicated code when another openleg spot check is created
__label__inline stashing changes before switching branches for maintenance
__label__rename implemented some tabs in gamesettingframe fixed loading of resources from jar added event replace colorselect basic colour choose panel indexbuttongroup made it possible to have decimal indexed groups rather than bitwise added basic actionlistener functionality listener added a line to the save as code to commit the changes of lgm gameset if it is open gm file corrected default icon code to work from within a jar changed coloroutsideroom to color rather than int gm filereader writer modified to read write coloroutsideroom correctly gmstreamdecoder added some alternate constructors gmstreamencoder added some alternate constructors renamed writei to write added write and writestr functions prefs added string defaultlibs for use when in a jar dynamic detection is planned for util modified getvalidimage to display error messages so that the method doesn t throw exceptions moved the adddim method to here and removed the convenience version to make it thread safe constant overrode equals and hashcode hashcode is just because of checkstyle made comparable for sorting added a copy function libmanager corrected autoload to work from within a jar backgroundframe modified to use the new version of adddim removed try catch in image loading code eventframe modified to use the new version of adddim small correction to linked frame selector frame is now selected as well as being put on top gamesettingframe implemented resolution loading and constants tabs all fully functional modified other tab to use indexbuttongroup modified graphics tab added scale factor field changed the background colour selector to a colorselect component gmobjectframe implemented dnd event replacing resourceframe removed the adddim method spriteframe modified to use the new version of adddim removed try catch in image loading code timelineframe made frame icon final checkstyle xml changed to ignore lines with trailing line comments git svn id f f bc e be cd 
__label__push-down moved checkperiodicboundary method to the only algorithm where it is used
__label__inline improved coherence support and refactored cachewrapper
__label__rename enabled temporary queues renamed getsession to createsession in tests
__label__move faces develop alloy inputdate component remove alloy pickdate and refactor alloy inputdate add dateselect event to inputdate faces develop alloy pickodate component remove alloy pickdate and refactor alloy inputdate
__label__push-down rf view api improvments
__label__rename rename methods
__label__pull-up changes made client level refactoring lucene search related bug fixes
__label__extract packers added to the netstream protocol
__label__push-down fixed up options
__label__extract add lastchangedservicetest
__label__inline aesh completion is working better for values will need to change the optioncompleter api a bit
__label__move many changes improvement on image loader grouped importer stitching abstractimageprovider replaced getimagebytile by getpixelsbytile and the method now support region loading array dutil added copyrect method for easier rectangular copy classutil added getjarpath class method icycolormap minor fix on copyfrom method icyexceptionhandler error report now use the webinterface method imageutil added gettilelist rectangle region method loader reworked getsequencefileimporters methods to be more generic moved file grouping in separate class reworked sequence loading building from multiple file minor tweak on preview panel lociimporterplugin added automatic stitching if needed added metadata level selection using flags in open method reverted groupfiles property back to true by default implemented getpixelsbytile method with region loading support added region loading support to getimagebytile method added sub resolution support to getimage iformatreader method added sub resolution support to getpixelsinternal iformatreader methods added sub resolution support to getimageinternal iformatreader methods sequence tweaked getoverlays class method added getselectedroiset class method added getselectedrois class roiclass sorted wantreadonly method seriesselectiondialog now use sequenceidimporter instead of sequencefileimporter importer systemutil getjavaversionasnumber now returns java version as major numbers xx xx xx xx lut minor fix on setalphatoopaque method omeutil added getnonnegativeinteger int method plugindescriptor better information recovering for bundled plugin documentation fixes
__label__move bug reconcile bpmn element creation mechanisms started movin bpmn element factory to bpmn modelerfactory miscellaneous bug fixes
__label__inline hh remove jdebug timings and guava rename properties file
__label__extract qr codes fix some gui camera and file management related stuff takephotothread add possibility to get latest raw image avoid stretching of image in scaling because of aspect ratio mismatch fileutils fix logic of temporary file creator avoid adding temp marker multiple times qr codes highlight qr code preview loaded objects in green red used in some default materials gui qr codes webcam add support to load qr codes with the webcam gui camera ask to reload camera qr code locations after laser job finish gui camera combine deactivating camera with camera ignore was already a bit confusing in the original version qr codes gui fix some issues with gui locking remove permanent ui elements for camera projector they are now automatically turned on off if it makes sense still reachable in the view menu qr codes gui implement edit gui locking if qr code editing is in progress
__label__push-down move test to springmvc specific ut suite since jax rs suite doesn t produce uriparameters markup in any case
__label__extract added create itemdeliveryoptions mvc
__label__push-down more refactoring of simulation specification classes
__label__pull-up refactored for improved modularity and extensibility general cleanup updated unit test correspondingly
__label__push-down issue global required interactions should be either verified or disallowed improved stack trace filtering several smaller fixes and improvements
__label__move moving of last bendpoint of structural link working most of the time improving opd visualization by adding square bendpoints to structural links current state has option to move last bendpoint of link before object state many changes done since a number of problems were found in the management of refresh of the diagram
__label__inline cleaned up code around patient entered date did some renaming and removed converting entered dob to timestamp dob which already existed
__label__extract df qcadoomes qcadoomes refactored operational tasks and operational tasks for orders plugin fixed npe and problem with missing operation name
__label__rename renamed process attributes to remove type suffix and updated dependent classes
__label__move  snapshot refactoring
__label__rename tiny changes to resultstable more checking for table being disposed this time around creating the combo box change setcolumndesttext to take no arguments and get the column itself change updateuserpreferences to not take the userpreferences since its a singleton and we already have it as a static variable there were two signatures for setcellimage one took an image the other took a status rename the one that takes a status to setcellstatus add javadoc to three methods
__label__push-down clearcase plugin remove vob paths from ucm and replace value with value from load rules git svn id c de d a be ed b c a
__label__inline gets rid of the local write spool buffer proxyoutputstream historically had bytearrayoutputstream into which data gets spooled until it gets connected when it is used underneath pipe that writes from local and read remotely this was to emulate the built in buffer of pipe until it gets connected but this buffer is unbounded and it has been observed in the wild that this buffer has grown to mb and causes oome exception in thread remoteinputstream greedy pump thread hudson remoting remoteinputstream greedy at hudson remoting remoteinputstream remoteinputstream java at hudson remoting remoteinputstream remoteinputstream java at hudson filepath untar filepath java at hudson plugins cloneworkspace cloneworkspacepublisher workspacesnapshottar restoreto cloneworkspacepublisher java at hudson plugins cloneworkspace cloneworkspacescm snapshot restoreto cloneworkspacescm java at hudson plugins cloneworkspace cloneworkspacescm checkout cloneworkspacescm java at hudson model abstractproject checkout abstractproject java at hudson model abstractbuild abstractbuildexecution defaultcheckout abstractbuild java at jenkins scm scmcheckoutstrategy checkout scmcheckoutstrategy java at hudson model abstractbuild abstractbuildexecution run abstractbuild java at hudson model run execute run java at hudson model freestylebuild run freestylebuild java at hudson model resourcecontroller execute resourcecontroller java at hudson model executor run executor java java lang outofmemoryerror java heap space info tom integration tests aborted java lang interruptedexception at java lang object wait native method at hudson remoting request call request java at hudson remoting channel call channel java at hudson filepath act filepath java at hudson filepath act filepath java at hudson filepath untar filepath java at hudson plugins cloneworkspace cloneworkspacepublisher workspacesnapshottar restoreto cloneworkspacepublisher java at hudson plugins cloneworkspace cloneworkspacescm snapshot restoreto cloneworkspacescm java at hudson plugins cloneworkspace cloneworkspacescm checkout cloneworkspacescm java at hudson model abstractproject checkout abstractproject java at hudson model abstractbuild abstractbuildexecution defaultcheckout abstractbuild java at jenkins scm scmcheckoutstrategy checkout scmcheckoutstrategy java at hudson model abstractbuild abstractbuildexecution run abstractbuild java at hudson model run execute run java at hudson model freestylebuild run freestylebuild java at hudson model resourcecontroller execute resourcecontroller java at hudson model executor run executor java i suspect that the channel went unresponsive first then someone created a local to remote pipe and started filling the local end in such a case the pipe will never get connected and so the write fills up the local temporary buffer in this change i m getting rid of the local temporary buffer altogether i suppose this can increase the latency of this specific pipe operation but the other fix is to have a bounded buffer size and the added complexity doesn t seem to be worth it see
__label__pull-up raketask stoppedexception raketask run monitor and raketask makejob are pulled up to runtask
__label__inline added fine grained rule based html processor the htmlpageparser is now just a collection of simple rules that can be easily changed
__label__push-down major indexing changes and updates implementation of a different pojo indexing strategy see javadoc and code comments for more details added autocomplete indexer that indexes searched phrases and takes their search frequencies into account the most searched ones are then displayed first both pojo and linkedin full indexing is set to run periodically configured by the spring task scheduler
__label__extract added api to prevent replacement of existing files during a copy
__label__inline started working on updates to match cr release of jsonld all context processing algorithms done done expansion algorithm and value expansion algorithm all core expansion tests passing keeping track of changes and some thoughts compact algorithm implemented and all compact tests passing flattening algorithms complete framing algorithm done rdf conversion algorithms complete re added old normalization code error handling cleaned up and error handling tests passing updated implementation reports fixed up programming errors in integration modules and fixed up implementation reporting issues
__label__move updates to the codegenerator and atomic handling new transactionmanager withtransaction callable atomic this allows for the atomic configuration to be passed to the backend specific implementation of the transactional workflow add new backendid getatomiccontextfactoryclass to enable configuration of the atomic context factory by the backend codegenerator is now an abstract class instead of an interface move the common code from abstractcodegenerator to codegenerator rename abstractcodegenerator to defaultcodegenerator which makes more sense the class is not abstract eliminate the need to call generatebackendid now it is only required to call generatecode as was previously
__label__pull-up refactored filtercontrols moving some logic in the superclass
__label__pull-up class hierarchy cleaned
__label__push-down refactored typemapping hierarchy and removed some obsolete methods
__label__extract pr mpir replaced requiresdependencyresolution with manual resolution so that a listener can be passed to create the dependency tree git svn id f bb ffa edef 
__label__extract  refactor to clean up duplicated code in cacheentry validation regular and variant reuse negotation byextracting code to shared method git svn id f bb ffa edef 
__label__rename redid tile system and more work on room s tile pane tile replaced ints with points and dimension handles own id rather than roomframe added autoupdate field for efficiently modifying several fields before firing an update point renamed to pathpoint to easily distinguish between the two updated path and pathframe to reflect changes instance replaced x y with point listener fixed bug where clicking load and cancelling opened a file anyways roomeditor updated to reflect changes to instance and tile now supports tileselector and tile add tab roomcomponent now uses rectangle instead of ints gmfilereader and gmfilewriter updated re instance and tile room temporarily removed addtile method since tile now handles its own id updated to reflect changes to instance and tile roomframe renamed some fields updated to reflect changes to instance and tile tile add tab now more usable some tweaks to tile edit tab git svn id f f bc e be cd 
__label__pull-up added google drive file permission add update and remove operations
__label__push-down extended the code in the iconio package added read support for new style icons with embedded pngs added write support to icofile in most cases the output matches the input i o now done with lgm s streamdecoder encoder gmfile now stores which version it represents at the moment this is only used to determine whether the game icon needs modifying if game version for easier debugging ending the inflater restores the original file position read byte int int now guarantees the requested number of bytes will be read unless eof is reached bufferedinputstream guarantees this but inflaterinputstream does not streamencoder now subclasses outputstream for convenience git svn id f f bc e be cd 
__label__extract added type conversion for constants optimized referencecache removed null check from containerimpl getinstance added container hasbindingfor to provide comparable functionality made key public git svn id guice googlecode com svn trunk d f a b b b d aecad e
__label__pull-up reorganized package structure
__label__extract some refactorings for cleaner code
__label__inline doublechest now supported as a valid inventory various inventory related cleanups
__label__pull-up moved bytesread test to signed off by farid zakaria
__label__extract refactor edgeextractor and also take inedges in account
__label__extract extract error handling in a method
__label__rename redesigned the index state it is now split into three different states the general state the update state the batch build state this split up allows to independently control whether the subscription listeners should be enabled and whether the index should be rebuild renamed build job to batch build job since target group testing identified confusion about the term build job started using terminology queue subscription rather than message consumer git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc 
__label__move get rid of shell test target move rest tests to slow tests since they don t need hadoop
__label__extract cleanup abstractnode
__label__inline mchanges allow for overriding the announcement email from address submitted by alexander schwartz reviewed by dennis lundberg o in addition to the patch i added an expression to the new parameter so it can be used from the command line i also made the from parameter readonly so that nobody tries to override it git svn id f bb ffa edef 
__label__move refactor moved image utility methods to own class
__label__inline java typres make methodtype immutable remove getapplicablemethods overload
__label__extract  more refactoring method extractiongit svn id f bb ffa edef 
__label__push-down refactored typemapping hierarchy and removed some obsolete methods
__label__rename table digitalization renamed to digitization table subject group is mapped dao object is created git svn id database trunk a f c aaa da e aacc d 
__label__move imap move append test to the imapappendtest class
__label__rename consistency predicates minor change renamed some methods and re written some javadoc should be semantic preserving
__label__pull-up refactored loadstage into loadstage base and loaddatastage jit avoidance moved into blackhole
__label__pull-up refactor to use interfaces in core model for easy gwt replacement
__label__extract major rule datatype overhauli completely rewrote the internals of rule to make it easier to use withchris dyer s dotted item extraction scheme also we should have someidea after profiling but i think that it should take up less space withthe rewrite also it s a hell of a lot easier to understand also changed the feature functions to reflect this since they look atrule internals also made a first attempt at writing the extractionlogic
__label__extract refactored audio scrobbler class to reduce method length
__label__pull-up moved a bunch of setters getters to the base class git svn id f bb ffa edef 
__label__push-down refactor mapreducer interface make sure that infinispan mapreduce and infinispanmapreduce setcombiner are referenced thanks radim call statistics begin and end before and after maptask executions update mapreducestage to put the results in the cache if the task doesn t support this
__label__inline changes made to analysis endpoint mainly analyze parameter changes and associated supporting classes
__label__rename karaf rename sync properties and usage
__label__push-down selection option implemented see vim s help selection for details added string options they need more work do be general added boolean option toggling like set ai i broke some visualmodetests as a side effect of this probably because differences between real and mock classes real thing works will fix em later
__label__move remove synopses descriptions object move short medium long descriptions to the top level
__label__move fixed issue where dw would move backwards if cursor was on whitespace at the beginning of a line
__label__rename renamed imockinvocationresponder to imockresponse renamed implementations accordingly renamed mockconfiguration responder accordingly
__label__move request payload serialization refactor moved payload tojson logic from client to abstractaction and generalized payload usage across action implementations
__label__rename modify tree storetree to write only the tree definition and return a boolean modify treebuilder processtimeseriesmeta to call the collision and not matched flush calls on a tree instead of storetree since processing will never modify a tree s metadata add copy constructor to tree rework treebuilder processalltrees to cache the tree definitions in a thread safe manner so we keep scanner calls down it will refresh the list every minutes when processing real time tsmeta entries remove spurious system out println from testtree java add root branch cache to treebuilder to speed up the real time tree generation calls so that they don t have to fetch the root for every call renamed treebuilder loadroot to loadorinitializeroot made it a static call modified it to load or set the cache and return the root branch signed off by chris larsen
__label__extract extracted statusupdateservice from timelineservice
__label__extract hv extracted two methods
__label__extract bring back the noadditions option this is useful for running constrained crawls where the complete list of urls is known in advance git svn id f bb ffa edef 
__label__inline further service api refactoring
__label__inline removed some idea warnings
__label__move move checkdestinationdirectory from uistarter to resultstable now we call it when the uistarter calls the ready method of resultstable also make the method synchronized it was probably a mistake that it didn t move to resultstable when we first broke out resultstable into its own file this was the only reason uistarter had anything to do with userpreferences or in fact anything to do with the model now that we ve moved this code uistarter doesn t depend on model at all besides for constants and is very generic with a few small changes it could be used as a startup file for any graphic application also i plan to use the results of checkdestinationdirectory specifically to change the results table but that s still to be done
__label__pull-up refactor code to simplify the resource handling
__label__pull-up hv hv pulling constraint origin adaption up to metadetabuilder in order to adapt method constraints too
__label__inline refactored remaining services added apis updated code based on the refactoring check in review comments main changes include added apitype constructors changed account specific apitypes into generic ones renamed operation action serviceshelper changes replaced object with generic types this eliminates the need for casting as well as for suppressing warnings in service classes implemented other suggestions static map replaces if statements for type collections refactored all services to use apidefintion and servicehelper fixed test cases as needed added demotestintelligenceservice implemented wrappers for mambu api additions updated mavens pom to build mambu apis java bin jar using mambu models v jar mbu as a developer i d like to work with custom views a added getting custom views api wrapper b added filtering clients groups loans savings by custom view id mbu as a developer i d like to filter lists on centres via api updated wrappers to filter by centreid for clients groups loans savings services
__label__pull-up added move animations to the growls when they fall down
__label__rename df renamed some views
__label__move o refactored slightly to split inprocess forked creation also tried to move reporting further out of the fork this area of the code still needs a lot more work git svn id f bb ffa edef 
__label__move minor refactoring to move some noise out of pmd java cleaned up imports git svn id baf d a c fc e d
__label__move hv moving constraintannotationvisitor reporterror to new class messageradapter moving constraintannotationvisitor initdiagnostickind to constraintvalidationprocessor git svn id b cb b d ca fae ebed b 
__label__move staring background tasks moved back into edt created specialized util method for that using intellij methods for thread management around ui fixed deprecated method call
__label__move pull methods getrecorder and makecrawluri string into moduletestbase and move moduletestbase into heritrix modules so that crawluri is available
__label__pull-up extended map display shader mechanism inverted shader call logic instead of mapdisplay calling shader on itself the mapdisplay is passed to the shader allows more complex shading behaviour e g a two pass gaussian blur created super class mapdisplayshader two shade methods can be implemented shadewithmarker and shadewithoutmarker which are called at different positions in postdraw from mapdisplay enhanced maskedmapdisplayshader now has two options a use dynamic mask canvas b use mask image added blur and deform shader added shading examples
__label__inline text editing rewritten
__label__inline refactor swftest fix broken storescu mppsscu and stgcmtscu
__label__move relocate method classfor asmtype to types because of single responsibility and code reusability moved method classfor asmtype to an internal util class types
__label__move started refactoring roadmodels created spatialregistry to encapsulate all positional information related to road users
__label__pull-up move method getserializerclass from asyncproducerconfigshared to syncproducerconfigshared
__label__pull-up refactored the tests to prepare running ecj as well as delombok
__label__move fix ant tests pmdtasktest is moved partly to java javascript and xml
__label__pull-up resourceframe now provides default code for revertresource since it is now generic safe and every child was just using the exact same code so this cuts out the duplicate code inheritors may override the method if a custom behavior is needed but this is not needed by any of the existing resource frames yet git svn id f f bc e be cd 
__label__push-down fixing missing versions globale key list
__label__push-down multicast change notification
__label__inline implemented spawn tp tphere and back for warp module fixed minor glitch in the chat module fixed problem where tnt would ignite when placed next to redstone despite any config settings changed version to 
__label__push-down refactored calculations to use interval instead of reportingperiod motivation interval is the concrete interval with a start and an end date any calculation is done against a concrete interval the reportingperiod defines how to calculate an interval e g last year and might or might not be relative to the current date issue 
__label__push-down faces develop jsf jsf compatibility layer moved jsf related method to compatimpl
__label__push-down modelextension elements are now always added check for standard emf ecore data types for modelextension attributes removed tns from jbpm globaltype name added missing custom jbpm attributes and elements show hide tabs according to modelenablement preferences do not set a default name for catch minor refactoring
__label__push-down create asyncrequestwrapper
__label__extract code cleanup activity 
__label__extract extract class
__label__rename rename treemap setall to treemap union and make it left biased instead of right biased
__label__push-down schema cache avoid taking too many fieldtypes snapshots i e while creating or updating a fieldtype git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc 
__label__pull-up cleanup
__label__extract fixed major bug with custom events added command to reload config config defaults now applied and saved
__label__extract shadowloader added caching for jarfile content lookups
__label__rename fix recoverycoordinatortest use new instance of recoverycoordinator in each test otherwise the timestamp of the next call to istoosoon could happen well after the backoff threshold on slow machines such as small nodes on cloudbees jenkins causing false test failures this also renames and refines the individual tests
__label__push-down move capped management to entitymapping
__label__inline remove some instance variable reduce visibility
__label__pull-up split the calculation cohort definition into regular and date based calculations added unit tests for the evaluator moved report unit tests into the correct packages
__label__inline huge changes to multiworld implementation this commit contains broken code world management must be refactored to suit the new api
__label__rename  renamed comap to contramap
__label__rename renamed internal compiler package to token
__label__rename api change rename command execute to command perform fix 
__label__move moving lotsa stuff from erxutilities erxxxxutlitities added and fixed the accompaniying deprecations
__label__move bit more test refactoring
__label__pull-up moved templates implemented profile activity
__label__move java typeres move method typeresolution methods into a helper class
__label__inline commiting the code of v new features custom commands now use my parser added entity data e g one can now use angry wolves powered creepers different villagers etc added a skript reload command to reload the main config and all scripts added expressions last spawned entity and line of whereas the latter can currently only be read and cleared but not set changes trigger files are now called scripts end in sk and are located in the scripts folder the main config also now ends in sk variables are now stored in a csv file merged right and leftclick into one event such that one can now use on click on the entity player etc cannot be used in damage events anymore one has to use attacker or victim respectively several changes in the api e g removed loopexpr all expressions can now be looped block loops now loop from bottom to top and not from left to right whatever left or right is argument can now also be accessed as argument or argument e g arg player or player argument targeted block is now stored during an event resulting in faster execution and no unexpected results when changing any blocks in the player s los the current targeted block can still be accessed with future targeted block or targeted block will be will not be etc fixes fixed checkediterator and blocksphereiterator and aabb for that matter skript now throws an error if it is reloaded by some plugin manager that doesn t reload the plugin like craftbukkit does fixed inventory handling e g can hold does not change the inventory anymore improved the handling of items that have multiple ids e g cauldron block item or redstone torch on off the parser doesn t exit anymore if an expression s init method printed an error allowing for more complex patterns fixed expressions and state most expressions don t even have it and others inherit it from others fixed furnace slots fixed clickint on air not being checked for being cancelled by other plugins correctly fixed clicking on an entity causing click events one for the entity and one for air fixed ambiguity of variables that have expressions in their name fixed not being able to heal or damage an entity by hearts fixed the expression of conflicting with itemtype s of and many other small fixes drafts added drafts for unit testing known issues the default location of many block events is at an entity and vice versa i know the cause but not how to fix this tidily the damage in damage events is still the raw damage i e without any armour critical enchantment modifidicators applied
__label__extract coded mdi functionality and lots of other gui code gmltextarea leading spaces are converted to tabs tab width is set on initialisation added gettextcompat to convert newlines and tabs back for resave see prefs tabwidth see util convertindents string gmmenu extracted from gmmenubar to allow subclassinggmmenubar added window menugmtreegraphics background nodes are now shown correctly in the treemdimanager implemented resizedesktop mdimenu the window menu it updates when frames are added and removed and offers some common commands subclasses gmmenumdipane modified to call resizedesktop in certain cases added functions to close all etc vtexticon fixed a generics warninglgm mdi is now an instance of mdipane modified createtree to add a jtogglebutton for the eventframe reordered some gui initialisation code to work with the extra toolbar button overloaded makebutton for other kinds of abstractbuttonresource modified the arguments to copy there are now two versions modified subclasses to use the new arguments resourceframe added javadoc comments to some fields to clarify their purpose modified resourcechanged in all subclasses to compare against resoriginalscriptframe modified to use gmltextarea gettextcompat eventframe added support for the toggle buttoncheckstyle xml todo comments are now ignored eclipse already has better functionality for thatabstractbitmap removed a fixme commentgit svn id f f bc e be cd 
__label__rename renamed parameterint to commandint
__label__push-down modules modules modules modules modules multiple fixes in dependency graph rearchitecture
__label__push-down improve biomegenerator and biomecache handling the biomecache class has it s implementation moved to common our cache is more efficient for our needs than mojang s cache as it can better handle virtual biomes our cache has very similar api to mojang s cache for now previously there was a biome generator called vanillabiomegenerator that had to be special cased now it s up to the implementation of tc common either tc bukkit or tc forge to register a vanilla biome generator that properly implements biomegenerator there is one area left where the vanillabiomegenerator should still be special cased bukkit forge vanillabiomegenerator gets its information from mojang s worldchunkmanager the biome gen base arrays are converted to int arrays if you would use tcworldchunkmanager extends worldchunkmanager to get information from the biomegenerator you would get infinite recursion to make the code more maintainable a check has been added to the forge bukkit vanillabiomegenerator classes as well as documentation to the class
__label__inline added support for custom java based editor a custom java based editor can now be added to a jvsthost object the view can modify parameter and program settings of the vst as well as send midi messages to it jvsthost has been modified such that all public methods are synchronized this helps coordinate automation and ui threads which may try to access the plugin simultaneously
__label__inline fixed background image bug caching images in browser enhanced linklistener some house cleaning playing with idea s code inspection utility
__label__rename renamed getrootsite to gettoplevelsite since this method has nothing to do with reactor execution root git svn id f bb ffa edef 
__label__extract extract static assertxyz methods for null safe and unknown type safe checks
__label__rename renamed requestresponsemapping to stubmapping
__label__inline inline finishandinjectsingularmethod into generatesingularmethod
__label__rename rename castbuffer to numberbuffer to clarify the usage of this buffer
__label__rename additional changes for jira feature request sgf supporting gemfire s new cluster based configuration service renamed the cacheusingsharedconfigurationintegrationtest class to cacheclusterconfigurationintegrationtest and added an additional test case to assert the default non use of cluster configuration behavior renamed gemfire system properties references for enabling disabling cluster config based revision r in gemfire 
__label__extract extract out a method to localize responsibilities
__label__push-down restored ability add new variables for xpath rules the dialog is raw but will be tweaked need to modify the rule interface in pmd property to be able to drop them upcoming git svn id baf d a c fc e d
__label__rename  renamed method in jsonreader
__label__move remove utils and move initmdc to sentryappender
__label__push-down changed schema for relay first version of parsing complete
__label__rename refactor move thrifttypeinferringcolumnquery to the thrift package and rename internal members in hectortemplatefactory
__label__push-down minor changes after value expression review
__label__rename docs and reorg for bean utilities javadoc refdoc rename classes to accurately reflect purpose move injectable method to reflection flesh out the builders package info
__label__extract added global preference page stubs including wsil browser to support schemaimportdialog fixed new file wizard unable to edit file name
__label__push-down moved abstractlazylayout addcompoenteagerly to lazylayout
__label__inline hv implementing group conversion unifying handling of cascaded validation for bean parameter and return value validation also removing type names from executable names to be in line with the spec
__label__rename rename atomiccontextfactory newcontext to atomiccontextfactory newatomiccontext
__label__extract modifed repl to allow for turning autorun on and off added ability to explitly run program using run command modified rollback to rollback to the last successful run added support for executing multiple repl commands on a single line by separating with semi colons additional work is needed for this to work as desired with rollback functionality
__label__pull-up faces develop alloy inputtext component extend generated base class for consistency
__label__inline enhanced dependency resolving i understand why dark was so upset about the code now
__label__extract refactored to extract writepottofile and writepotofile methods
__label__pull-up major highlights moved sim to similarity package added new implementations of streemer and shindler s k means improved vectors by defining a common equals and hashcode tweaked intset to be an intcollection and updated bulk operation apis to operate on intcollections
__label__pull-up removed duplicate method implementations
__label__inline varenc remove unnecessary subtree rewriter classes
__label__pull-up refactored tcpip including nio support code for jgrp tcp nio no longer extends class tcp and connectiontablenio no longer extends connectiontable they instead share a common abstract class with shared methods
__label__extract version fixes more appropriate jangaroo facet detection only add facet if packaging type is jangaroo or compile goal is called explicitly jangaroo facet for war modules that do not contain any jangaroo code is no longer needed do not copy transitive jangaroo dependencies if they are already contained in a war overlay git p depot paths coremedia jangaroo change 
__label__rename renamed valuemetric to gaugemetric more inline with existing metrics terminology
__label__move bug move tests to junit port of security tests change id i c a d ceb a b f signed off by sopot cela signed off by thomas watson
__label__inline added button to reset the process logo to default cleaned the code a little
__label__push-down code cleanup in preparation for release of simplified protocol structure moved configlocator logic into hibernateconnection split large hibernatedatabase class into multiple implementations added javadoc test and test data reorganization removed slf j dependency
__label__inline added images for roster handling of roster entry remove
__label__move  moving spi package into processor module simplifying accessornamingstrategy contract
__label__inline cleanup of old code and useless things code cleanup
__label__pull-up refactored servlet and standalone to prepare for eventual non servlet based ninjas
__label__move hv style changes moving to setter getter approach in validationbootstrapparameters
__label__move faces remove portletcontainer create url string methods faces clarify the contract of bridgeurl by moving uri functionality to the new bridgeuri class faces simplify the class hierarchy of bridge urls by removing marker interfaces
__label__rename renamed keys into fields for the control files to match the terminology of the debian policy
__label__push-down improve traceobject function
__label__push-down hh sync embeddedpgdsfactory and fix tests
__label__inline rewritten the current lock implemention to solve ticket 
__label__pull-up fix missing amendmentversions on billsobiprocessor when the billactionanalyzer was changed to fix the bill actions having the wrong amendment version it created a foerign key problem with the database a fix was written and was applied to the xmlbillstatprocessor unfortunatly that was not sufficient because sobi files also use the billactionanalyzer and could be affected by this the method that fixes this problem has been moved to the abstractdataprocessor so it can be accessed by both processors the billsobiprocessor now includes this method in the bill action logic
__label__move new if actor restored the old if actor in org dawb passerelle actors flow moved the new dynamic port if actor to org dawb passerelle actors ifdynaport
__label__move created a new class getter and moved the appropriate get methods
__label__pull-up refactoring added outrankingcriterion
__label__pull-up refactored the atom binding layer to be more generic now we have horizontal jax rs services that handle all of the different artifact types rather than a duplicate resource per artifact type
__label__pull-up remove dependency on treenode
__label__rename hacker s weekend on compiler plugin renamed deepstatementrewriter to deepblockrewriter and rewrote it to always process a whole block heavy refactoring of ast transform related code to make it easier to understand and more extensible added support for declaring a mock s interactions right when creating it mock list implemented specification with to declare conditions and interactions in the context of an object
__label__inline expands modified flag to entity and aspect nodes changes to serializer to take in consideration modified flags for entity and aspect cleans serializer code adds more junit tests to perform network tests and further tests on existing serialization of trees
__label__extract extracts duplicated error response creation
__label__push-down introduce attributebuilder interface
__label__push-down refactor maven config params and push pullcommandsallow all mojos to run without maven project ie pom xml switch to requiresonline annotation to disable mojos when offline change projectconfig param from string to file extract common options and some common code from push pullmojo and push pullcommand add module related params to pushpullmojo
__label__inline started cleaning common module up
__label__inline wip refactor of candidate services this now uses the new authentication filter and i ve converted the existing session token idea so that it works like an xsrf token needs testing and tidying next
__label__move simplification generalization of code and addition of activemq product also moved product configuration files to products directory
__label__extract further updates to the upload tool this splits the display into panels that are displayed in succession the first to accept connection info the second to select content to upload the third to show status and the fourth to indicate process completion git svn id ed cd a f c be b fe bcb
__label__inline more refactoring inlining some methods preparing to do a wrapper class for defaultmutabletreenodegit svn id baf d a c fc e d
__label__pull-up sc esilco some refactors
__label__rename renamed clusterwidemaptest keys and entries test method names signed off by thomas segismont
__label__rename rename bigfilemode to bignumbermode compress git svn id f bb ffa edef 
__label__pull-up refactoring abstracting duplicated behaviour of the create comment and edit comment pages and comment panels for issues documents and milestones into abstract classes for issue 
__label__push-down fixing bug where stop would not work
__label__pull-up df esilco fixed problem with overriding all records with given pallet number instead of selected ones when moving between storage locations
__label__rename rename wrong methods
__label__push-down scaling down the use of parsing refactored most of it into the parser superclass
__label__inline inlining it again
__label__pull-up rsa refactoring and new test case
__label__rename refactor rename wechatappservice to wechatsmallappservice
__label__rename jcbc fix fts errors handling parsing querystring highlight motivation during the review phase the following problems have been identified with fts rfc that affect the implementation stringquery should be querystringquery there is an additional plaintext error case when a consistency is requested but cannot be fulfilled within the timeout highlight style is actually optional errors is not an array but an object and when it is present hits can be null modifications stringquery has been renamed to querystringquery and the static factory method from string to querystring highlight now has several overloads that can omit the style when used the style is actually set to new special enum server default case leads to a responsestatus failure which is now interpreted as a ftsconsistencytimeoutexception with execution errors now parses both a jsonarray and a jsonobject the case where hits is null is also handled added unit tests and integration tests most notably for the error handling cases result the error handling of fts is more correct and a bug with it is fixed other comments from rfc review have been taken into account change id iefd e a f cc a a c b reviewed on reviewed by sergey avseyev tested by simon baslé
__label__inline added bindable and boundsetter cleanup
__label__pull-up refactor variables resolving allow custom variable parser implementations update test cases signed off by
__label__pull-up refactorings got rid of componentsuiteresolver because the componentsuiteregistry has to be filled in advance anyway and this is what the idea plugin now also does simplified componentsuiteregistry accordingly split xmltojsonhandler used for all exml parsing into two handlers one for the metadata exmltometadatahandler and one for the ext component json exmltojsonhandler the metadata is needed to re build the xsd the json is needed when generating the as class opened api to generate a single class removed some too exhaustive logging and a few souts git p depot paths coremedia jangaroo change 
__label__pull-up refactored tcpip including nio support code for jgrp tcp nio no longer extends class tcp and connectiontablenio no longer extends connectiontable they instead share a common abstract class with shared methods
__label__extract cotinued item author view added view item state to rendering removed separate allowsource allowresult from deliverysettings
__label__inline  mostly working add edit remove maven runtime wizard wip also got rid of global settings nonesense it was only used to calculate local repository location afaict which does not make much sense and significanly complicated maven installations preference page change id i d edcbb cd ddbf c ceeccc aa signed off by igor fedorenko
__label__pull-up moved bundler and impls out of tp into org jgroups protocols tp bundler string type allows to change the bunder at runtime e g probe sh op udp bundler sender sends changed nobundler to not use a pool of output streams
__label__inline removed the metrics visitor
__label__move conversion from openssl to rfc dns moved to opensslnameutils
__label__extract extract test runs in to builder style object
__label__inline further api simplification
__label__rename fix up some string assembly the stringbuilder isn t buying us anything and rename wrap to quote
__label__inline move build variable logic to package add teamcity bamboo support
__label__push-down pushed down all non abstract non static methods to abstractiobuffer added more final modifiers to abstractiosessiongit svn id f bb ffa edef 
__label__push-down fixed message id in topicsadded method inheritance testrefactored out nevadoqueueconnection and nevadotopicconnection
__label__rename rename sentry to sentryclient rename android sentry to sentryandroid rename the sentry class to sentryclient rename the sentryfactory class to sentryclientfactory and renamed all subclasses to now end in clientfactory remove breadcrumbs class add new sentry class for static client access and usage rename android sentry to android androidsentry to make it unambiguous when used in code rename sentryfactory option to factory so that the environment variable configuration is now sentry factory and the java system property is sentry factory
__label__inline i think all of the credentials support is now done upgraded maven project dependancy was generting errors when trying to test moved a few files aorund to make more sense lots of other minor stuffs
__label__move refactor moved webclientproperties from databaseservice
__label__inline refactored rosterview to pull out rosterview inner classes viewcontentprovider and support classes
__label__pull-up ivy buildout for managing project couple test code changes to reflect new layout removed cyclic dependency b w tests jena sesame and core fix dropping sdb support keeping code around in case anyone wants to revive it but it s not in the jena module anymore
__label__move her h needs in ui quit shutdown option engineresource java add exit control area at bottom of page allow jvm exit if confirm box checked and either no jobs built running or extra confirm boxes for each built job checked flash java fix to allow multiple flashes per page load jobresource java crawljob java move useful status string method to crawljob
__label__rename  renamed latesttreatment to latesttherapy therapy now has domain logic to start itself added phases object to therapy which encapsulates phase information viz dates and doses for ip cp eip for the therapy
__label__pull-up some refactors git svn id b e d d ab bb d b
__label__inline remove unused field
__label__inline remove builder from query
__label__inline calendarservice calspacecache moved into executioncontext
__label__move lilylauncher implement lily service rudimentary e g conf plugins etc still needs thought for now uses the built in conf added resetlilystate to wipe all lily state and expose it via jmx it doesn t actually work since the code to stop avro in the class avroserver is commented out when activating that again it works though will look at this later moved cleaning code from hbaseproxy to new cleanuputil class git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc 
__label__extract added documentation feature
__label__rename tfj renamed following methods onuserlistsubscrbe onuserlistsbsucription onuserlistcreated onuserlistcreation onuserlistupdated onuserlistupdate onuserlistdestroyed onuserlistdeletion onuserprofileupdated onuserprofileupdate
__label__move nishi abhi moved patient details show page action to patientdetailscontroller signed off by abhishek
__label__rename renamed callrealmethodwith to callrealmethodwitharguments added javadoc
__label__inline don t write items if they ve not changed
__label__pull-up shift further method to parent
__label__push-down kill buffer fixed
__label__move  common web account service methods are moved to userservice class from providerservice adding resetpassword method to userservice
__label__move minor refactoring of service layer assessmentmanagementservice now focused specifically on assessment management other functionality has been moved to assessmentcandidateserivce and a new bottom layer service called entitygraphservice
__label__move reuse tostring method between oauth and oauth and move getlocalefromstring helper method
__label__pull-up added errorreportframe for easier generic report major changes in roi classes warning roi class has more methods better d d and d roi support better booleanmask integration in roi many others changes related to roi and booleanmask in general base kernel roi are now plugins point d point d point d classes improvements rectangle d rectangle d rectangle d classes improvements colormap tabs are now colored to reflect the channel colormap prelemenary bio formats automatic error report added many color conversion methods and tools in colorutil class added overlay isattached sequence method added bytearrayconvert read writexxx methods handy to serialization rewrote sequencechooser class cleaner and updated to new method removed the useless roi tooltips severals fixes and tweaks some refactoring
__label__extract extract code to additional function
__label__push-down exploit new sourcepath option removed all guessing no more guessing of members classes and type casts removed the corresponding compiler options too the downside is that all imports must be accessible and parseable at compile time this means that we will also need something like a classpath before we can use this inside our maven plugin to resolve dependencies on jangaroo libraries the upside jooc warnings should be taken seriously now splitted analyze phase into scope and analyze changed parser to parse dotted identifier sequences as qalifiedide and increased priority of new operator to be higher than dot new a b c d is now correctly parsed as dot new ideexpr qide a b c d handled all code generation for qualified and unqualified ide expressions in ide and qualifiedide generatecodeasexpr no more tree rewriting in dotexpr and elsewhere i think we can remove the parent node slot in astnodes and change the return type of analyze to void code generation now adds the package prefix for imported identifiers and the private prefix for private static members this should be more efficient and less magical than the access via with we should be able to remove the with statements now renamed methoddeclaration to functiondeclaration as it is used for both added ast node for as expressions git p depot paths coremedia jangaroo change 
__label__push-down wagon simplification of get calls git svn id f bb ffa edef 
__label__pull-up refactored last tests to use common base class
__label__inline simplified servlet logic improvements to servlet and jsp code
__label__rename rename errortype errorkind
__label__move created a fully working handlesetter for eclipse and refactored handlegetter a little mostly to stuff common code into pkg
__label__extract biome managing in world addition in pluginloader added a biomegenbase wrapper we might not need it after all it s not implemented in nms yet at any rate pluginloader will now try to look up plugins from disk when enabling the to allow enabling of newly added plugins world now contains setbiometype and getbiometype generally the whole biome data array can still be obtained from chunk
__label__rename rename people to friend
__label__move added messagebatch and unit test changed message list marshalling write read length of message list first added up messagebatch to protocol default impl added enable batching to tp all protocols up to and including nakack and unicast now implement this method message bundling we re only passing the cluster name once moved unmarshalling code into tp receive jira
__label__extract refactor output format of cluster list
__label__inline removed the obsolete invenio search handler
__label__inline various bugfixes restored formsservlet to version before commit date remove debug output link implemented readonly mip for outputs rendered as links dialog removed action which is breaking the form bfrequiredfull added missing dependencies for betterform ui range slider inlinealert fixed rendering of inline alerts xformsfeatureexplorer added bfrequiredxformsfeatureexplorer to add addtional js dijits
__label__rename renamed generateparameter to generatecommand
__label__move postgres impl is complete added queryoptionpostgresqlsearch to represent postgres search option such as language moved some function from jdbcdbutils to jdbcpersistencemanager in order to be able to override them in postgresqlpersistencemanager
__label__move refactoring extracted timelinerepository and userlinerepository
__label__rename enhancements to how queries with bind values are stored internally and sent to the server previously we allocated a new string object for the entire final query we were sending to the database if you had a big query or especially if you had large bind values you ended up with essentially two copies in memory this change will reuse the existing objects and therefore should take the memory it does today for a given query this restructuring will also allow in the future the ability to stream bytea data to the server instead of the current approach of pulling it all into memory i also fixed a test that was failing on a database also renamed some internal variables and some minor cleanup modified files jdbc org postgresql core queryexecutor java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql test jdbc databasemetadatatest java
__label__rename a few eventframe related tweaks and renamed a gm class to gm eventframe key selector now grabs focus when a key event is selected tree is now collapsed when the frame is closed gmfilereader renamed gm filecontext to gmfilecontext eventkeyselector tweaked so that an empty box will not let you add git svn id f f bc e be cd 
__label__move in progress using massivecraftcore and allman indentation style and minor refactoring
__label__extract fixed a window size bug in the download sites editor added the ability to download beta modules from crosswire
__label__move replaced ref with weakreference fixed group deletion weakreference is given special treatment by the garbage collector which makes it less prone memory leaks and easier to use it also has a few other advantages had i known about this class at the time of creating ref i would have used it resourcemenu removed the getselectedref and setrefselected methods and made get set selected take weakreferences as argument listener corrected deleteresource to properly delete all children of a group util added some static utility methods for weakreference deref and refsareequal resource moved the node field from ref to here git svn id f f bc e be cd 
__label__inline new features reworked database persistence layer removed locking new multi component
__label__extract handle redirect correct create all gems for the dependency hull
__label__extract clearcase plugin added option to set the time window when merging change log entries git svn id c de d a be ed b c a
__label__rename rename boolean ishasxxx methods to hasxxx this exposes them as xxx attributes in xpath git svn id baf d a c fc e d
__label__pull-up documentlisteners cleanup documentlisteners is now set instead of map added protected hasdocumentlisteners method using foreach for documentlisteners iteration moved adddocumentlistener and removedocumentlistener from basicpanel to rootpanel fixed null handling of adddocumentlistener and removedocumentlistener according to javadoc documentlisteners is now private and final
__label__inline refactoring four new helper methods in codegeneratorbase clean up the code in both subclasses a lot idea s structural replace rulez on the fly cleaned up multiple declaration of jswriter out
__label__inline merge infosigns itemdisplays and shops into database make sureplayer shop stock only affects economy that player shop is a part of
__label__pull-up pull generatesingularmethod implementation up to javacsingularizer
__label__inline cleanup the logging stuff so it s simpler and more coherent at the default verbosity level
__label__rename renames methods on encoder this also moves the encodequeryparameters method to the encoder class
__label__extract coded most of the popup menu for resnode in listener extracted some methods for listener actionperformed delegation will need revision on mouse handling and add insertresource methods copyresource still needs to be coded corrected some credits in readmeadded javadocs to resnode status and resnode kind i get them confused a lot even though i coined the termstemporary tile painting in roomeditor now uses transparency and caching will need to be replaced with a tilecomponent git svn id f f bc e be cd 
__label__extract tests added for gettranslation exists
__label__push-down rewrite
__label__move add datetime utility class that moves the date parsing features out of graphhandler and cliquery where they can be shared by the api and other tools add millsecond absolute timestamp parsing add month relative time option with the n character that works over day periods refactor the date time specific calls out of graphhandler modify cliquery to use the new date time parsing so folks can now enter relative or timestamps via the command line add unit test class for datetime java allow override of local timezone via config file signed off by chris larsen
__label__rename renamed classtag qticlassname and similar
__label__rename rename add noop dispatcher cleanup
__label__pull-up mjavadoc refactor out base class make jar not aggregate git svn id f bb ffa edef 
__label__rename allow a direct write into channel without passing through a select o we now pass a writerequest through the chain to store the original message o removed the lastwriterequest field in abstractiosession we don t need it anymore o renamed the highlevelmessage field to originalmessage in defaultwriterequest o added some setters in defaultwriterequest o added a writedirect message in iosession todo check if it s a good idea to have it in the interface o fixed the tests accordingly to those changes git svn id f bb ffa edef 
__label__rename align system runtimemetricevent rename with core change id i e b a d a c ab bd efdb reviewed on tested by michael nitschinger reviewed by simon baslé
__label__extract added test case for bidirectional
__label__rename balajin refactoring the adherence model capturing tb id as a part of the adherence log adherence class now represents a weeklyadherence and was renamed accordingly reflecting upstream changes in the tb adherence moudle fixing failing tests
__label__inline ngrinder support concurrent multiple test add green ball change default log directory from grinder log to default fix test finish determine logic to be more safe not only thread count but also process status count modify sample test creation logic run based on runcount not duration because it s better to run the test on slow machine change current testing pertftest retrival logic to get more status
__label__move pr mng make repository metadata behave more like snapshots with daily updates next step is to move the version checking to use that instead and fallback to the old files git svn id f bb ffa edef 
__label__extract removed ccd testing extracted transitiveparentcount testing and thus reduced the test to the addition and removal of classdescriptors
__label__move finished replication refactoring
__label__push-down fix gscoverageencoder fix integration some test todo run integration tests
__label__rename renamed repository readrecords to repository readversions git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc 
__label__pull-up replace area intersect by sutherlandhodgmanpolygonclipper for now this has no advantage but it allows to move the shape merger up in the chain which is needed when we want to optimize wrong angles in shapes img size increases a bit compared to r because filters are not yet working properly git svn id prec coord d f ee a dfeeeb 
__label__extract this makes the hover listener be added to the xhtml panel by default also improves the box searching code by testing if the parent of the deepest box is hoverable in the case where the deepest box is not issue number obtained from submitted by reviewed by
__label__pull-up move isnull to abstract
__label__pull-up saving work added default width height to preferences fixed shapestyle preference persistence fixed lane moving algorithms factored out some more stuff from modelhandler that is only used in movelanefeature started adding context menu to outline viewer
__label__pull-up cleaned up the profusion of methods in orientdb implementation removed exists open create and put all that functionality into the constructor trying to keep the implementation as specific to blueprints as possible so as not to allow users to depend on non interface based methods transactionstestsuite still causing a problem with concurrent modification of hashmap
__label__extract checkplugincommand refactoring
__label__move moved the wait methods to a new class and moved goback to robotiumutils
__label__extract fixups of some dry violations when parsing command line arguments created stagecommandlinearguments class for parsing string args moved logic for stage creation from abstractstage into a stagefactory other misc refactoring additional comments
__label__move refactored querystage most of the functionality moved to reusable classes
__label__move moved asyncweb codec to mina filter codec rewrote the existing client codec protocolcodecfactory getencoder getdecoder now are provided with an iosession parameter git svn id f bb ffa edef 
__label__inline introduced brandingpluginsinterpolator
__label__move faces move implementation of bridgecontext dispatch string to externalcontext
__label__push-down fix visitor the jjtaccept methods have to be in the concrete subclasses
__label__pull-up refactoring
__label__extract initial historics implementation added onstatus event bumped version to 
__label__extract jdbc add batching in insertion in jdbc client bindings
__label__push-down introduced models and a concept of variables
__label__move vishal moved display logic out of patient class
__label__push-down refactoring task command stuff
__label__extract created builder for encfsvolume
__label__push-down smaller fixes javadoc improvements
__label__extract  finish costing variances detail aid group id atid cost variances are calculated only on order close mo reevaluation on the end of the period needs to be done all new code will work only if ad client isusebetafunctions is activated refactored doc costcollector and broke createfacts in much more small methods costdimension introduces s resource id property git svn id f ce d ac b f 
__label__extract added more command line options for stic
__label__inline minor changes after value expression review
__label__inline cleanup error handling on assembly plugin git svn id plugins f bb ffa edef 
__label__move faces prepare for osgi by moving impl classes to internal sub packages in order to clearly distinguish api from implementation remove bridge api dependency on liferay faces util and streamine factory apis
__label__rename rename updateattributes to update
__label__push-down faces refactor bridgeflashfactory so that it can be wrapped like any other factorywrapper
__label__pull-up refactor to pull up locale handling
__label__move big update moving emphasis to book and updaing gui
__label__rename renamed some methods
__label__inline fixed a bug in user read and user search regarding the placement of the metadata this lead to several other transparent but notable changes the main one is that there has been a reworking of the respond abstraction in userrequest and request request now contains only one respond that adds to an already complete jsonobject the result success key value pair userrequest now contains multiple respond abstractions that all end up calling a single respond function that refreshes the user s authentication token cookie and then calls the parent s respond also a new respond abstraction has been added that allows a user to pass a jsonobject representing the metadata along with the jsonobject that represents the actual data
__label__push-down added support to keep cursors across multiple captures api cleanup mostly in the tools moved properties to anonymous project todo somehow tools are getting incorrect parent frames null this causes their properties to be destroyed
__label__pull-up tests cleanup and rearrange
__label__move deva preethi moving therapy into patient patient has currenttherapy and list of therapies treatment has therapyuid instead of therapydocid alltherapies has been removed moved therapymapper functionality to patientmapper
__label__extract changes to add clarity and fix low zoom rendering git svn id d f ee a dfeeeb 
__label__inline filewithtype getname returns name without extension keyword completion matching simplified
__label__move removed additionalcheck whose functionality has been replaced by the syntaxcheck system also moved the one additionalcheck we did have lone try into a new class
__label__move introduce call call adapters and the response type call is the mechanism for request execution it encapsulates a single request action either synchronously or asynchronously and can support canceling calladapter is a means of supporting a method return type other than call like rxjava s observable by adapting the call instance into another instance this change moves rxjava support into a sibling module which uses an adapter for supporting observable types response represents the response along side the deserialized body it allows access to both the converted body and lower level items such as the header response code and underlying ok request and response objects
__label__rename renamed methods of termadapter interface toterm fromterm tostruct
__label__extract pr plx check for all kinds of line endings so the manifest entries will not get corrupted rewrote the writevalue method to use a stringtokenizer which improves readability and robustness added testcase for mixed line endings
__label__move moved duration to root and moved callto to awaitility
__label__push-down removing redundant functions in extgraph duplicated by sesame s graphutil movign implementations of util methods to graphs extgraph now an interface extgraphimpl the implementation calls are jsut delegated to graphs adding two new graph extensions which extgraph implements iograph for rio util methods and functionalgraph for supporting guava functional classes renaming statementfunctions to statements adding additional functional utility methods on there adding testgraphs for testing the main graphs funcionality generally cleaning up extgraph extgraphimpl
__label__push-down fix manage show view and hide view with annotation useful when do pefix has been changed
__label__rename renamed a test in archiveindexeslistertest to make more sense
__label__move ashish ashok refactoring campaignmessagealert moving it from service to obd
__label__inline rpcdispatcher merged request and responses marshaller into one 
__label__inline clean up
__label__pull-up pulled up more properties to the base type
__label__pull-up refactor scope updater to share common put methods with other executors
__label__push-down new activation manager and book inheritance tidy up
__label__rename switch to positive formulations i e nonneutral relevant also renamed sumcategoryvaluates to sumcategoryvaluations
__label__push-down introduced seleniumtestfilesfinder interface added ability to set default seleniumtestfilesfinder via erselenium s static method
__label__push-down create jack test submodule replace usages of databaseconnection
__label__rename shruthi vishal created recordadherenceoperation and renamed transitions
__label__push-down refactored out the g dglcanvas so it has a simple implementation of just rendering as a canvas not an entire jcomponent hierarchy
__label__push-down reworked report builders so that they can display descriptions and tags are defined on the reports themselves rather than the base classes
__label__inline fcrepo tidy up fesl policy validation validation now occurs as part of the standard object datastream validation all fesl specific policy validation removed methods with invalid policies will result in the method failing with no changes made to the policy index
__label__rename rename bugfix setting
__label__move faces develop alloy pickdate component document types of maximumdate minimumdate attributes move tojavascriptdate logic from pickdateutil to new encodedate method in pickdaterenderer faces develop alloy inputdate component document types of maximumdate minimumdate attributes move getdateatmidnight from pickdateutil to inputdate conflicts alloy src main java com liferay faces alloy component pickdate pickdateutil java
__label__extract cve integrate fallback sort into the rest add some more tests and fix bug in bucket boundary calculation git svn id f bb ffa edef 
__label__inline hv avoiding non final field and synchronized map in validatorfactoryimpl xmlmetadataprovider doesn t need to be nulled out refactoring its structure to make more apparent what state it holds replaced synchronized map by chm making sure only one beanmetadatamanager is built per parameter name provider
__label__push-down removed if from some internal interface names
__label__inline lots of refactoring support for having multiple connections
__label__push-down more cleanup better thread naming more javadocs
__label__push-down made abstracttraversal a bit more testable and self contained resultobjectcache is now an interface changed the logic around abstractraversal so that it would contain more of the logic that it exposes rather than forcing implementers to know the guts of its flow added more unit tests
__label__rename rewrote the contextselector html chapter the chapter was renamed as loggingseparation html logback now uses slf j version contextjndiselector was refactored the config file name for a new logger context is based on convention logback contextname xml this obviates the need to set the logback configuration resource jndi env entry
__label__move hv moving mapping between property and method meta model from beanmetadataimpl to beanmetadatamanager
__label__move getnavigationdetails and getpagingnavigation moved to own calendarnavigationservice
__label__rename fix for her build launch buttons remain enabled after problem building crawljob java renamed iscontainerok to hasapplicationcontext increased granularity of islaunchable to offer launch button jobresource java more coarse check for hasapplicationcontext to disable build button
__label__pull-up refactor cpd filefinder to pmd util filefinder old class is now deprecated and unused within pmd itself git svn id baf d a c fc e d
__label__push-down adding a mina based listener also contains a lot of other changes needed for this implementation mina listener is still not the default due to it not yet supporting ssl tls fully git svn id f bb ffa edef 
__label__extract enunciate add option to override subcontext git svn id c b a b b d e 
__label__inline toby allowing null values in all iterators under the iterators package and fixing remove behaviour in predicatediterator filterediterator and mappediterator
__label__push-down improve biomegenerator and biomecache handling the biomecache class has it s implementation moved to common our cache is more efficient for our needs than mojang s cache as it can better handle virtual biomes our cache has very similar api to mojang s cache for now previously there was a biome generator called vanillabiomegenerator that had to be special cased now it s up to the implementation of tc common either tc bukkit or tc forge to register a vanilla biome generator that properly implements biomegenerator there is one area left where the vanillabiomegenerator should still be special cased bukkit forge vanillabiomegenerator gets its information from mojang s worldchunkmanager the biome gen base arrays are converted to int arrays if you would use tcworldchunkmanager extends worldchunkmanager to get information from the biomegenerator you would get infinite recursion to make the code more maintainable a check has been added to the forge bukkit vanillabiomegenerator classes as well as documentation to the class
__label__move added support for server side sorting and much improved paging moved query stuff into separate class couchqueryresolver
__label__push-down refactor redis cluster connection handler and add jedisaskdataexception handling
__label__extract add parsing text to compliment appending text
__label__extract simplify jnlpprotocolhandlertest some of this is similar to the simplifications for networklayertest in e c af this test has also been hitting sporadic hangs failures primarily on certain oses etc these mostly occur in preclose also similar to that test part of the solution here is to eliminate the repetition of the exact same test as part of understanding and cleaning up this test i also made a major effort to remove other duplication and to improve naming and clarity the individual test methods were lengthy with lots of duplicated code making it hard to understand what they were doing indeed some of the tests didn t actually match their name intention i extracted out the commonality and tried to make it clearer the variation in each test this test had continued testing all old versions of the jnlp protocol there had been todos marked to remove them from this test they ve been deprecated for a long time their implementations aren t quite behaving properly particularly when it comes to closing them down which causes contamination with testing the currently supported protocols with oracle deprecating jnlp entirely it s time to remove these protocols from this test
__label__extract refactored listbucketsendpoint to use the new class listsbucketsfiltered the endpoint now has much less logic since it uses the logic that wasextracted from bucketthawer
__label__inline introduce call call adapters and the response type call is the mechanism for request execution it encapsulates a single request action either synchronously or asynchronously and can support canceling calladapter is a means of supporting a method return type other than call like rxjava s observable by adapting the call instance into another instance this change moves rxjava support into a sibling module which uses an adapter for supporting observable types response represents the response along side the deserialized body it allows access to both the converted body and lower level items such as the header response code and underlying ok request and response objects
__label__move more refactoring of ermemoryentitystore it s now about as simple they come all the heavy lifting is handled in erentitystore which should be moved elsewhere eventually so it can be leveraged by other non relational adaptors populate derived attribute keys with nulls to prevent an npe inside eodatabasecontext not ideal because it will break code that expects to be able to use them in a qualifier but better than a completely obscure failure inside eof
__label__inline end to end tests replaces functional test functional tests were the tests that required both hadoop and splunk to run they have been replaced by end to end tests as functional tests should not need any of splunk nor hadoop integration test group is removed
__label__inline updated to latest feed api removal of event types
__label__extract extracted file handling methods from listener to new filechooser class modularized readers added support for plugging in fileview modules next revision will modularize the writers so translators might wish to wait until then to update strings git svn id f f bc e be cd 
__label__inline added lazy allocation per suggestion by patrick dowler for attributes and content lists in element java also cleaned up some formatting mistakes tabs uggh lots of methods that still took a name and uri instead of name and namespace object
__label__inline moved connection pool construction logic out of into a separate builder class git svn id f bb ffa edef 
__label__pull-up move c ast from cpd into lang cpp ast add lang ast abstracttokenmanager with common tokenmanager capabilities ie generalized stuff from java and c that used to be in the jjt files move tokenmgrerror into lang ast enhanced to have filename capability from c for general use git svn id baf d a c fc e d
__label__inline code cleanups and comments added git svn id luebeck de fallstudie sources a f c e cba ef e 
__label__inline cssname fs id is now public and final allowing direct access to the id bypassing getassignedid micro optimization getassignedid and setassignedid have been removed identvalue string property is also final as should have been
__label__push-down bug fixes split an interface off the swiftsearchercaller so the class can be final and yet we can do mocking
__label__extract added set option to nbt utility
__label__push-down tfj make pagableresponselist mocking test friendly introduced pagableresponseimpl and pagableresponselistimpl which are not final class
__label__rename renamed all parts from membase to couchbase
__label__inline misc logging cleanup refactoring crawlerjournal javaimprove exception loggingcombine writeline methods to use varargs frontierjournal javaimprove exception logging archiveutils javareplace ignored count parameter with meaingful boolean one crawluri javause updated archiveutils method
__label__inline drop the configroot interface this was intended to make resolve typesafe only allowed on root objects however in practice it was not safe because it was too easy to create aroot by merging a non root object into a root object to fix it we dhave to prohibit that root objects can only merge with other roots but it seems simpler to just document that resolving on subtreeswill do the wrong thing and hopefully it won t be an issue in practice
__label__extract bit of refactoring add depend multiverse core
__label__extract for issues adding multiple attachments and removing them works partially resolving issue and issue pressing add button does not retain the previously selected files in the listview not working for documents
__label__inline sc qcadoomes refactored material flow
__label__rename parsetree rename length to numleaves it s clearer that way also added numnodes method to count all the internal nodes of a parse tree
__label__move faces move backported portal classes to new package com liferay faces util portal
__label__move refactored composite into abstractcomposite composite and dynamiccomposite to disambiguate usage
__label__push-down surefire fixed sonar and findbug issues
__label__rename renamed sample to reservoir should have followed joewilliams s lead on this a while ago with folsom
__label__extract extracted all wsdl soap functionality into an external library generic soap client needs it now for compilation
__label__pull-up refactor service activator
__label__rename renamed a poorly named method in requestjournal
__label__pull-up refactoring soapui mock features usage and creation of request dispatcher
__label__pull-up refactored jms appender
__label__move move calculatevisualoffsets method to stringutils also move test code this doesn t really belong together with the block code
__label__extract pr minstall added test case added tests removed installartifactstub java git svn id f bb ffa edef 
__label__pull-up refactor extract write and send method
__label__inline moved the bucketformat logic into the bucketformat enum a bucket now guarantees that it s format never changes it could change before when a move was performed on the bucket
__label__push-down refactored namenode classes
__label__move o refactoring move the downloading of tickets from trac to its own class git svn id f bb ffa edef 
__label__move move getbufferedreader ioutils crawlerjournal java ioutils java move getbufferedreader to ioutils frontierjournal java add new included tag for log lines fi others update for relocated method
__label__extract refactor long method createarchitecture
__label__move simplification generalization of code and addition of activemq product also moved product configuration files to products directory
__label__push-down updated encryption to generate cek and cik through key derivation also fixed signers to use afterpropertiesset
__label__pull-up faces develop alloy selectoneradio extend generated base class for consistency
__label__move refactor error handling so that exceptions can be reported to my site without circular class references git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e
__label__move faces move the creation of actionurls renderurls and resourceurls from portletcontainer to mimeresponse
__label__rename renamed methods in eventservice to findxxx
__label__push-down now we can introduce the unresolved stop event
__label__rename rename field to fact relnotes n a created by moe moe migrated revid 
__label__extract added checkstyle extension and rules started to cleanup format document code based on rules
__label__rename renamed generator updated the tool logger and the processor model
__label__pull-up o refactoring extract abstract super class git svn id f bb ffa edef 
__label__extract improve population extraction connection extraction draft refactor clean up
__label__pull-up implement a conversationdate property also remove duplicated code from the implementations of conversationmodel
__label__push-down post cleanups all multipart entity generation logic moved to multipartentitybuilder git svn id f bb ffa edef 
__label__extract simple refactoring so that the code for creating a column isn t duplicated unnecessarily git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e
__label__inline clean up the path refactoring now that i know what methods need to be available to be overridden
__label__rename rename update merge pojo into update with pojo
__label__move added timeservice and test added timeservice and gettimeservice to tp updated tcp to use timeservice for tcpconnectionmap tcpconnection sends and receives unicast uses timeservice fd all uses timeservice if configured use time service default true moved sending of discovery request out of synchronized scope implementing closeable tp transferqueuebundler stop now clears the queue and makes sure a subsequent start doesn t use the current bundler thread which was interrupted and will terminate discovery now uses oob dont bundle internal to send discovery requests and responses this ensures that requests and responses don t get stuck in the middle of a messagebatch
__label__rename refactor rename securesession methods
__label__extract added support for setting the content id and payload id for the ebxml attachments via jms
__label__rename preparatory changes to qti samples renamed qtisampleresource qtisampleassessment now includes information about additional resources e g files updates all samples to include above information this gets these classes ready for importing into the qtiworks domain model
__label__rename rename writeparamsentryforsinglepreparedentry to writeparamsforsinglepreparedentry
__label__move renamed transporttype to ioservicemetadata added ioservicemetadata hasfragmentation added defaultioservicemetadata removed static fields in ioservicemetadata which caused bad coupling removed iosession gettransporttype because ioservicemetadata can be retrieved via iosession getservice getmetadata removed transport socket nio support package and moved the classes there to transport socket nio datagram transport doesn t use wrapper anymore fixed freezing socketbindtest git svn id f bb ffa edef 
__label__move resolved issue dirmina abstractiofilterchain dowrite slows as outstanding writes increase dirmina iosession getscheduledwritebytes slows with size of queue dirmina deadlock in vmpipe mode how i resolved applied the same fix to datagram transport backported all fixes to moved some common methods to baseiosession abstractiosession git svn id f bb ffa edef 
__label__pull-up refactored tcpip including nio support code for jgrp tcp nio no longer extends class tcp and connectiontablenio no longer extends connectiontable they instead share a common abstract class with shared methods
__label__push-down refactored pipelinebase so it is usable to implement sharedjedispipeline as well
__label__pull-up fix equality between configobject of different typesby pulling equals hashcode up into abstractconfigobject
__label__rename refactor rename get updated row count method 
__label__move fixed remaining references to report builders vs managers and moved excel template loading into reportbuilder base class
__label__move jcbc factory methods for all query motivation for consistency with the rest of the api and centralization of query creation use factory methods on query rather than public constructors modifications all xxxquery constructors made packaged protected instanciation moved to query now an abstract class change id i a a a c a e c d a a reviewed on reviewed by michael nitschinger tested by simon baslé
__label__extract oozie support dropping hcat dataset in coord rerun with cleanup option ryota
__label__rename bval rename getvalidatedproperties to getpropertieswithconstraints git svn id b cb b d ca fae ebed b 
__label__push-down change launch api to use generics
__label__extract cleanup locking key paths now work as expected
__label__inline big heap change git svn id svn ssh svn internal sanger ac uk repos svn pathsoft psu trunk genlib java crawl ee ac c ac e b aa f 
__label__rename renamed test
__label__rename remove deprecated methods and rename findfirst with el
__label__move  move methodretrievalprocessor allenclosingelementsincludesuper to executables getallenclosingexecutableelements and replace any elements getallmembers calls with it to create a fixed order of property mappings
__label__inline simplifying typemanager getvaluetype string string to just typemanager getvaluetype string where the value type params are included in the string list no need anymore for typemanager getvaluetype string datainput git svn id svn ssh dev outerthought org outerthought lilyproject branches complextypes b d f e bd e a dc 
__label__pull-up refactored and optimized batch vertex caches implsthis commit pulls common batch loading vertex cache code intoabstractidvertexcache and makes string and objectidvertexcache extendthat abstract base class longidvertexcache uses colt primitivecollections internally and is not amenable to sharing code with theother java collections based implementations this commit also applies the optimization froma cf f d c eaf f d ac e to object andlongidvertexcache however i ve only tested it forstringidvertexcache
__label__push-down move newnumber to confignumber rather than abstractconfigvalue
__label__pull-up cleaned up and refactored all action subclasses
__label__rename lib rename idwithissuer frompatientidwithissuer attrs to pidof attrs
__label__rename refactor rename method firereceivemessage to onreceivingmessage
__label__move added preferences and move support added initial preferences system currently stores move destination and season prefix string is backed by xml file persisted using xstream file is settings xml located in the launch dir of tv renamer ui is needed to configure preferences added move support files are moved to directory set in preferences automatically ui is also needed for this to show progress of move when crossing boundaries as well as showing source and destination directories bumped version to b 
__label__move refactoring create package logic
__label__move a lot of refactoring safety checks remove linkedtransferqueue move code around unit test coverage
__label__move renew slots when moved occured during request to cluster it s suggested by antirez redis rb cluster implementation does it too since redis beta introduces cluster slots it becomes easier fixme it s fully synchronized so it hurts performance somewhat poor implementation we can try reader writer strategy to make lock waiting make shorter
__label__extract mwar request enhancement to pattern matching for packagingincludes packagingexcludes functionality regular expressions submitted by nicolas marcotte reviewed by dennis lundberg o minor adjustments to code style o added a page to the site with examples git svn id f bb ffa edef 
__label__inline redid tile system and more work on room s tile pane tile replaced ints with points and dimension handles own id rather than roomframe added autoupdate field for efficiently modifying several fields before firing an update point renamed to pathpoint to easily distinguish between the two updated path and pathframe to reflect changes instance replaced x y with point listener fixed bug where clicking load and cancelling opened a file anyways roomeditor updated to reflect changes to instance and tile now supports tileselector and tile add tab roomcomponent now uses rectangle instead of ints gmfilereader and gmfilewriter updated re instance and tile room temporarily removed addtile method since tile now handles its own id updated to reflect changes to instance and tile roomframe renamed some fields updated to reflect changes to instance and tile tile add tab now more usable some tweaks to tile edit tab git svn id f f bc e be cd 
__label__push-down report refactoring git svn id baf d a c fc e d
__label__inline  refactoring bugfixes
__label__push-down finished initial refactoring in database package
__label__pull-up this update adds a message queue listener to servicemonitor to detect when a running service is undeployed on undeploy the previously started servicepoller is now stopped additionally this update refactors the duplicate code across the serviceadvice tests git svn id ed cd a f c be b fe bcb
__label__pull-up refactored for better reuse moved some stuff around for better reuse
__label__pull-up morphology implementation for text display removing apache commons
__label__extract extracted larger end to end test to a functional test
__label__rename rename save concern opts and ignore concern tests
__label__extract cleanup of html reports mostly cosmetics consistency and so on minor javadoc updates code cleanups
__label__extract refactor extract write and send method
__label__rename hppc rename remove all first last occurrence s to remove all first last key
__label__push-down starting to reorganize the dynamicentity family line to ensure consistent clear behavior also lots of varaible and class renmaing for consitency
__label__push-down added uuid support changed how permissions are registered and cleaned up part of the permissions system
__label__extract support for retention time calibration call of mprcextractraw
__label__move working on mng o moved release properties management to a helper class o created a helper class for caching prompting for project versions o created a helper class for managing scm info updates during the release prepare process o moved as many of the shared fields out of abstractreleasemojo as possible given the refactor to reactorized processing o refactored the preparereleasemojo to process a list of projects and resolve inter dependencies during transforms etc o refactored the performreleasemojo to adjust to the new helper classes o removed the old transformers since mavenproject writeoriginalmodel can be used instead using the modello writer o bumped the maven scm versions up to alpha snapshot and added maven scm manager plexus git svn id f bb ffa edef 
__label__inline next round of implementations also added a number of comments
__label__rename renamed samepropertyvaluesas
__label__rename rename identifiers in test
__label__move extracted the tests conserning moving buckets to movesbucketstest 
__label__inline consistent file output and redundany removed
__label__pull-up slowly beefing up method symbol tablegit svn id baf d a c fc e d
__label__pull-up nxp cleanup pull up isconnectserverreachable and remove useless override
__label__push-down much more api and node type cleanup
__label__move extract helper methods to separate classes refactored towards composed method
__label__pull-up push getvisualmotionstate into abstractvisualmodethis used to be an abstract method so that the different visual modescould pass in the right selection factory but this is now all handledthrough the fixselection method moving the implementation to the superclass means all visual modes usethe same motions
__label__rename o added the logic to protect the writequeue against concurrent modifications while writing the messages o added some code to handle the future ssl processing not yet implemented o renamed the session getwritequeue to session acquirewritequeue o added a session releasewritequeue method git svn id f bb ffa edef 
__label__rename renamed distinctall distinct
__label__extract webui fixes jfg pixel size of all control elements css files for sessionpager sessiondatagrid back end time column is sessiondatagrid remove not used methods of services cause new conseption of control add depricated to services and dtos that not used now not seletes yet sort metrics in table as in tree if select all or link processing
__label__move application entirely reworked the sequence image operation band new sequence resize feature new c z t operations new color conversion feature general improvements better plugin error report better colormap preservation when switching from d to d canvas better icy to imagej roi conversion minors improvements here and there modified roi dpoint so it now intersects point and do not contains it more consistent with other roi fixed a minor bug in roi getbooleanmask method fixed a minor bug in roi d contains and roi d intersects methods others bugs fixes developer loader added methods to hide the progress bar added getmetadata file file method to retrieve the metadata of an image file added loadimage file file int z int t method to load a single image from multi image file added icybufferedimage copydata src int srcchannel int dstchannel to only copy data for a specified channel added exceltable component to display excel type table added abstract method getviewcomponent to icycanvas so we can always retrieve the display component in a canvas improvements on sequencepreviewpanel and sequencerangepreviewpanel components added icybufferedimageutil class general icybufferedimage tools added methods to sequenceutil class fixed cursor preservation on canvas d added maininterface getsequences string name to retrieve sequence by name fixed a bug in imagedataiterator added a command line option to remove splash screen lot of refactoring and source reorganisation check deprecations
__label__inline remove unnecessary method
__label__inline refactored by separating sqlite domain from jdbc
__label__extract improvements to manager actions added explicit reimport update for sample categories added resetuser to datadeletionservice
__label__rename sensible renames
__label__inline change the behavior of create and update for users and groups to avoid creating updating an entity when another one already exists with the same identifier
__label__move o did some refactoring moving utility methods to eclipseutils so there s no confusion as to which project is used o use executedproject everywhere except for acquiring the artifact list the executedproject misses that list that s because no deps are resolved in the forked lifecycle execution it s delayed until the plugin is encountered and it s requiresdependencyresolution is seen o added flag declipse downloadsources true false to skip source downloading git svn id f bb ffa edef 
__label__move katta moved all call details including inbox to kilkaricalldetailsservice
__label__pull-up moved functionality from stringfilter to abstract textfilter
__label__rename renamed methods with indio specific names getconfigurationserviceindio getdefectsindio getstreamindio matchesindio
__label__extract refactor menu creation
__label__extract add support for unquoted string values
__label__inline remove unnecessary code
__label__move the way ierxrestdelegates are implemented is totally crazy get rid of that and move to a model where the delegate is always looked up introduce an erxrestcontext that can go all the way down to the json formatters so you can configure date formats per request write some test cases it s used by several apps now and really should have coverage fix a bunch of weird edge cases that have come up
__label__rename vishal vishnu renamed patient method
__label__inline simplify code
__label__push-down a lot of changes
__label__rename updated to support mambu api changes mbu create group apis a also included code for mbu edit groups api note mbu will be now supported by mambu in only added todos to test when ready clientservice mbu get group roles and get details for group role apis clientservice mbu get client types api for clients and for groups api clientservice mbu mbu client profile picture and signature apis to store retrieve and delete clientservice documentservice servicehelper notes moved makeparamsfordocumentjson to servicehelper demoutil moved the encodefileintobase string to demoutil from demotestdocuments mbu mbu get repayments schedule preview for a loan product api loanservice servicehelper mbu patch loan account terms api loanservice servicehelper mbu update loan account repayments api repaymentsservice mbu undo loan account disbursement api loanservice mbu custom fields refactoring to support client types updated demo programs demotestorganizationservice mbu updated comments only allow username key to id to be used in place of username for getting tasks mbu updated comments only allow user key and id for updating custom fields for the user enhanced demoutil to provide more helper methods for testing and runs automation created helpers to run api tests for specific accounts and products created helpers to create new accounts to be consistent with the tested product type created helpers to create custom fields for new accounts to be valid for tested product and client role rearranged some test cases to allow for higher probability of the successful end to end runs updated demo programs to test new apis used new generic helper methods and re arranged test calls to allow for better test automation and less test data dependency miscellaneous updated pom file to use model jar and to build mambu java bin jar added missing wrapper for delete document api available since see mbu documentsservice updated apidefinition and serviceexecutor to support new apis added new definitions get owned entity patch owned entities patch json removed unused class util apiexceptiondata java this class was never used and is not needed mambus returncode enum class can be used instead removed an unused constructor in mambuapiresponsemessage referencing this class deprecated account type enum in apidata class mambus existent account type class from the model should be used instead updated savings service to use mambus account type deprecated original methods using account type apidata savingsservice taskserice correction renamed gettasks to gettask requestexecutorimpl java updated logging json data to better handle encoded content for profile picture signature api updated raedme file
__label__inline removed shared transport removed deprecated classes methods and fields ant jar works now updated manual on buffer reuse when sending junitxmlreporter now prints method name correctly
__label__extract extracted method
__label__rename assertfact renamed assertclause
__label__rename big rename finally happens
__label__push-down minor change abstracttransaction no longer provides a txintrospector
__label__pull-up added function executions element to gfe data namespace plus more cleanup
__label__push-down improved osgi tests and simplified code 
__label__rename renamed method to getpluginproperty can return null
__label__push-down refactored abstractexpression to support index this now has a new sublcass for the majority of functional expressions with some helpers for evaluating child values
__label__pull-up pull up some functionality from forceelevationcalculator into abstract superclass
__label__rename hearbeat methods renamed
__label__inline added clipboard class for easy copy paste operations in icy searchbar detached search engine from the gui better performances can now display complete list of result bug fixes added roiactions class which centralize all actions for roi from the roi control panel can now do load save copy paste operations on roi added new methods to the swimmingpool class so we can now manipulate objects depending their names improved plugin detection on when a plugin exception occurs minor change on users panel arrangement in chat minor fix in pluginlauncher start method minors fixes
__label__move fixed subimagepreview cleaned up some ref code roomeditor i realise this is wip but i noticed a couple of changes that could be made added a null background check moved graphics settings outside two loops subimagepreview fixed the origin preview so that it draws a straight line fixed the bounding box preview to draw the rectangle correctly a union of rectangles cannot be used in this case icoreader removed a fixme comment meaningless to us and just clutters the task list more event removed the hashcode method ref added a static convenience method deref which makes dealing with nulls a bit cleaner though the static import does take away from the convenience a bit updated all occurences of getres that were checking twice against null to use deref instead git svn id f f bc e be cd 
__label__extract extracted wotask handling to an extra class which can be used separately
__label__extract sc qcadoo early detection for hooks inconsistency extracted view hooks class hierarchy to improve type safety remove unnecessary componentcustomevent class
__label__move we added the most general test cases for lck j detection this includes functionality to handle projects that contain multiple files also we refactored all our tests making them smaller and easier to maintain
__label__pull-up removed i instance paramatized type from displayable components
__label__extract patch to add support for callable statements to the jdbc driver the patch was submitted by paul bethe pmbethe yahoo com
__label__move refactoring move xml code to epubprocessor move epub cleaner code to epubcleaner
__label__pull-up new files or files moved from other locations
__label__rename address remaining comments from earlier change rename a test case for consistency add a test for a nullable non transparent provider use boundfieldinfo allowsnull and consolidate getting a field value in getfieldvalue regardless of whether the field type is a simple field or a transparent provider created by moe moe migrated revid 
__label__push-down rework modified classes for pipeline adjusted existing classes with changes from modified plugin version classes which are too different from existing ones were placed into pipeline package existing classes might be adjusted to be compatible with pipeline but not yet clear how to achieve that
__label__rename tfj renamed twitterlistener lookedupfriendships to lookedupfriendships
__label__extract added methods
__label__pull-up refactored and optimized batch vertex caches impls this commit pulls common batch loading vertex cache code into abstractidvertexcache and makes string and objectidvertexcache extend that abstract base class longidvertexcache uses colt primitive collections internally and is not amenable to sharing code with the other java collections based implementations this commit also applies the optimization from a cf f d c eaf f d ac e to object and longidvertexcache however i ve only tested it for stringidvertexcache
__label__inline  refactored encryption handling added documentation switched from an option encrypt to a dedicated agent commad encrypt switched markers from to for consistency with jmx perl encryption markers simplified cypher which is sufficient for our needs especially the salt generation
__label__inline use uistarter constructor instead of init we were just using a default not explicitly defined constructor for uistarter but then immediately after it was created launcher would call run which would call init instead make what was previously init be a constructor by doing this we can make the three instance variables in uistarter be final because they are now initialized in the constructor then the run method has nothing left to do except call launch so inline launch into run or alternatively rename launch to run and get rid of run
__label__extract adding a debug setting to stage configs now you can store a stage configuration in a debug mode this means that it won t be picked up and started by hydra core but can still be read by remotepipeline getproperties this allows you to start the stage in your ide with the settings configured in the repository
__label__move support for menu bar when no documents are visible nodebox menu was moved to separate file and instantiated from hidden jframe and from nodeboxdocument
__label__move clustering fixes and refactorization git svn id b f a e b ddf 
__label__push-down faces refactor icefaces chat portlet to make it look more like the liferay chat portlet
__label__rename jvstm lf rename remotecommit to commitrequest a commitrequest is sent by every write transaction that needs to commit it contains the read set and write set of the transaction to commit after this every node can locally continue its commits starting from this queue
__label__pull-up initial commit of inline content refactoring
__label__inline added importer and exporter interfaces and classes importer base importer class fileimporter base interface for resource import from file sequenceimporter base interface for sequence import sequencefileimporter base interface for sequence import from file sequenceexporter base interface for sequence export not yet fully supported sequencefileexporter base interface for sequence export to file not yet fully supported pluginimporter plugin abstract class for the import interface pluginfileimporter plugin abstract class for the file import interface pluginsequenceimporter plugin abstract class for the sequence import interface pluginsequencefileimporter plugin abstract class for the sequence import interface pluginsequencefileexporter plugin abstract class for the sequence export not yet supported interface added imageprovider interface and abstractimageprovider class describes a flexible image access which is used as base for the sequenceimport interface added lociimporter and lociimporterplugin classes bioformat library implementation for the new importer interface loader major rewrite to use the new importer interface change the serieselectiondialog to use the new importer interface saver minor changes not yet adapted to the new exporter interface imagesaverdialog only accept to select file as destination so file name is not lost when changing directory roi added a basic implementation of contains roi and intersects roi severals bug fixes with boolean operations roiutil added getmasscenter method icybufferedimageutil and sequenceutil added rotate method sequence fixed metadata load save for multi serie images to define serie attached to this sequence used for persistent data file taskframemanager complete rewrote as the old code was lazely done hopefully this fixed some issues actiondialog added iscanceled method to know if the operation has been canceled added editrepositorydialog to replace the old one which contained bugs fileaction fixed new image create and added save metadata action roiaction roi subtraction now produces the possible results xls export now always export all rois some minors issues fixed roipanel fixed some issues in refreshing data or actions rectangle d d d severals fixes with infinite dimension fileutil added tofiles and topaths file string conversion methods several improvements in the exception error catcher and report plugin causing the exception anchor d added anchor dpositionlistener to replace the old deprecated anchor dlistener added support for local plugin repositories others fixes cleanup and refactoring
__label__push-down moved currentsolution out of the abstractsolver and wrote javadoc for the abstractlocalsearchsolver complete now
__label__inline inline account initialization
__label__extract implemented alternatingbundler and removequeuebundler added drainto methods to ringbuffer attributes in jmxadditionalobjects can now be set too
__label__pull-up big refactor commit all classes which were no longer necessary are either removed no longer usable or marked deprecated usable but legacy modified classes now use the new headerresponse implementation and the jquery backing library which wicket uses the library now compiles but not guarenteed to work
__label__extract extractorjs javarefactor so considerstrings is not static allowing it to be overridden in subclasses extractorhtml java extractorjs javaadd autowired parameter extractorjs used to process inline javascript instead of call to static extractorjs considerstrings
__label__inline initial commit reduced the iparticle interface to the bare minimum refactored old particle class to yangmillsparticle and replaced old fields with algebraelements removed old code from the force classes this needs to be updated with algebrafields as well
__label__rename cor rename test testpreventremoveuser
__label__extract ngrinder add runtime only controller annotation and change scuprtconsole as runtimeonly controller
__label__push-down extend functionality of resourcemanager to be able to handle ipv and ipv multicast addresses
__label__extract add parameter migrated to the create subscription call
__label__push-down removed ugly selector factory preparing for udp server git svn id f bb ffa edef 
__label__rename hv rename pathimpl getpathwithoutleafnode to createcopywithoutleafnode and make it static to be more consistent with createcopy
__label__rename renamed mapwithkey haskey mapwithvalue hasvalue mapcontaining hasentry
__label__inline refactor reloading to be implementation abstractthis also should fix reloading on spigot and reduce the amount ofimplementation specific code
__label__push-down epe refactor esp helpers out of eclipse plugin signed off by gordon smith
__label__push-down refactored recvar renaming from name disamb to protocoldef inlining recvar renaming now internal only
__label__move hv moving runwithcustomvalidationxml to separate helper class
__label__pull-up refactoring timestamps added general refactoring
__label__push-down remove last pieces of old now non working clip region checking push down handful of fields from box to blockbox
__label__rename rename nothrow acceptunknownoption
__label__pull-up refactored to pull error log into its own class
__label__pull-up branch javabot cleaned up the api related admin commands introduced commons cli and began reworking around the new approach
__label__push-down refactored mappingbuilder back to one impl class with a hierarchy of interfaces to distinguish local remote scenario
__label__extract clean up code extract method
__label__inline change json format for importer and rest interface for list multivalue and path hierarchy value types defining the value type of a field type no longer has the booleans multivalue and hierarchical instead the type field also allows list and path which should be appended with another valuetype between brackets for example list git svn id svn ssh dev outerthought org outerthought lilyproject branches complextypes b d f e bd e a dc 
__label__move adds backnavigation listener and event refactoring of package structure
__label__push-down fixes for jgrp changed pingdata one physical addr instead of a list of phys addrs changed gossipdata one physical addr instead of a list of phys addrs fixed compile error with jdk in messagedispatcher added responses and test replaced merge with merge in all sample config files removed num initial members deprecated and ignored from xml config files merge merge now use their own protocol to implement view fetching and doesn t depend on discovery anymore this allows us to remove the view fetching code from the discovery protocols replaced is server and is coord with byte flag in pingdata removed division zero exception in uperf added keyset to lazyremovalcache destroying window on close first shot at cloudbaseddiscovery txt using gms join timeout rather than discovery timeout for discovery set tcp use async discovery to true in tcp xml protocol setvalue logs a warning if the field to be set is deprecated pingdata carries an optional list of members for which discovery is requested tests for modified pingdata changed discovery findmembers to accept a members list and populate a responses object clientgmsimpl join uses find initial mbrs event and then waits for gms join timeout ms on the returned responses object merge uses find mbrs event and then waits for discovery timeout ms on the returned responses object merge uses find mbrs event and then waits for discovery timeout ms on the returned responses object tcpgossip routerstub changed signature of findmembers passing async parameter to findmembers in case async discovery should be overwritten e g in up find mbrs tp using responses returned by find mbrs evt sent up looping back if target is a physical address and local address target shared loopback ping findmembers changed to the new method file ping added a shutdown hook to remove own info in case of a crash file ping selectively reading info for listed members in findmembers jdbc ping findmembers add result to responses as soon as it has been read rackspace ping findmembers add result to responses as soon as it has been read swift ping findmembers add result to responses as soon as it has been read s ping findmembers add result to responses as soon as it has been read s ping read members selectively if listed set tunnel supportsmulticasting to true removed timeout from discovery protocols configs changed gms join timeout to in udp xml and tcp xml tp when ip multicast is not available sending a message to n members by looking up the ip address for each member we used to send this to all physical addresses in the cache which was a waste sending a multicast n only sends to members of current cluster needed to take shared transports into account asciistring prevent npe in ctor when string is null shared loopback ping return an empty responses object if it is the first member in a cluster this allows the member to become coordinator immediately rather than having to wait for gms join timeout ms set gms max join attempts to unicast only sends a close to dest if dest is still a member tp removed warning for incorrect destination as this might happen a few times correct added responses contains address addr fixed discovery serializewithoutview didn t add is coord flag changed version to beta 
__label__move  split lifecycle mapping analysis from project import the lifecycle mapping analysis is now only run after projects are imported making selection of projects to import much much faster
__label__inline mrelease abstracted rewriting code and implemented development pom rewriting git svn id f bb ffa edef 
__label__push-down refactored the old node class into a node interface and an abstractnode class so that more categories of node types can be created this has also been done for typemember also added class interface declarations
__label__push-down tumbling towards three pass compilation made scope structure immutable extracted scope interface and separated implementation into label and value scopes git p depot paths coremedia jangaroo change 
__label__push-down make taskhandleractioncontext an interface and use inlineexecutionstrategyexecutor and testcontextcreator to isolate code from action contexts b 
__label__extract sharvani aravind added functionality to check status of obd schedulers
__label__move refactored some backend specific methods in the consistency predicate module as abstract methods in consistencypredicatesupport moved the implementation of the methods to the jvstm ojb implementation of consistencypredicatesupport
__label__push-down aesh cleaned up consolecommand now its an interface with two methods should be easier to use
__label__inline concurrency bug in getnexttask solved wip doesn t compile java timer to handle edge case changes in spsc and mpsc queue
__label__push-down name
__label__move refactored routesolver classes
__label__inline classpath added back since log level solved in log config filejdbcfetch now handles wrong caps table namesjdbcrecordhandler merged checktableexists and checkmetatableexists into checktableexists string tablename jdbcfetchtest added test to catch missing columns bugnlmjournalfetch pubmedfetchtest pubmed moved to nih sub test package
__label__pull-up various refactorings to remove duplication
__label__inline clean build with processing tests
__label__move katta ashish refactored subscriptionservice to have separate methods of separate actions
__label__move started purge cmd moved queued cmds to cmdmgr
__label__inline refactored handling of indexed field retrieval as suggested in pr git svn id f bb ffa edef 
__label__move first step in updating the instrument comparison refactored the action activation it was originally activated when tuning was enabled moved most of the validation for the pair of instrument data models into the activation logic
__label__rename rhbz refactor rename move classes methods and add javadoc
__label__inline refactoring structure comparison implemented through options options class created
__label__move o moved common code to common module git svn id f bb ffa edef 
__label__rename close chunk region files if they have not been read written to in min renamed a few api calls added utility methods to spoutblock
__label__inline launch hadoop mini mapreduce cluster make sure the task node uses a valid host name this is useful for links to work in the web ui even though the web ui itself does not work see git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc 
__label__push-down refactored the css package to allow a clean separation from the core
__label__pull-up added two new test refactorings pull to class level push to method level
__label__extract refactor testindirectbasicauthclientthere were several tests that had very similar structure and code extract helper methods to make the intent of the code more clear andavoid repetition
__label__inline faces develop alloy pickdate component refactored alloy pickdate to remove unnecessary attributes faces develop alloy inputdate component refactored alloy inputdate to use refactored alloy pickdate
__label__pull-up standardize usage of filenamefilter to use filter apis add file extension and directory searching to filter apis this is an incremental cleanup the real cleanup is the unify all these language specific concepts across the entire pmd code base specifically the cpd language stuff sourcetype sourcetypehandler targetjdk parsers ast nodes and anything else i missed that change will wait until we re ready to do a major pmd internal refactoring git svn id baf d a c fc e d
__label__extract extract the connectionlistener creation in a separate method in pool
__label__push-down added apis for modification and improved querying of members
__label__extract adding the linkindexupdator which updates the linkindex previously called linkmanager in response to repository events the recordlinkextractor now extracts links from link fields still todo blob fields this still needs testcases but i stumbled upon some small but blocking issues with the repository secondary changes adding queue mock package containing classes to fake queue operation used by both indexer linkmgmt tests adding repo util for utility classes which are useful for multiple modules and are repository related in contrast with the other util package which is not dependent on the lily repository also disabled the indexer in the root pom xml so that the build runs git svn id svn ssh dev outerthought org outerthought lilyproject projects lily trunk b d f e bd e a dc 
__label__inline add maxvolatiletime para to control data provider flush interval and little refactors
__label__inline recordhandlers set rather than list for find result logback xml re added classappender config but commented out so it can be re enabled easily if wanted changenamespacetest fixed arg test ps vivo xsl updated to use merged records jdbcfetch removed executeold transfer removed emptyjc jc to use jc truncate xsltranslator revamp and cleanup merge fixed and working specialentities added exceptions ability translatetest stop catching exception so we can see them when it fails specialentitiestest updated to reflect exceptions
__label__move o extracted booterserializer from surefirebooter extracted an interface for directory scanner minor refactorings with no functional change all this is initial footwork to get surefire moving it looks like it s going to be quite a journey git svn id f bb ffa edef 
__label__push-down plugin dependency refactoring extracted interface
__label__push-down made ws server write operations truly asynchronous separated websocket interface and implementation introduced websocketfactory to allow users to better customize their websockets
__label__inline issue changed configure mechanism so that configure no longer does actual configuration as there are currently no properties that can be influenced by the user
__label__rename faces add general utilities for liferay faces alloy components renamed widgetvar to liferaykey and widget to liferaycomponent
__label__pull-up aravind made all controller requests extend baserequest with channel
__label__move using a new type of deobfuscating which makes updating go times faster using jarjar with rule file to rename class files and then deobfuscate changes moved to new type of deobfuscating changed the jar requirement from minecraft server jar to minecraft servero jar removed all code related to reserve list was unused anyway cleaned up some other stuff updated minecraft sql to match latest needed sql removed reserve list from update sql
__label__pull-up docs refactoring hg rename src site apt configurations and templates apt beanstalk maven plugin src site apt configurations and templates apt rename src site apt continuous integration apt beanstalk maven plugin src site apt continuous integration apt rename src site apt index apt beanstalk maven plugin src site apt index apt rename src site apt usage apt beanstalk maven plugin src site apt usage apt
__label__pull-up refactoring df j nio continued
__label__move added table removemany which is passed a message batch that messages from the table are moved into using messagebatch batchiterator remove o instead of messagebatch remove o n replaced messagebatch getmatchingmessages with replaceif
__label__rename rename to asyncmultimap removeallmatching signed off by thomas segismont
__label__push-down using the jangaroo parsing infrastructure all tests green getters inherited
__label__inline fix for bug change id if ee dec c c a cbb f a
__label__pull-up make the query and result type safe by adding a t parameter which binds the query type to the result type also remove all the as methods since now they aren t needed
__label__extract refactor rasterprofile rendering code now the preview matches what is actually sent to the lasercutter before the preview was calculated differently the preview engraving was calculated with antialiasing off while the actual lasercutter engraving was calculated with antialias on which seemed to have no effect because rgb and not argb was used
__label__extract added checkbox for toggling emulation speed
__label__pull-up merged revisions via svnmerge from snapshot r redsolo on apr line added new files for ucm activity based change log r redsolo on apr line moved command lsactivity to cleartool r redsolo ti maj line move cleartool executable string into hudsoncleartoollauncher r redsolo ti maj line removed cleartool executable string away from cleartool implementations r redsolo ti maj lines applied path for ucmactivity and ucmhistorybuilder from henrik added outputformat and cleartoolformathandler to help with the clear tool formatting r redsolo to maj line clearcase plugin add ucm parsing of changelog xml patch from henrik r redsolo to maj line clearcase plugin add test for writing ucm changelog xml r redsolo to maj line clearcase plugin added changlogaction from henrik r redsolo to maj line clearcase plugin lshistory now returns reader instead of change logs r redsolo lö maj line clearcase plugin finished importing ucm changes from henrik r redsolo sö maj line clearcase plugin added patch to remove the view from ucm activity from henrik lynggaard r redsolo sö maj line clearcase plugin more test files r redsolo sö maj line clearcase plugin corrected tests for ucmchangelogaction r redsolo sö maj line clearcase plugin fixed failing tests for lshistory ct command r redsolo må maj line clearcase plugin fixed change log parsing for base and ucm scms r redsolo må maj line clearcase plugin fixed compile error and tests r redsolo må maj line clearcase plugin applied patch to remove the view from ucm activity r redsolo må maj line clearcase plugin applied patch to add sub activities to change log r lynggaard on maj line dummy change to test developer access r lynggaard on maj line clearcase plugin branch ucm changelog page converted to activity based changelog r lynggaard on maj line clearcase plugin branch preparations for ucm tagging support need to expose the mkbl cleartool command r redsolo to maj line clearcase plugin made get methods in ucm ucmactivity exported r lynggaard to maj line clearcase plugin branch build extended changelog changelog since last not failed build r lynggaard to maj line clearcase plugin branch lsactivity needs the viewname r lynggaard fr maj line clearcase plugin branch if the user writes stream as part of the stream name then strip it r lynggaard fr maj line clearcase plugin branch extra unittest to locate issue r lynggaard fr maj line clearcase plugin branch cleartool is particular about parameter ordering r lynggaard lö maj line clearcase plugin branch add tostring method for easy debug r lynggaard lö maj line clearcase plugin branch improve ucm specific changelog issue r lynggaard lö maj line clearcase plugin branch ensure changelog action is reset for extended changelog r lynggaard lö maj line clearcase plugin branch improve ucm changelog provide stream and user for sub activities r lynggaard lö maj line clearcase plugin branch remove seconds from ucm changelog r lynggaard sö maj line clearcase plugin branch fix tokenize issue on branch also r lynggaard sö maj line clearcase plugin branch improve ucm changelog page r lynggaard sö maj line clearcase plugin branch minor change to regexp generation r lynggaard sö maj line clearcase plugin branch new ucm fake cleartool setup r lynggaard sö maj line clearcase plugin branch re enable edittype icons in ucm r lynggaard sö maj line clearcase plugin branch lsactivity should be run from within the view r redsolo må maj line clearcase plugin move vob path handling out from lshistory into clearcasescm class fixed so load rules remove the and before they are used in the lshistory command r redsolo ti maj line clearcase plugin no need to quote the command line args as argumentlistbuilder already does it r redsolo ti maj line clearcase plugin fixed problem that was introduced in my refactoring for vob paths r redsolo ti maj line clearcase plugin added tests for getbranchnames r lynggaard on maj line clearcase plugin branch remove full username from changelog as we now rely on hudson users to display that r lynggaard on maj lines clearcase plugin branch defensive code to handle lshistory with empty activity names it appears that most version entries with empty activity names are version or mkbranch items this code is only there to catch it in case some real version has no activity however that should ideally never happen r lynggaard to maj line clearcase plugin branch add additional mkview documentation r lynggaard to maj line clearcase plugin branch small javadoc update r lynggaard to maj line clearcase plugin branch remove old extended changelog code as this is not the way we want to do it r redsolo to maj line clearcase plugin fixed so the changelog actions are adding the c comments to the lshistory format r redsolo to maj line clearacse plugin removed unused class git svn id c de d a be ed b c a
__label__move getmidnightdate moved from calendarenginehql to calendar
__label__pull-up restructured moved testng tests added testng config and ant task
__label__rename made assetscontroller tests run on windows again renamed an assetscontroller test to reflect correct behavior again marked old assetcontroller method as obsolete
__label__rename added unlink methods to class node node linkleft and node linkright renamed according to java naming conventions
__label__rename rename for onexecute method
__label__inline hh drop unused methods optimize code a bit move postcommithooks usages in test to the example app an ivanov
__label__rename update portfolio aggregate use aggregate annotation for spring put all commandhandler annotations on the command handling functions drop the portfoliocommandhandler rename command handler function to handle cmd replace eventhandler for eventsourcinghandler rename event handler functions to on event drop useless author tag move map instantiation to the event sourcing handler for portfoliocreatedevent as that instantiates a portfolio simplify couple of functions overall reindent of file rename portfoliocommandhandlertest to portfoliotest clean up the test case 
__label__rename renamed generator to factory git svn id guice googlecode com svn trunk d f a b b b d aecad e
__label__inline removed dead code if we aren t needing the page name no reason to loop around doing stuff to find it cleaned up javadocs a bit
__label__pull-up prepared restservlet definition to debug project refactored class structure and comments for cleanup kept rest commented out as it throws an npe so probably i m missing something in the config
__label__rename rename linux to unix where appropriate
__label__push-down add one more test extract duplication
__label__pull-up faces develop resourcehandlerwrapperbase class for liferay faces util and refactor existing resourcehandler implementations to subclass it
__label__push-down refactor exceptions for plugin management
__label__rename rename uicleanup to quit and relocate in file
__label__extract add metric filters
__label__inline wip started test renderer refactoring
__label__rename rename classes to reveal their meaning they all just convert properties specific to trigger type
__label__move idatacomposer initialization dropped from initlistener and moved to validatorfilter to avoid problems with premature request initialization fix jsf requires validatorfilter for get request validation and idatacomposer initialization
__label__rename barc rename to barcdirectory settargetlength easier in ruby
__label__pull-up created matrix x homography new extends matrix x 
__label__move updated to support mambu api changes mbu create group apis a also included code for mbu edit groups api note mbu will be now supported by mambu in only added todos to test when ready clientservice mbu get group roles and get details for group role apis clientservice mbu get client types api for clients and for groups api clientservice mbu mbu client profile picture and signature apis to store retrieve and delete clientservice documentservice servicehelper notes moved makeparamsfordocumentjson to servicehelper demoutil moved the encodefileintobase string to demoutil from demotestdocuments mbu mbu get repayments schedule preview for a loan product api loanservice servicehelper mbu patch loan account terms api loanservice servicehelper mbu update loan account repayments api repaymentsservice mbu undo loan account disbursement api loanservice mbu custom fields refactoring to support client types updated demo programs demotestorganizationservice mbu updated comments only allow username key to id to be used in place of username for getting tasks mbu updated comments only allow user key and id for updating custom fields for the user enhanced demoutil to provide more helper methods for testing and runs automation created helpers to run api tests for specific accounts and products created helpers to create new accounts to be consistent with the tested product type created helpers to create custom fields for new accounts to be valid for tested product and client role rearranged some test cases to allow for higher probability of the successful end to end runs updated demo programs to test new apis used new generic helper methods and re arranged test calls to allow for better test automation and less test data dependency miscellaneous updated pom file to use model jar and to build mambu java bin jar added missing wrapper for delete document api available since see mbu documentsservice updated apidefinition and serviceexecutor to support new apis added new definitions get owned entity patch owned entities patch json removed unused class util apiexceptiondata java this class was never used and is not needed mambus returncode enum class can be used instead removed an unused constructor in mambuapiresponsemessage referencing this class deprecated account type enum in apidata class mambus existent account type class from the model should be used instead updated savings service to use mambus account type deprecated original methods using account type apidata savingsservice taskserice correction renamed gettasks to gettask requestexecutorimpl java updated logging json data to better handle encoded content for profile picture signature api updated raedme file
__label__move ashok ashish moved validation utils in services refactored obd succesful call request to web and domain requests
__label__inline pipeline stuff moved to separate repository
__label__push-down generalize ruleviolation treatment add abstract base class and language specific rule violation implementations to be consistent with other pmd code renamed iruleviolation to ruleviolation i never liked this hungarian notation crap in java code anyway extracted the ruleviolationcomparator as a standalone class and fixed it s implementation was seriously broken so the ruleviolation comparison is very well defined changed report to use a list of violations internally instead of a set since the change to the ruleviolationcomparator was causing truly duplicate ruleviolations to be dropped git svn id baf d a c fc e d
__label__inline o removed unused methods added a couple of missing license headers git svn id f bb ffa edef 
__label__move  moved adding user agent header to class
__label__push-down push assert methods from basetestcase to erxtestcase and re factor removing basetestcase
__label__move refactored the kenyaemruiutils utility class into a singleton bean and moved it into the api layer so it s accessible to other modules
__label__rename rf qcadoomes rename countmachine and countrealized
__label__pull-up added some icalendar variables to repeatableappointment removed repeatfieldsequals from repeatableappointment
__label__rename tasks on batches rename shortids to redirections in listbasedadiinputparameters this is what has been spec d
__label__move newtools some cleanup on optiongroup passing added option to avoid removal of const fields moved actual code remover into own optimizer class
__label__inline clean up project user orm
__label__extract extracts the copying of a bucket from bucketarchiver so copying bucket feature can exist the difference between the oldbucketarchiver and bucketcopier is that in addition to copying thelocal bucket to the archive thearchiver also deletes the localbucket on successful copy
__label__rename rename scope to record
__label__inline merged extendedreceiver receiver merged extendedmessagelistener messagelistener merged extendedmembershiplistener membershiplistener removed partial state transfer jchannel getstate jchannel connect state transfer streaming state transfer
__label__pull-up wcet refactor supergraph
__label__pull-up fixed hudson added support for creation removal of dynamic views and tweaks to view removal when a job is deleted renamed or workspace is wiped git svn id c de d a be ed b c a
__label__rename rename import pragma to import package
__label__rename renamed some jmx attributes
__label__pull-up moved pmdatainputimpl logic to pmobjectbase
__label__move added timebasedrollovertest to the list of excluded tests in pom xml as it takes as much as seconds to execute modified modified consoleappendertest to output nothing on the console in a related change teeoutputstream now admit a null parameter in the constructor moved delaying methods into delayerutil class silent tests are beautiful
__label__inline removing
__label__push-down core pipline and codecs moved tho the new repository
__label__move half finished preferences pane displays but doesn t save back yet moved handling of xml preferences file from uistarter to userpreferences made the logger only print class name insead of whole package tidied aboutmessagedialog other insignificant changes
__label__extract merged nperrier s addition of extracting cover art from id tags when indexing collection fixes 
__label__extract added test for views support and fixed bug
__label__pull-up refactorings new packages for cpd dataflow views new abstract superclasses for actions commands views for loop conversions arraylist list reference changes rearranged context menu icons still need some unique ones for three other entries dataflow npe fix post view closing view always shows first method by default labeled method list new tab icon outlined positioned nodes git svn id baf d a c fc e d
__label__push-down changed central weights not to have colouring in the actual weight cells
__label__move junit check assertion message present in assertequals with delta a missing assertion message for assertequals double double double is detected in most cases now if the assertequals method has two arguments an assertion message is missing if the assertequals method has three arguments the first one has to be a string pmd will only print an error if the first argument type has been determined gettype null and isn t a string therefore assertequals getint getint getint won t be detected as an error however double d assertequals d will be detected the junitassertionsshouldincludemessagerule check method has been moved to the inner class assertioncall and has been expanded by an isexception hook the assertequals with three arguments check overrides the isexception method returns true if the first argument can t be determined or is a string and if so no violation will be added also the constructor arguments have been swapped for readability
__label__push-down refactor cluster update rest api use api cluster name for updating cluster attributes and api cluster name action state stop start resume for changing cluster state
__label__move refactor threadlocalcleanup and extract warningthreadlocalcleanup subclass 
__label__inline first attempt at refactored repository access repository api repository pentaho basic functionality for system solution access path handling still needs some work first attempts to use it in aliasedgroup and pluginsettings would be really surprised if anything actually worked at this point
__label__pull-up extend the result of a task on a batch engine 
__label__move assert moved to failutil
__label__inline refactored and split itemsessioncontrol cleaner
__label__rename renamed a method
__label__rename renamed zone get set capturetouchesenabled to get set capturetouches
__label__pull-up remove jaxb from the addressing policy object model git svn id cbddccc e a eb be d e b d 
__label__inline rewrite sqlstorage as a tuplestorageservice
__label__extract minor additions to lzfdecoder to allow passing offsets additional sanity checks
__label__pull-up logtool initial work for supporting the new param annotation with some major refactoring
__label__extract extract method
__label__inline mdep remove replace maven specific code clean up unused parameters getters setters git svn id f bb ffa edef 
__label__pull-up refactor jogltargetfixedfunction common code to abstractjogltarget
__label__move lily resolved some merge conflicts due to move of derefmap and delete old derefmap
__label__inline removed mux related code
__label__inline final tests to assert that the merging actually works
__label__extract add support for disabling routing on unpaved roads and ferry routes by default ways are considered to be paved and not ferry routes adding mkgmap unpaved yes true to a way will declare it to be unpaved and such ways will not be routed through if the gps has been set to avoid unpaved roads similarly tagging a way with mkgmap ferry yes true will cause it to be ignored for routing purposes if the gps has been set to avoid ferry routes git svn id d f ee a dfeeeb 
__label__extract a major change added support for multi level query plans with measuring time in any of the following modes none storm throttling send and wait and manual batch
__label__pull-up changing eventdrivers to extend other eventdrivers and abstract eventdrivers in place of using underlying events parameters this will improve speed and reliability this will also simplify logic for eventdriver aware events
__label__push-down cw has been moved to rawdata model
__label__rename refactoring renamed getoccurrences to gettokens git svn id baf d a c fc e d
__label__extract address issue stage optimization and issue multi start too slow when run single stage made all naf objective functions single stage refactored objectivefunctionoptimizer for readability changed all multi start optimization runs to first find a good startpoint array by running a direct bobyqa optimization
__label__move count cache moved from eventsmanager to abstractcalendarengine
__label__inline re fixed merge issues with scopusfetch after repo clean up
__label__push-down merged with latest core refactor branch
__label__pull-up removed current user in favor of the authorizationservice fixes issue 
__label__rename changed for code review feedbacks readablity improvements including method renames most is to give more distinct names for readablity use stringwriter rather than byte stream to avoid double charset conversion added code comments into resultreader cs to document class relationships and code flow
__label__extract refactor extract unwrap method
__label__push-down refactoring matsim integration
__label__extract extract sibling goal tests in the client side to the rest services
__label__move fixed help content in eclipse ecj support moved completion proposal code to the patchextensionmethodcompletionproposal class moved out error reporting from eclipseast fixed error reporting of the portals
__label__inline moved value and string converter to pm j common part 
__label__pull-up refactored to remove duplicate code
__label__push-down major indexing changes and updates implementation of a different pojo indexing strategy see javadoc and code comments for more details added autocomplete indexer that indexes searched phrases and takes their search frequencies into account the most searched ones are then displayed first both pojo and linkedin full indexing is set to run periodically configured by the spring task scheduler
__label__extract add xml returnformat
__label__move refactor moved dct code to own class
__label__extract extract adding the move function to a private method
__label__move refactor moved image utility methods to own class
__label__move changed inheritance and moved stuff to erxcomponent
__label__pull-up add new default mouse listener make hover link cursor listeners extend it to reduce some boilerplate code javadocs for mouse tracker and listeners
__label__extract text and metadata extraction
__label__pull-up koti vandana some refactoring and took out the libfaketime so location from the pom xml to be specified from command line
__label__rename added simple styling to all simplexxmarker default draw now coheres to select state and displays in highlight colors added styleconstants renamed marker getprops to getproperties
__label__extract pulled string matching stuff out of parser ad into tokenqueue for reuse in selector parser added som texts and corrected behaviour of parser
__label__pull-up moved resultoption handling to operationmetric
__label__rename rename querycount elapsedtime to time
__label__extract added async prop
__label__push-down fixed encoding of command arrays fixes 
__label__move sampling moved to utilitysampler
__label__push-down df qcadoomes refactoring shifts
__label__pull-up added embeddedresourcehandler which allows static resources to be embedded inside a jar file common stuff has been pulled up into an abstractresourcehandler also deleted dupe staticdirectory the main purpose of this patch is to embed useful things like dnode straight into the webbit release jar or at least a special packaging of it
__label__push-down removed web app from this git repository
__label__rename renamed connection option winrmdebugkerberosauth to winrmkerberosdebug
__label__inline some more simplifications to client api
__label__inline remove the get helpers from entity only service has helpers it doesnt follow the model to have them on a resource and it conflics with resourcecollections implementation of map and will conflict if entity ever implements map they helpers also arent really necessarry because they do so little but mostly fixes a modeling and name conflict issue
__label__push-down rf fixed rich inplaceselect by moving definitions to rich select specific class
__label__move o moved the sslcontext field to the tcpclient server classes udp does not support ssl o added some missing javadoc o added a initsecured session method to initialize the sl layer if needed git svn id f bb ffa edef 
__label__inline changes in the nio implementation and re implementation of gossiprouter routerstub added pubserver and pubclient added send null to send to all added gossiprouternio added static creator methods for nioserver and tcpserver added code to create client servers tcpgossip and tunnel can now choose between blocking and non blocking connections to gossiprouter use nio request and response types between routerstubs and gossiprouters are now in a separate enum gossiptype removed gossiprouternio non blocking io will be implemented in gossiprouter itself using nioserver tcpserver added util buffertoarray moved connectionlistener out of baseserver removed server added list to gossipdata receiveradapter now uses util buffertoarray tcpgossip now implements routerstub membersnotification callback routerstub now uses baseserver to connect to gosiprouter gossiprouter now uses baseserver to implement connection management added tcpclient and nioclient moved all client server related classes to org jgroups blocks cs added tcpclient and nioclient moved all client server related classes to org jgroups blocks cs de genericized baseserver et al moved to package org jgroups blocks cs reconnects in routerstubmanager now work use peer connections to make unit tests pass added suspect handling in gossiprouter when a connection to p is closed then a suspect p will be sent to all members of that group made marshallinf of gossipdata for type message more efficient removed copying of messages in gossiprouter setting parameters in sockets channels before connecting them tcpconnection isopen now returns true when the socket has been created rewrote serverunittest to get rid of issues with dataprovider upgraded testng dep to x
__label__pull-up crsh line edition support and left right cursor move
__label__move refactoring move movetreedocafter from celementswebscriptservice to treenodescriptservice
__label__pull-up feature remove p repository dependencies from profiles too
__label__push-down squashed commit of the following commit eb f a aed ab fedfdce author bela ban date tue jul ns commit f c a dea ef b f c author bela ban date tue jul conflicts src org jgroups jchannel java src org jgroups protocols barrier java src org jgroups util blockinginputstream java squashed commit of the following commit fee efe c f b bc c f dc author bela ban date tue jul ns commit ae cd d c bed ad author bela ban date tue jul changed streaming state transfer to state and streaming state transfer socket to state sock commit b aa aad d b c bf a ca b d e a author bela ban date tue jul changed streaming state transfer to state and streaming state transfer socket to state sock commit e a a a db cba e b a d author bela ban date tue jul ns commit e a f e c ec d f ea author bela ban date mon jul ns commit a bbfd d c fdbad de dfee b e author bela ban date mon jul ns commit a df d b d de e c ca author bela ban date mon jul ns commit a b a a db a eb a c author bela ban date mon jul removed channelexception channelclosedexception channelnotconnectedexception commit a c fb b c b a c ed a author bela ban date fri jul replaced setstate byte and byte getstate callback implementations with corresponding streamed versions commit ef ef d f a e eb d e dca a fede author bela ban date fri jul converted byte getstate and setstate methods to use input output streams commit a a c d d ceb f f author bela ban date fri jul ns commit ba a eccdf d b d bca d e f e author bela ban date thu jul ns commit a bde b dadb ffd fd e dc c author bela ban date wed jul removed meaningless inheritdoc commit c b af b cd dad c d b fa e author bela ban date wed jul ns commit baa a d cf b cde author bela ban date wed jul ns commit d ed d a ca a b a ca a author bela ban date tue jul changes to statetransfertest to test state transfer protocols commit e d a fab fe a dbbcaf f a e a ef author bela ban date mon jul added exception to all getstate setstate callback impls commit c a bf d abdb f f e b e cbe ef author bela ban date mon jul ns commit d caf cdd c dccf f d f e author bela ban date fri jul ns commit c ee e bc e c f e aa ab a author bela ban date thu jul ns commit bb d a ef f e d ab f d c bb author bela ban date thu jul streaming state transfer socket works now more work on exception handling needed though commit c aea a b ba d d e b author bela ban date wed jul first cut of impl of streaming state transfer socket works still to be done exception handling client or server crashes commit f f ed a eb bb f dd f fd cd ea author bela ban date wed jul added new tests commit bef ce f d aa ddefe ead e f f a author bela ban date wed jul first cut of jgrp streaming with the default transport streaming state transfer works now on to streaming state transfer socket commit e ed dbb a f b a f cfc ccf author bela ban date tue jul exposing suspended as jmx attr commit ce b c eee d bb f a author bela ban date mon jul made openbarrier public and managed op commit f fab feb b ab ff author bela ban date fri jul cherry picked change to barrier from master commit ae aeaf c ed c e fd bc cea author bela ban date thu jun cherry picked addition of blockinginputstream and unit test and change to coordgmsimpl from master commit f cef b af d d e a d cb b author bela ban date tue jun changed loopback false in tcp xml commit fd c edd bbc b ed b author bela ban date mon jun first shot at statetransfertest merge of jgrp merge which was merged from jgrp to master
__label__inline remove some extra unhelpful output move test code to test jar git svn id f bb ffa edef 
__label__extract refactoring extracted reusable outputsinkitem helper class to collect and refresh all compilation results git p depot paths coremedia jangaroo change 
__label__pull-up o refactor the creation of title and summary for the report into a couple of common methods in the parent git svn id f bb ffa edef 
__label__push-down refactored the type classes so they use less memory especially by not seriazlizing the primative types and using a number to refer to them in the index instead hg branch idea rename src lang psi types luatype java src lang psi types luatypeimpl java
__label__push-down implement basic margin collapsing various refactorings in preparation for shrink to fit add hack to treat auto margins as zero
__label__inline watchmojo updatestylesheetsmojo simplified
__label__inline all the changes stem from modifications to classmirror methodmirror their methods no longer return other classmirror objects in response to getsuperclass or getinterfaces or getexceptions instead they return string or string detector looks up those classes as necessary this change avoids mirroring classes that we know to be non pausable those in java or javax packages weaving is also faster because the weaver stops looking for a pausable method up in the hierarchy as soon as it encounters a super class name in one of these nonpausable packages
__label__extract add checkstyle
__label__push-down big id for bible before getbible refactor
__label__extract slightly untested extraction of method to compute effective tweet lengths
__label__extract added unit test to codewax s patch and fine tuned patch
__label__rename rename zaddbinary to zadd
__label__move v ashish refactoring subscription request handlers
__label__move added event dnd functionality add is fully functional also a lot of other little fixes and changes eventkeyinput added a activated event add moved keys to event eventnode made transferable added an isvalid check gmmenubar fixed a potential locale bug see javadoc for string touppercase listener changed stringtores to use reflection rather than conditionals some changes to the canimport method to prevent unwanted mouse cursors mdimenu a bit of shuffling around no major changes mdipane removed todo catchblock comments resnode simplified isdataflavorsupported for the same reasons as the changes to listener gm filereader some restructuring of code private static fields rather than parameters fixed some exception code re prefixed string keys to start with class name updated messages properties accordingly event added some convenience constructors moved the keys list to here added compareto and equals functions eventframe added dnd functionality collision and keyselect are now disabled and enabled on selection added a replace checkbox not coded yet gmobjectframe added eventinstancenode and eventgroupnode classes to simplify things a bit added addevent function which correctly inserts adds a new event selects it and scrolls the tree to display it spriteframe as ismavatar so subtly suggested i do i ve extracted the two main panels of spriteframe into separate functions git svn id f f bc e be cd 
__label__pull-up adds billstat with still ignored data tags this commit focuses on the implementation of billstat and its testers currently reads sponsor title currentamd law and billaction tags remove and replace testers are in order fixes 
__label__rename renamed asserter assertlowmemory to assertnotlowmemory
__label__rename shruthi renamed providedtreatment to treatment
__label__rename rename setkeystoreoptions keycertoptions setkeycertoptions keycertoptions and settruststoreoptions trustoptions settrustoptions trustoptions
__label__inline removed a useless static initialization git svn id f bb ffa edef 
__label__pull-up rhbz rhbz squashed commit for zanata init command client pull commit ab cefde b a cc ecd e b df author patrick huang date thu aug rhbz handle not exist src dir commit dea e c d bd c db a d e eea author patrick huang date thu aug rhbz check server is compatible to init command commit fe f e c c f f author patrick huang date tue aug messages change commit b a bd c fc b a a d b c d a e author patrick huang date tue aug change message template to match prompt commit dd bc a c a author patrick huang date tue aug fix exception type and tests commit cc b d c e fc b c c ff e author patrick huang date tue jul change copyright year and a few messages commit ec adde e dbec d aa f c d author patrick huang date tue jul improve message commit f bd ab f d e de fee cbd author patrick huang date tue jul remove unique from project id prompt commit b d cbddc dbc e f d a a cbf f author patrick huang date tue jul rhbz handle when there is no server url in user config commit cec f a a ff ba bb a a d f e author patrick huang date tue jul refactoring commit c f f d fa df a d d author patrick huang date tue jul rhbz rename method and static import commit f e f d fb de dd bdc f a ebc b d c author patrick huang date tue jul rhbz refactoring commit e ad fa e a b b b a author patrick huang date mon jul rhbz extract methods in userconfighandler commit baa eab dc d ebbf db author patrick huang date mon jul rhbz refactor project source and trans prompt commit cdf efc baeac c d d d author patrick huang date mon jul add copyright to files commit d ed d ab bca baa da c bf author patrick huang date mon jul rhbz extract methods in projectconfighandler commit a ddda afaee f e a ea author patrick huang date mon jul rhbz extract methods in initcommand commit c dbf b ef ab b d c c cc author patrick huang date mon jul remove updatechecker from production code pending story and rfe commit fa af e a ad bd ccbf c b a c f b author patrick huang date mon jul rhbz missing resource key will log an error commit e a f f f f f ec author patrick huang date mon jul rhbz rename methods in optionmismatchchecker commit c ebebd bc deb b ee author patrick huang date mon jul rhbz rename class mode to displaymode commit ac cb bff c c b be f e c author patrick huang date mon jul rhbz rename class commit bb c bfc f da df bae cb author patrick huang date mon jul rhbz refactor initcommand extract method etc commit a f f e e cb f e eb e a ef author patrick huang date mon jul rhbz refactor class that expects user input commit db a f dcb e de b e d ade a author patrick huang date thu jul rhbz add color output and change some messages commit f c a f fc c b ee author patrick huang date wed jul rhbz able to filter project in long list commit a fa fee a e b acd aa d f author patrick huang date fri jul rhbz check key availability in resource bundle commit a a ffe b de author patrick huang date wed jul rhbz check if there is newer version of client available commit fe e a e cb fc e fa cf b c daf author patrick huang date thu jul rhbz externalize strings to properties file commit e a e b ebfebc e b a eb d author patrick huang date tue jul rhbz add init to zanataclient commit c c d b c b fa b c add dcc f author patrick huang date tue jul rhbz fix minor issues and print what s next suggestion to user commit e a f f b f cba f f author patrick huang date tue jul rhbz refactor and clean up code commit f f d c ced b d a author patrick huang date tue jul rhbz refactor to extract project and version prompt to separate classes commit caf c f b a e ff d bdf ce author patrick huang date tue jul rhbz refactor extract project config handling to separate class commit d f be a b f eb ed c f fede edc author patrick huang date mon jun rhbz refactor extract to separate class commit f d f d dc e cca author patrick huang date mon jun rhbz refactor test and mock server commit c d b a d ec e fc bdc author patrick huang date fri jun rhbz add init mojo as maven goal commit f cc b ef f ba c ded c c author patrick huang date fri jun rhbz prompt user for trans dir commit a a a a c da d c e author patrick huang date fri jun rhbz use index number to select project and version commit cb b dfc baf d d e b ae dc author patrick huang date fri jun rhbz src dir includes and excludes prompt commit f e a cb e f ff a ac c fd author patrick huang date fri jun rhbz refactor zanataproxyfactory to allow not eager rest version call commit ec dd f e ddbc f c author patrick huang date thu jun rhbz add includes and excludes to zanata config commit c a da cc d a ec c b author patrick huang date thu jun rhbz pull up includes and excludes to project configuration commit d a b bd b b b ca a a a author patrick huang date thu jun rhbz rhbz add src dir and trans dir to zanata config commit e ef e b a c a f ac author patrick huang date thu jun check for potential wrong src dir in podir project commit e a d a edeb f a d be d cff author patrick huang date mon jun rhbz create init command commit c ebac da fd fc f c bbecdc e author patrick huang date wed jun add friendlier message to inform user server is not up
__label__push-down redid entire resource kind system to use class instead modularized resource kinds ordering and relating strings especially now uses egm character strings fixed recent files changed jedit functions to appear in red instead of dark blue reflected all changes in translation files git svn id f f bc e be cd 
__label__push-down hack to remove functionality that triggers an odious bug in 
__label__move  moved config keys and new rest types to cids server rest types
__label__push-down mdep push down artifactcollector to listrepositoriesmojo that s the only one using it also simplifies unittests a bit git svn id f bb ffa edef 
__label__inline refactor placeservice to reduce method numbers
__label__extract move rexpro session monitor to the rexprorexsterserver java and extract out start of shutdown listener
__label__inline xhr transport refactoring and buffer alloc optimization
__label__pull-up cleanup up the unit tests tests are now broken up into auditing and non auditing versions most of all our repo tests now disable auditing only the auditing specific tests will enable it this should reduce the number of tests dependent on asynchronous processing ie auditing
__label__pull-up sc qcadoo refactor messages translation
__label__inline source map clean ups removed findbug dependency
__label__pull-up initial commit of operators branch will be tagged eventally nick s branch this commit contains several tea language enhancements known as operators by nick as well as lots of generic typing refactorings a full description of these changes will be documented elsewhere builds basically tested
__label__move rename and move cfc proxy classes to hibernate package
__label__rename benchmark stages now separated into their own namespaces removed all the separate symlinks to xsd files replaced by single symlink to schema directory moved radargun xsd to radargun benchmark xsd fits better to the urn radargun benchmark namespace moved radargunscenario xsd to radargun scenario xsd and changed the namespace to urn radargun scenario core stages are now in radargun core xsd reduced code dependency on directories lib dir annotatedhelper renamed to classpathscanner now scanning whole classpath
__label__extract synthesis subtree extraction first pass
__label__extract add the ability to specify a path in a cookie
__label__extract updated docs untested changes to bitext extraction pipeline
__label__push-down most of the way through a feature refactor code does not compile here
__label__push-down reverting the seperate construct select interfaces not an ideal approach merged that stuff back into the single builder but added appropriate safeguards for disallowing operations that would yield invalid queries when built from the builder also adding support for creating unioned queries some fiddling with the generics so that closegroup closeunion give you back a builder of the appropriate type also fixed a bug in the sparql query renderer related to filtered sub expressions
__label__push-down a lot of changes to events and commands to contain the transaction identifier now the saga do their work
__label__move name
__label__move move method from calendarservice to jsondaoutils the addobservation method was previously in the openlegcalendarreportservice this method was moved to the jsonopenlegdaoutils because it can will be resused by the openlegagendareportservice eliminating duplicating code
__label__inline waitonreplication don t use record table but instead root table this makes that custom sep listeners don t get confused by the trigger row we write the actual table name didn t actually matter it was made an argument for cases where the record table would not exist but the root table always exists so removed any specific uses of that
__label__inline some fixes and refactorings
__label__extract simplified the dao interface and added tests
__label__move seperated ftprequest into a pure request and a dedicated session class ths makes the seperation of duties more clear and moves us closer to the pattern used by mina git svn id f bb ffa edef 
__label__pull-up moved equals and hashcode to vparentbase
__label__push-down wcet add objectcacheanalysisdemo refactor recursiveanalysis for reuse
__label__push-down make object spawning a little bit more logical useworld and usebiome now also pick one object to spawn when used in the tree resource removed customobject spawn localworld world random random int x int z as it wasn t used anywhere besides for the bo and bo internals
__label__push-down creating dev branch for in dev code
__label__rename rename protocol context methods
__label__push-down fixed bugs with validation of the model also i n ized the model validation messages
__label__pull-up add support for projection classes classes that expose a subset of the complete entity add expressionbuilder abstract class and refactor existing expression builders to extend add summarydao functional tests
__label__inline made flush private and moved removechannel onto processqueues flush should not be public since that would require us to perform synchronization and that isn t needed also flush is is only used during shutdown the removechannel method was intended to be used to remove dead channels earlier but it is okay to remove dead channels during the periodic calls to processqueues they ll stick around for a few milliseconds more but on the other hand channels exit stage left only one place in the code
__label__rename package dffw renamed to df j
__label__rename rename routeregistry map
__label__pull-up refactoring ivory app classes to reduce code duplication
__label__inline cleanup based on check style complaints and javadoc jdk s doclint complaints
__label__pull-up add parameter to resume push or pull from a specified document for java clients
__label__extract extension and cleanup in killbill remove deprecated methods simplifies code add ability to stream results into an outputstream streaming apis
__label__extract sc qcadoomes added vat number validation
__label__pull-up dependencygraphs cleaned and started to remove removed projects
__label__extract fix bug make cluster list faster in large scale environment by not to retrieve nodes list while cluster list without detail create indexes for foreign keys on table node node group disk nic
__label__pull-up cpk refactoring all tests passing in cpf pentaho removed pluginslist
__label__rename renamed callrealmethodwitharguments to callrealmethodwithargs
__label__inline some code clean ups
__label__push-down implementing hilite functionality in the gui adding action listeners and actions in the menus moved the hilite filtering to the trellis menu since it does not concern the single plate adding necessairy fields in the heatmapmodel implemented a getplatestodisplay method before this was in the trellis but with the hiliting it had to be adapted too and i found it belongs to the model adding conditions in the rederers heatwell heattrellis to pick the right color changing the screencolorscheme to use the knime colors for selection and hiliting
__label__pull-up sramp moved s ramp client s ramp server s ramp wagon integration tests into s ramp test refactored tests for arquillian removed resteasy test and tjws dependencies
__label__pull-up merging narmanager eventual removal into abstractdependencymojo making goals that use nar dependencies manage download unpack similarly to what is done automatically for jar moving download unpack goals to be more like maven dependency plugin
__label__pull-up minor refactoring
__label__push-down fixed message id in topics added method inheritance test refactored out nevadoqueueconnection and nevadotopicconnection
__label__extract refactored check for hidden into a private method preparing to shift to jpa from portletpreferences
__label__move add base classes for parser implementations to eliminate duplicate code also add a tokenmanager wrapper interface and implementations for each parser ultimately this stuff needs to be moved into language specific packages i expect further effort will need to be done to generalize anything and everything related to tokenizers parsers asts etc we should explore if there s a way to get javacc to use actual interfaces for things it seems to be generating duplicate one off implementations but does not implement a standard set of interfaces once we have javacc implementations in pmd we really need a way to make them appear identical to all the pmd internals settling on javacc as the standard for pmd seems like the easiest choice for now we can mix things up in the future once we get it working for the simplest case git svn id baf d a c fc e d
__label__inline mdr and changes set the mdr flag only when name and mdr value are the same separate city records for cities with the same name but different regions as well as different maps now save the mdr value directly in the mdr record i don t think we need to do any post processing of the values any more git svn id region index d f ee a dfeeeb 
__label__rename renamed promotionbadgelist to status
__label__push-down mocdtw creation of models related to places subsequent changes to wrapper
__label__rename rename some methods in the worldmanagerapi
__label__push-down get virtual ips now working in core refactored virtual repositories to use interfaces for autowiring
__label__move major new functionality featues added file downloader integrated into tvrageprovider implemented check for updates and preference option code changes finally made preferences static yay renaming of many uistarter variables to conform to nametype moved string handling into stringutils updated tests
__label__rename renamed removetopic to deletetopic
__label__push-down simplified abstractprotocolencoderoutput git svn id f bb ffa edef 
__label__move renames methods on encoder this also moves the encodequeryparameters method to the encoder class
__label__push-down refactoring io state interface generation
__label__extract improvements to assessmentresult generation items now generate a full assessmentresult added support for recording context sessionidentifier
__label__move indexupdater fix when a record changes so that a different rule from the indexerconf matches a different set of vtags might become active in such case deletes must be done on solr to remove the entries corresponding to the old vtags for the indexupdater to be able to do this it needs to know what rule matched before hence it needs both the old new record state this is exactly the same as what we need for evaluating the indexrecordfilter in the indexawaremqfeeder and is put into recordevent by indexselectionrecordupdatehook therefore the information provided by this hook is now also useful for indexupdater additionally for update of denormalized data to work records which are not indexed by themselves but are accessed through dereference expressions also need to be matched by the indexrecordfilter to be able to express this we need to support include rules with empty vtags this basically says include the record but don t index it the same could be achieved by rules to exclude the record from indexing but that s more expensive the recordfilter decision can be made without even loading the record and currently doesn t help much with dynamic fields either solving all this brought a couple of other changes with it refactored vtaggedrecord moved out things which only dependend on recordevent and not on a loaded record into recordeventhelper probably could use further refactoring to completely split the two because now vtaggedrecord is also used in cases where there is no recordevent and then maybe reintroduce a third party to combine them indexer integration dropped merged it with engine due to circular dependencies for their tests engine test now needed the indexrecordfilterhook could have been solved also by splitting indexer integration into two different projects but decided that it s ok to have it together with engine renamed recordevent indexselection to recordevent indexrecordfilterdata renamed indexselectionrecordupdatehook to indexrecordfilterhook fixed npe in indexrecordfilterhook in case of a record update where no record type is specified pulled out the code to create record s from the information stored in recordevent into a new utility class indexrecordfilterutil so that it can be reused by indexupdater indexertest now needs an indexrecordfilterhook which depends on indexermodel which was previously not used in this test
__label__rename jcbc join nest key clause uses on keys syntax motivation in n ql the correct syntax for a on keys clause in a nest or join is on keys expression not keys expression as currently implemented also there s a clause that uses keys keyword but differently when referencing primary keys document ids the use keys syntax should be used this syntax expects strings or array of strings not a token could be implemented as a usekeys method next to the current keys methods modifications keyselement now takes an enum to denote the type of keys clause keyspath keys methods for the join side of things have been renamed to onkeys added usekeys for the from side of things referencing a primary key onkeys and usekeys accept an array of strings usekeys with array of size will only produce a string in query not a json array refactored unit tests where on keys was expected modified unit tests where use keys what meant instead of on keys results all unit tests passing one can now do a from clause on the primary key using usekeys methods the syntax for joins key clause has been fixed in onkeys methods change id i da c b c afe fb dd dcd reviewed on tested by simon baslé reviewed by michael nitschinger
__label__rename rename jacksonmapper withvisibilitychecker to setvisibilitychecker more faithful to jackson
__label__move remove circular dependency between documentloader and jsonutils the public api for documentloader is unchanged but the protected static api for documentloader has been modified to move all of the implementation methods and fields into jsonutils
__label__pull-up first iteration at removing code duplication
__label__pull-up refactoring etc
__label__inline introduce a latebound rule which may replace reduce need for providers
__label__rename renames no room no space withmaxattemptsforplacement maxattemptstoplaceword
__label__push-down added sharedobjecttypedescription class and changed api and all apps to use appropriately the file sharing feature in the collab example app remains broken and more testing and debugging will be needed to repair
__label__pull-up refactoring model for better abstraction lots of duplicat functionality from opmobject and opmprocess united in opmthing
__label__inline refactored infinispan cache wrapper hieararchy all wrappers should from now on keep linear hierarchy according to infinispan versions one wrapper per plugin each feature should be implemented by separate object wrapper and feature can be enriched separately code from the core wrapper moved to lifecycle and basicoperations these are not features wrapper should only hold the caches and orchestrate features infinispanwrapper now can work as multi cache wrapper as well see stresstest usebuckets
__label__inline removed getchildren from diffnode because it is not really needed
__label__move java move rule signaturedeclarethrowsexception from typeresolution to strictexception replace existing rule with the typeresolution based implementation
__label__move revert vishal moved display logic out of patient class this reverts commit ba ecef e ceff da f ca f f b
__label__push-down caching refactoring
__label__pull-up boleto refactoring tirando interface datas
__label__extract resolves test failures and adds a test for 
__label__rename readablity and supportability improvements includng code comments renames and refactoring motivated by code review feedbacks
__label__push-down rf change in api
__label__inline tp moved version checking from handlesinglemessage and handlemessagebatch into receive tp implements both receive inputstream and receive byte baseserver discards length bytes if no receiver callback has been installed tcpconnection now doesn t create intermediate buffer but passes the input stream directly to the receive callback gossiprouter routerstub now implement both receive callbacks pubclient pubserver now implement both receive callbacks roundtrip receive never used correct offsets to read data
__label__extract logging added
__label__move pmd refactor pmd main class no functional change this refactor is focused on reducing the amount of responsibilities of the pmd class therefore all thread manbo jambo has been moved to separate subpackage and the algorithms associated to the mono threaded or multithreaded strategy were also moved into two separate classes as they share a common signature and some code an abstract class was also added a large amount of code were moved out of pmd class to a rulesetsfactory utility class here again to reduce coupling and scope of responsibility at last pmd class now has two fields the configuration object as before and a new object called sourcecodeprocessor which is in charge of processing source code anyway those changes are pure inner refactoring and should be harmless to project such as pmdeclipse or the maven plugin however as any good plan tends to go boum the minute you state i love when i a plan come together please let me know if you run into any issue with theses changes i ll do my best to support you git svn id baf d a c fc e d
__label__push-down adds more tests for the retrieval tool adds the option to specify a store id adds number of attempts to the output file various other small fixes refactorings git svn id ed cd a f c be b fe bcb
__label__rename lots of refactoring again to make everything homogeneous introduced the new one in parallel of many renamed related into owned added referenced which is not needed in the code but could be further optimized model instantiation by storing info into classinfo corrected a few npe risks
__label__rename rename builder method
__label__pull-up some refactoring
__label__push-down fixed 
__label__extract added support for parametrized logging similar to how slf j api signed off by manish kumar
__label__inline initial redesign of the classic request execution chain git svn id f bb ffa edef 
__label__extract add a providesinto set map optional multibindingsscanner that allow users to annotate methods in a module as elements that can contribute to a multibinder mapbinder or optionalbinder created by moe java moe migrated revid 
__label__pull-up superbuilder tobuilder moved static helper method to builder impl
__label__push-down some refactoring
__label__move df refactored hooks and fixed tests
__label__rename rename attributes
__label__extract refactoring to extract method so that it is easier to subclass thetopleveltransaction and disable the persistence of data
__label__pull-up removing property duplicationmethodproperty and fieldproperty have a common superclass but had duplicated code between them this commit reduces that duplication and pushes common code into the superclass while at the same time adding some additional tests for the functionality
__label__rename rename public method
__label__rename rename missed field methods to projection refs 
__label__inline improve metrics collectd implementation add some stylistic improvements and small refactorings
__label__push-down refactored rule base classes around rule interface instead of around ast visitor interfaces long term goal is to support additional languages beyond java organized like so pmd abstractrule core rule implementation pmd xpathrule core xpath rule implementation pmd java abstractjavarule java specific rule implementation pmd jsp abstractjsprule jsp specific rule implementation pmd xxx abstractxxxrule language xxx specific rule implementation this is a start there s a much larger reorganizing effort to get things in sync additional work is needed on generalizing xpathrule git svn id baf d a c fc e d
__label__pull-up core multipletestcorrection bonferroni bh fdr ui mtc welcomeview mtc action command refactorings git svn id b f a e b ddf 
__label__extract refactored initial conditions
__label__move disassociate credential type from commons library by moving populate method into utility class
__label__extract extract common code
__label__pull-up pr mpmd refactor excludes to work with both pmd and cpd git svn id f bb ffa edef 
__label__pull-up extend tests to cover resultsreader getnextevent 
__label__extract mant generate a build user xml à la eclipse o added an overwrite parameter in the mojo to overwrite the build xml o updated antbuildwriter to generate build xml could be overwrite or not maven build xml and maven build properties o using import task of ant in build xml so target could be override o updated test case git svn id f bb ffa edef 
__label__rename just the stubs changes hg branch idea rename src lang psi types luaprimativetype java src lang psi types luaprimitivetype java rename src lang psi types luaprimativetypeimpl java src lang psi types luaprimitivetypeimpl java
__label__extract added some test class for encoder some improvements to the elementutils class many improvements adding setter to the encoders classes
__label__rename drop the use of hbase rowlocks for record creates fixes exceptions during wal processmessage were logged in case of create but not update both are now logged because they are the same code i renamed the method putmessageonwalandprocess to putrowwithwalprocessing since with the former it was not obvious that this method was doing the put of the row itself the metric for hbaseaction put is not reported anymore it was only reported for create not for update or updatemutablefields should be readded if of interest git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc 
__label__extract minvoker provide a way to install extra dependencies o added support for relocation of root artifact git svn id f bb ffa edef 
__label__push-down refactoring core components
__label__inline removed the plan package which was only used for find queries by inlining its functionality into findquery and a new class compatiblerelationgroup
__label__pull-up added support to keep cursors across multiple captures api cleanup mostly in the tools moved properties to anonymous project todo somehow tools are getting incorrect parent frames null this causes their properties to be destroyed
__label__push-down css a css transition will be created for every property that supports transitions even if no transition is set the automatically set transition will finish in an instant this is necessary to properly get from a rule with transition to a rule without transition
__label__move refactoring towards generalizing all triplerelation using code to noderelations
__label__extract  added support for multiple profiles in plugin xml and added jbpm full and brms profiles
__label__move split doc save method and move part out of script service
__label__pull-up remove duplicate code when handling ping simplified constructor
__label__extract nrepl input area added a hopefully working auto eval on enter feature
__label__extract fixes hyperloglog builder improvements we cannot make the constructors for the builder match hyperloglog without risking behavior changes downstream but we also have no default constructor for either and adding one could be contentious therefore i have added static with methods this somewhat goes against the expected builder pattern but it s not as though hyperloglog builder was really following it anyway there is only one setting so it is closer to just being a supplier additionally it would have been a little silly to also implement non static with methods since the code would look exactly the same for both lastly the builder now performs eager validation of rsd log m this leads to extra validation calls but i can live with that
__label__move icy let you select appropriate importer when multiple choice are available loader many changes to provide better support on fileimporter and sequencefileimporter classes fileimporter acceptfile method now use path parameter layers panel opacity setting has moved at bottom support custom setting panel per layer overlay getoptionspanel sequenceutil c z t merge operation now preserve metadata added getsubsequence sequence roi double method user email information stored in preferences some refactoring imageloaderdialog loaderdialog imagesaverdialog saverdialog loaddialog opendialog others minors improvements bug fixes and cleanup
__label__push-down rewrite transformer to make position availabe to executionlog
__label__extract hv fix value extraction resolution logic for forced and implicitunwrapping
__label__move major refactor to bring all youview publisher codebases up to the latest granular task based pattern lovefilm unbox code is now using the granular interfaces all code moved across to task granular tasks and generators old non granular generator code removed non task based scheduled tasks removed
__label__extract lots of refactoring moved unit tests around added support for object expansion additional code clean up
__label__push-down reworked processor object optimized the number of thread used by the application limited on win jvm added threadutil runsingle to run a single instance of a process same as the previous bgrunsingle sequenceutil scale now correctly update pixel size information fixed xlsutil error message cleanup
__label__extract extract helper methods to separate classes refactored towards composed method
__label__pull-up moved paged virtual collection cache algorithm to utility class pagedcollectioncachebase
__label__pull-up remove subclasses of vertxhandler and only keep this class
__label__extract splitting record scanner rest tests up into different test methods forgot to upgrade guava version git svn id svn ssh dev outerthought org outerthought lilyproject branches scanners b d f e bd e a dc 
__label__extract fixed layout in gmobjectframe and timelineframe using grouplayout manager and extracted actionlist and related code to separate classes see also r and r git svn id f f bc e be cd 
__label__rename rename metrictype to metricattribute this is a more common terminology for this enumeration and it was introduced earlier in 
__label__pull-up refactoring java code generation utils
