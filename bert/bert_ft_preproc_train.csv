Commit message,Class
fixed bug where rulesets were not being disable properly also added comments and refactored a little git svn id baf d a c fc e d,inline
a few minor improvements to probes,push down
rf remove unused formal parameter,inline
sgf provide support in the sdg xml namespace to load a pre defined data set using gemfire snapshot service for development and testing purposes refactored the snapshotapplicationevent into separate applicationevent classes to handle import and exports refactored the snapshotservicefactorybean class to handle import export snapshotapplicationevents in onapplicationevent snapshotapplicationevent added integration tests for the archive file handling capabilities of the snapshotservicefactorybean snapshotserviceadaptersupport class added additional unit tests,pull up
removed usage of the deprecated method collection keys,move
adding metadata links,extract
cleaned up api user dao,inline
renamed loggercontext s reset method to shutdownandreset,rename
rename typename to seriesname and make its value series name rename mapname in mps to mapdescription as its value is taken from description git svn id d f ee a dfeeeb ,rename
a tremendous patch from wouter to move lots of things over to the new rule xml test format git svn id baf d a c fc e d,inline
splitting the filetokenfactory into two parts filetokenfactory does the basic translation databasefiletokenfactory adds a few extra functions that depend on knowing which daemon the database module resides at,push down
o refactor the creation of title and summary for the report into a couple of common methods in the parent git svn id f bb ffa edef ,pull up
some roomframe ui updates objects tab added a resourcemenu for adding instances applied a preview for chosen object s sprite consider adding a tooltip or something to enlarge the image removed the tabbedpane since all that was needed was a resourcemenu tiles tab defaults to edit tab since that s the only tab with components when components are added remember to switch default back back over git svn id f f bc e be cd ,inline
checkpointing work in progress need to add migration and strip out old api cruft,extract
and add the new app filter to the grouped activity page,extract
jcbc support more parameters for n ql query motivation it makes sense that some request parameters from n ql specification be tuned by the user offer an api to do that for relevant parameters modifications added queryparams following the parameter object pattern to allow to set various relevant query parameters for n ql added consistency enum added unit tests to check the produced json query and the coherence of the api added method on jsonobject to remove an entry from the json by key result users now can further tune their n ql queries with relevant parameters change id if f a c a c adfdac a cc e reviewed on tested by simon basl√© reviewed by michael nitschinger,pull up
benchmark stages now separated into their own namespaces removed all the separate symlinks to xsd files replaced by single symlink to schema directory moved radargun xsd to radargun benchmark xsd fits better to the urn radargun benchmark namespace moved radargunscenario xsd to radargun scenario xsd and changed the namespace to urn radargun scenario core stages are now in radargun core xsd reduced code dependency on directories lib dir annotatedhelper renamed to classpathscanner now scanning whole classpath,move
processors moved to core core many renames testfactory testconfig tab csvanalysisreasource xmlanalysisreasource started git svn id b f a e b ddf ,move
a few small code cleanups and simplifications,pull up
simplified getdigest,inline
added get usage json for witness and set,extract
arqajo removed dependency on javassist,push down
extracted method that determines the metrics value,extract
many refactorings always use dyn getprop for scope resolution extracted hasownproperty helper removing all the dynjs scope proprietary calls,extract
inlined those clicker clickontext methods which were wrappers for the actual clickontext method,inline
the rendered decorator is now passed through the contentprocessor to to further process any tags added by the decorator this allows decorators to be built with tags and treated as content rather than having bindings for templating languages jsp velocity some cool side effects of this no more never ending list of templating systems to integrate with works in the same way in web apps and offline it s just so simple overview of changes introduced sitemeshwritetagrule which handles definitions in decorators and merges in the content renamed to sitemesh context object now has a getcontenttomerge method which is used by decorators when they need to get access to the underlying content content now has a processed property which is the default output post processing previously this was implicitly body just making it more explicit note this changes introduces a bug and a bunch of test failures around the tag these will be resolved in a follow up commit this change is already very big and will not be pushed upstream until fixed,rename
extract test tomcat setup to tomcatbuilder,extract
renamed getpropertyclass to getinputpropertyclass javadoc revisions to componentsynchronizepeer and abstract implementation,rename
un implement encfsfileinputstream read on some runtimes the readblock implementation ended up recursively calling into read byte since the call into super read byte gets reflected back into encfsfileinputstream resulting into infinite recursion as a lame solution removing read byte int int from encfsfileinputstream and calling fileinputstream read byte int int from readblock,inline
fixed format and renamed getbackingstore to getstoreinternal,rename
rename access restrictions from restriction to access since restrictions will be something else at some point git svn id d f ee a dfeeeb ,rename
added file based rel record updater moved forward rel id handling to a later stage,move
mv class code to package org dcm che data dcm che jboss sample remove startup flag for dicomconfiguration singleton ejb deviceservice add templates parameter,extract
various changes to the pull request from uoccou cleaning up things removing commented out code removing unused fields imports removing specific bits some refactors to make the jena bits as independent of the sql stuff as possible though this still needs some work sdb and tdb really will end up needing their own factories sdb at least and moving the sql bits into their own directory rather than having them in the core,move
added mapdisplay getlocation x y,extract
refactoring of relay package extract android to own projecttests not changed yet,extract
admins should be able to create accounts based on existing patients,extract
merge r pbrant changes to head,inline
agova removing generics to ease control of the framework first version and new test it also makes the oauthappsettings the entry point of configuration again,inline
lots of comments some interface cleanups remove class implementation,pull up
hv move the mapkeyextractor to the default valueextractors provided,move
move sendpdulength receivepdulength maxopsinvoked maxopsperformed packpdv from applicationentity to connection replace connection dimsersptimeout by cstorersptimeout cfindrsptimeout cechorsptimeout neventreportrsptimeout ngetrsptimeout nsetrsptimeout nactionrsptimeout ncreatersptimeout ndeletersptimeout rename association nevent to neventreport,rename
added ability to set jmx attrs via probe sh ,extract
refactoring of some method added enums for operators and modifiers,inline
very minor refactoring,pull up
rename rrc credential to multiple use more familiar name for authentication,rename
refactored the archivebuckettest all tests are now green and they make sure that the directories created are removed,extract
renamed to show that it s for online players only it will go null if offline,rename
if number of substitutions of candidate type is zero then this type is not removed as it seems to be a root type fixes conversion to plural form now features better property customisation check fixed broken argument processing xml marshaller in unit tests is now schema enabled added more xmls added case for xsd anytype improved line and branch coverage updates readme with respect to future release,inline
metrics add configurable obfuscation of jms headers attributes and or properties,extract
support for her allow adding seeds recovery journal like uri data at any point in crawl via action directory her support case where millions of seeds abstractfrontier java move sourcetagseeds setting to seedmodule trigger and schedule seeds via seedmodule s announcements and seedlistener protocols statisticstracker java implement seedlistener use processedseedrecords as list of all seeds processoruri java defaultprocessoruri java geturi convenience accessor for plain uri string surtprefixeddeciderule java use seeds as prefixes via seedlistener notifications rather than separate scan of seeds source text seedlistener java simplify to notifications of new seed and nonseed text mixed with seeds as with surt directives seedmodule java methods for seedlistener interface announceseeds acton file textseedmodule java eliminate interators add methods for announcing seeds and scanning seed text sources including arbitrary files prefixset java surtprefixset java derive from concurrentskiplistset eliminate now unneeded extra synchronization and clone s offer considerasdirective for direct application of directive strings,extract
refactor model to include a very basic representation of a person probably just a link to wikipedia for now,pull up
fixed optional protocol dialog refactored code,extract
added writerequestqueue to abstractiosession because most implementations needs it removed getwriterequestqueue from iosession final implementations git svn id f bb ffa edef ,pull up
refactor out the abstract class overlayendpoint and use it to share functionality between overlaytransport and service connection,pull up
add support for infinispan remote listeners added support for ispn remote listeners code refactoring of cache listener added ispn hotrod service and server config file,push down
run truth subject tests under j cl changes includes having the expectfailure to implement a wrapped interface of testrule to allow gwt swapping add basesubjecttestcase class for subjec tests to extend which setup a expectfailure in before and ensure failure caught in after add a small build rule similar to gentestrules but for j cl tests migrate two subject tests as a start to prove the concept relnotes n a created by moe moe migrated revid ,extract
move components from to core,pull up
arqgra grapheneelement can not be used as root fixed grapheneelement can be now used as field type for page fragment root it required couple of refactorins i had to extract interface from grapheneelement because proxy which is created for it needs that interface in the list of interfaces which it should implement i had to rename the implementation to grapheneelementimpl grapheneelement is wrapped element i had to add to the wrapperenricher conditional code which would take into account the grapheneelement it is ugly bit imo only only solution right now,push down
process both orderings dvd and airthis is in service of issue let s look at a few episodes of the show robot chicken i refer to season and episode number information like s e as a placement episode title dvd placement aired placement western hay batch s e s e triple hot dog s e s e joel hurwitz returns s e s e hopefully salt none s e yogurt in a bag none s e so if a user has a file robot chicken s e mp and the renaming rule says we should add the episode title to the filename which title should we add our answer as of now is it should be the former simply because we have a blanket policy of prefer dvd ordering so if we prefer dvd ordering should we look only at dvd placement no some shows simply don t have any dvd information not every show gets released on dvd but beyond that many shows as the robot chicken example shows have released some episodes on dvd but not others what if we see robot chicken s e mp we still prefer dvd ordering but there is no episode with s e as its dvd placement but there is one with s e as its regular placement so we use that one we prefer an episode that matches the season and episode number in its dvd ordering but we will fall back on the over the air placement if no episode meets the criteria we implement this by building an index previously the process was we iterate over all known episodes if it has a dvd placement we try adding it to the index at that place if it doesn t have dvd placement we try using the over the air placementso western hay batch would be entered into the index using its dvd placement s e since yogurt in a bag doesn t have a dvd placement it would be entered at s e we would try to add joel hurwitz returns to the index at s e it s dvd placement as for hopefully salt we would try to add it to the index using its aired placement s e so there s a conflict the behavior as of the previous release was we d panic log a message about the two conflicting episodes and put neither of them into the index note that such a conflict only happens when two episodes have the same preferred placement which only happens if one of them has a dvd placement and the other one doesn t it does not happen every time that the dvd placement disagrees with the over the air placement for example western hay batch and triple hot dog both could be mapped to s e but s e is not the preferred placement for triple hot dog so there was no conflict this commit introduces a class episodeoptions now a placement is mapped to an instance of episodeoptions rather than just to a single episode now when we iterate over every episode in show we always add both placements to the index dvd and over the air we don t reserve over the air for a fallback any more and we remember which placement is which because the episodeoptions class preserves this information then when we look up an episode in a season we say whether we prefer the dvd ordering or air ordering there is always a fallback when doing a get you will get the ordering you asked for if such an episode is there but will get one from the other ordering if your requested ordering doesn t have an episode as of now in the application we only get with a dvd preference but that may change in a future commit we are already able to get non dvd episodes in the test harness so going back to our example this ensures a deterministic answer for s e it will be the dvd s e because that s currently the preference this also ensures a deterministic answer for s e it will be the air s e because no dvd s e exists we now have functionality to extract hopefully salt as s e it just isn t yet exposed to the userthe code would allow the same episode to be the only episode mapped at two different places in the index it also would allow multiple episodes with the same placement even with the same ordering neither of these things should ever happen but the code doesn t check for it and is prepared to handle it if that s the data we get from the provider,extract
nxp refactor route import tests to have an exploded zip in the sources fix tests,extract
overenthusiastic refactoring united listeners under statelistener interface moved listener management under stagebase class moved shared functionality from monitors to abstractmonitors class replaced interface adapters with default interface implementation added some javadocs refactoring on monitorstartstage,move
major refactoring the jdbc package was in pretty bad shape and was extremely hard to modify some of the changes made to fix this were o refactored the jdbcmigrationcontext so that the source of connections is abstracted a basicdatasource that wraps a connection has been added to support environments without access to a data source o all database specific configuration options are now set on the jdbcmigrationcontext the patch path is set on the migration launcher o fixed the way that database connections were being closed the old way caused pooled datasources to hang o less connection passing every class can obtain its connection from the context o put the concept formerly known as dialect into it s own class databasetype o added support for oracle this turned out to be a pain since the oracle jdbc driver doesn t support multiple statements in a single statement execute call like postgres does o renaming many of the old names didn t make sense i tried to make the changes as backwards compatible as possible but i haven t tested this with an existing application you have been warned this whole thing needs to be repackaged under net sf autopatch at some point,push down
cleanup in graphs removed cross package graph simplified class graph,pull up
moved accessors from tcp tcp nio to basictcp,pull up
jfg add testenvironmentrestcontroller extract all exception handlers to globalcontrollerexceptionhandler refactoring add testenvironment model dao and service add new unit tests disable some checkstyle checks,pull up
added an abstraction layer for connectionless polling acceptors abstractpollingconnectionlessioacceptor datagramacceptor now extends abstractpollingconnectionlessioacceptor git svn id f bb ffa edef ,pull up
added negative test for porperty access from static code re write of functiondeclaraton and functionexpr so that functiondeclaration delegates as much as possible to a child functionexpr fixed this handling in local functions commented out testbind testbindnonexistentmethod this test does not work in flex need to rewrite this somehow as native methods are not allowed in user code note that testbind testnotbound also does not work in flex in flex a method is always bound all other tests green,inline
restructuring of the way moo classes interact felt too tightly coupled needed to split create from update in the translator to make it happen,inline
added foreachjsonschematransform renamed json model methods returning maps added methods returning collections for easier use in freemarker templates git svn id c b a b b d e ,rename
refactoring move xml code to epubprocessor move epub cleaner code to epubcleaner,pull up
loads of uplayer mplayer renames,rename
starting to refactor the fastpath handler make stuff private etc,inline
simplified differ implementations be moving circular reference detection to delegator class and got rid of the abstract base class good riddance,move
bug clean up and expand model validation also begin work on adding support for connections to extension point,inline
rewritten the state cla b b ss so that we can gather the information we need to obtain the correct bit widths implements the same cases as before git svn id d f ee a dfeeeb ,inline
sramp simplified test cleanup non nls x,inline
add subject isinstanceof class and isnotinstanceof class created by moe java moe migrated revid ,extract
added support for file selectors to the unarchiver thisallows to restrict the extracted files pr plxcomp ,extract
refactored samplepatientorder to move stuff out of the heap and added tableidservice,move
rf samples refactor,push down
added channel value to assaynodes for multi channel micro array experiments,extract
added reset to candidate ass service refactoring,inline
introduced configurable categories per assembly default categories are assembled and included,inline
further cleanup of statistics and other visitors removal of a now unused interface removal of some warnings,push down
faces develop portal navbar portal nav and portal navitem components faces develop portal permissionsurl component refactored to use new abstract portaltagrenderer parent class faces develop liferay faces showcase added use cases for portal navbar and portal nav,pull up
refactored the combinefn infrastructure,push down
refactor to introduce the direct client concept,push down
added tests for buildstepoperation,extract
vandana renamed a few methods,rename
pr massembly massembly fixed massembly by introducing a new assembly element which works like a i deleted unused methods parameter and need not deprecate them bec they have not been released yet added some test harness classes for testing the processing of git svn id f bb ffa edef ,push down
add better support for keypath visibility properties convert no details eo s to id pk format instead of pk delegate attempt to load default rest delegate names restentitydelegate to make registration easier put request handler session fixes from ajax s jsonrequesthandler into restrequesthandler added some convenience registration methods to erxrestrequesthandler added some misc javadoc ified moved some generic rendering methods up higher to support generating alternative output formats,pull up
refactored aop code to allow for other aspect frameworks besides aspectj to make use of the code,pull up
simplify a bit asyncfileimpl,inline
move newnumber to confignumber rather than abstractconfigvalue,push down
added convenience methods to abstractverticle and renamed loaderhelper back to servicehelper,rename
fix regression in lifted semigroup sum move lifted definition in monoid,move
tools timing refactor timing tables fix cmp cache miss timing,push down
extracted method buildqueryuri so that future queryexecutor implementations can get the uri object and eventually change it before turning it into a string,extract
sonarjnkns rename enforcegreen abortpipeline,rename
fixes paging numbers padding on empty private group and other minor items,extract
move send receive code from smtpsession to textprotocoltester this moves the protocol independent send receive code from smtpsession test to textprotocoltester reducing some of the duplication this also removes the final quit command and the check for the connection teardown etc because textprotocoltester can t handle that at the moment,move
created lists for persons and scenarios little changes in other pages title imports etc update facade and service for person renamed for scenarios,rename
update translator rename,rename
forgive me god for i have sinned doing more than one changed in a single commit added dependency injection for opmobjectinstancevalueanalyzer and refactored some methods in the analyzer class,push down
added secondary table support for cassandra ds client,extract
some refactoring in multivalue object editor start of iospecification custom property editor simplify,extract
eventframe frameselector bugfix hack refactored lgm loading load paramters fixed bug where frameselector was empty on load or new game t simply destroy and recreate eventframe so it s a hack seems to be caused by selector not being informed of new root node refactored and rearranged lgm startup a bit mdi created in its own method now creation methods now return component for later adding preload method to load files passed in from parameter list t does not attempt to recover on failure consider making listener load more modular so preload can be done via a call through it extracted some duplicate code from listener s load and new methods to lgm reload git svn id f f bc e be cd ,inline
improved give command closes ,push down
cleaned up some code externalised some strings mdimanager moved listening code to inner class clistener to avoid empty interface methods messages properties organised the gamesettingframe strings into tabs gamesettingframe externalised new strings that i forgot about this is part of a part commit git svn id f f bc e be cd ,move
open issue flexmojos move test runner into a separated component ,inline
added reset users action,extract
added an example of configurable fieldpopulators and made it work,extract
remove old matsimsimulation and move the functionality into the plugin,move
clean up version of tokenstreamfactory to be upwards compatible with one,push down
refactor resources with java features fixes ,push down
changed way in which on upgrade works dbopenhelper onupgrade method is now final you will now have to override a new method called onupgradedatabase updated copyright added methods to get the table name and column names sqlhelper class,extract
refactored integration test classes slightly,pull up
move sharedloglogic specific getcheckedoperations from superclass move operation resolving to abstractloglogic,push down
rf controlers refactoring,pull up
rhogen wizard src rhogenwizard rhohub tokenchecker java token dialog was changed to login dialog,inline
further improvements to n i testpart rendering now does testpart feedback xslt tidied up a bit more renamed xslt for testpart feedback updated simple ni example a bit more,rename
moving the block of code in the main method of sesamequeryutils which were eyeball pseudo tests into some actual test cases,move
refactored kind hierarchy,push down
major rewrite of the command line tools with simplified logic less duplicate code and some minor new features allow running of d r server just with a jdbc connection allow running of all tools just with l dump sql dropped m j switches on dump rdf just provide naked file url add verbose and debug switches consistent error reporting introduce systemloader class as central factory facade improved consistency of base uri handling changed initialization logic for d r server,inline
review the view creation for base maodel fxml and simple also manage autorelease for all models,push down
removed resource model classes since it is an antipattern bad for performances each inheritance level generate sql joins update samples apps and identity manager according to that include baptiste and loic improvements for update controller method replace kazan specific password generator by spring security one add an exception mapper for alreadyexistingentityexception use raw types instead of responses in genericcontroller hg enter commit message lines beginning with hg are removed,inline
remove the need for explicit row locks when allocating uids the existing code with explicit row locks exhibited very poor performance and also prevented multiple tsds from allocating uids concurrently the new approach consists in performing an atomic increment to grab a new uid cas ing compareandset the reverse mapping uid name cas ing the forward mapping name uid if we die after step we waste an uid if we die after step we just end up with an orphaned reverse mapping harmless when two tsds race to assign a uid to the same name one of them will fail to cas the forward mapping at step and will retry to find the uid assigned by the winning tsd when that occurs the only net consequence is that a uid will have been wasted by the losing tsd whereas the previous implementation wouldn t waste one when this happened the uid fsck command can easily detect orphaned or wasted uids and we could conceivably put them on some kind of a free list in the future to re allocate them if two tsds are running side by side and one uses the old method while the other uses the new lock less method things still work as expected there are two possible scenarios old tsd goes first locks the maxid row and does its thing the new tsd will have to wait until the row lock is released for its atomic increment to go through the new tsd goes first atomically increments the maxid row and does its thing the second tsd locks the maxid row and proceeds to allocate its own id concurrently,inline
renamed api methods into nicer forms now that we allow full operator overloading,rename
model changes we discussed over the past two days,push down
first refactor of tal support,pull up
extract json instance loader ,extract
rewrite of queryresultparser to fix issue ,inline
rules can now use violation specific values in messages specifically variablename methodname classname packagename minor tweak to javaruleviolation to report a variable name for astvariabledeclarator fields added java optimization ruleset rule redundantfieldinitializer submitted by lucian ciufudean git svn id baf d a c fc e d,extract
fixed merge,inline
massive refactoring to exception handling i m trying to simplify things but they are currently a little bit more complicated i ll do another round shortly the main benefit of this change is that now all of our error handling flows through one class errors java it takes care of managing the current source line managing the current injectionpoint building messages tostrings because of this refactoring we now use almost exactly the same code for both provisionexception and creationexception the consequence of this is that provisionexceptions now include a full error report all of the classes injected fail fast but not too fast now applies to provide time as well as injector create time i also made injectionpoint into a public class in spi it replaces dependency i like this change because dependency is a very abstract name whereas injectionpoint is very guicey guice injects stuff dependencies are a consequence of this but i like the api better exposing the core guice abstractions directly this entire change needs further doc simplification and cleanup todo git svn id guice googlecode com svn trunk d f a b b b d aecad e,inline
arqgra page fragments implementing webelement interface delegate interface invocations to root a page fragment can be declated asbtract when implementing webelement interface then all method invocations on such page fragment will be intercepted and those which are from webelement interface will be delegated to the root of the page fragment locationenricher the creation of the page object was improved now it is using the method from pageobjectenricher to do so support for declaring page fragment as abstract class not added cause it requires more changes in the code,inline
added first draft of multi tap recognizer,extract
clients refactored,pull up
clean devutils makeoptions,inline
more refactoring upversioned to ,pull up
task started to extract and improve interpolation of features frommoduleinterpolator,extract
fixed another regression during refactoring git svn id f bb ffa edef ,pull up
closes ,move
removed support for kerberos authentication made always lax previously called lazy and removed support for explicit lax connections used parameters to merge test classes with different setup into one test class some general code cleanup,push down
fix biome rendering,push down
 add support for android refactored property loading writing to be osgi service based and extensible the actual android support will be supplied by a plugin,pull up
added servicesview extension point to support future support of change id i cbe dfaa a b ab e c f,extract
runtime model enhancements added tags and attachments introduced specelementinfo base class added ispecificationcontext getcurrentfeature and getcurrentspec added specinfo package renamed specinfo isbottomspec istopspec to avoid groovy naming conflict with getbottomspec gettopspec,push down
fixed dependency injection according to this specification the basic idea is that if an object depends upon having an instance of some other object then the needed object is injected into the dependent object for example being passed a database connection as an argument to the constructor instead of creating one internally source oriented design some design principles and strategies,inline
jenkins configurable issue priorityid typeid and actionidonsuccess motivation when jenkins creates a jira ticket the priority and type ids are hardcoded and may break ticket creation as noted in jenkins modifications allow the admin to configure issue priority id and type id from the jenkins job configuration allow the admin to configure actionid on success which allows the plugin to automatically resolve or close tickets result support for jira where the type ids are different and greater flexibility when setting up workflows,extract
do work inside getmovetopath previously fileepisode had two methods a private one called getmovetodirectory which composed a string from the user specified destination directory replacement template and the information we ve found about the file and a public one caleld getmovetopath which basically called getmovetodirectory and turned the result into a path this made some sense since we work with strings a lot all the various components are strings and we need a string to put into the resultstable still the point ultimately is to move the file so the actual path is pretty important plus using path resolve seems better than concatenating strings with file separator string we still need the strings but switch it around create the path object and use tostring to get the string version,inline
add unit test and refactor pushcommand,extract
split resolvesource from substitutionresolver and configsubstitution this is part of a plan to remove substitutionresolver moving the memoized hash to resolvecontext and to move the replacements functionality to resolvesource should be clearer,move
 wip integration tests moved to separate module with junit ,move
large documents no longer causes exceptions in mongodocumentio s cleanup adds a new test file for mongodocumentio which does not require a live mongodb instance,extract
adding colour coding to grammar line,extract
removing internalcall to reduce internal stack usage a little bit,inline
renamed sessionhash sessiontoken,rename
added model visualization after deserialization,extract
hh don t change grizzly default iostrategy,inline
add parameters when calling pay on an invoice,extract
faces prepare for osgi by moving impl classes to internal sub packages in order to clearly distinguish api from implementation reduce api in inputdatetime components by removing methods and making methods final,inline
refactor basiccfindscp,pull up
extractormultipleregex javarefactor for readability,extract
refactoring move methods that are not directly related to announcements to a utility class git svn id f bb ffa edef ,move
a bit of work on the symbol table class names are now recorded in the globalscope come to think of it they should probably be recorded in sourcefilescope or some such interim layer instead to allow for private inner classes at any rate that s where they are for now i also pushed some stuff down from abstractscope into localscope where it seemed to fit better removed a useless unit test added some good ones generally making progress towards fixing the unused private field false positive when inner class private field is referenced from enclosing class git svn id baf d a c fc e d,push down
 refactor marker resolutions and quick fixes change id ibdcc cf cfbb fd c ba ce cfb c cb signed off by anton tanasenko,pull up
change id i df a dffe a b bd ffc ,push down
renamed async vertx static factory method to vertxasync and provided tests,rename
rf add unique copyable enforcements some clean up in fieldtype hierarchy,pull up
rename requestcontext getrequestedpath to getrequestpath,rename
warning eliminations hazard model generations removing aml,pull up
use abstract class interface for anytypedeclaration hierarchy remove one breaking api change,push down
open issue flexmojos move test runner into a separated component ,pull up
removing disabling old rowlog code the rowlog related packages have been removed completely global rowlog tools rowlog visualizer and the kauri rowlog module all references in pom s to the rowlog have been removed if you grep the code there s still quite some rowlog traces left tests which relied on indexing happening or that test the linkindex have been commented out compeletly they would not run anyway and there s little advantage to making them compile with the references to the rowlog left in place it will be easier to migrate them to the new solution same holds for the rowlogmessagelistener s the indexupdater the linkindexupdater things that need adjustment when the new rowlog solution is in place are marked with fixme rowlog refactoring,inline
setting clearing enctype in invokeaction in addition to appendtoresponse form s appendtoresponse will not fire in case we add erxwofileupload via update container inside form,extract
arqgra renamed sizzlejspageextension to jquerypageextension,rename
resolveentityreference made private and moved from webutilsservice to treenodeservice,move
minor refactor git svn id f bb ffa edef ,pull up
add mdr not written out as it breaks send to device probably needs some or all of the associated x sections git svn id d f ee a dfeeeb ,extract
move server configuration to server,push down
renamed vdiff to fvdm,rename
get rid of redundant private randomvectors method and rename it in vectors class,rename
wcet new improved implementation of callgraph works fine with receiver type analysis now cleanup and docs for frontend package,pull up
mrelease refactor to use a generated release descriptor instead of the release configuration class submitted by jeremy whitlock git svn id f bb ffa edef ,pull up
move simpleservlets to webapp web directory,pull up
balajin not using updatescope in the contract between patientwebservice and patientservice moving treatmentcategories to refdata removing patient as a dependency in validation and mapping,move
move the custom utf decoder into a subclass of encoding add support to the utf decoder for unicode code points above u ffff represented as a surrogate pair in java these values can be generatedby the backend from the reverse path is already handled by the jvm s ownutf encoder add a number of unicode encode decode tests to make sure it s all working,push down
ui tests refactoring,pull up
jcbc adding support for spatial view queries this changeset adds the capabilities to query spatial views queries work with and without documents but not for reduce queries the tests have been refactored out to a new file for better encapsulation change id i e f c e d f d f c a reviewed on reviewed by volker mische reviewed by michael wiederhold tested by michael nitschinger,pull up
logtool initial work for supporting the new param annotation with some major refactoring,push down
gui tests refactoring multipagechest support,pull up
refactor cache a bit,pull up
enhanced sslcontextbuilder added privatekeystrategy interface to enable customization of private key selection more ssl test cases git svn id f bb ffa edef ,inline
added check for logged user added behavior for storing data during tab change for repeatable fields and autocompletable fields weather and temperature fields must be enhanced as well,extract
enunciate renamed json specific overloads of enunciatefreemarkermodel add to avoid accidental calls to add typedefinition add jsontypedefinition addjsontype add jsonrootelementdeclaration addjsonrootelement git svn id c b a b b d e ,rename
refactor basiccstorescp,inline
rewrite plugin creation code,inline
rename varables correct return value of getter in graphrep,rename
hv moved collection of failing constraints to constrainttree,move
add filesystem support to libvirt functionality allow mapping of kvm host filesystem into the guest domain refactor various libvirt xml functions,move
cleaned up examples added comments and javadoc added some examples,extract
massive refactoring to separate unit tests from integration tests,pull up
added connectors removed edgeroles,pull up
sc qcadoomes refactored production scheduling and some other fixes,push down
renamed exporting classes ,rename
updated concepts version to also moved functionality related to concepts version in dictionary class,move
nxp cleanup rights on public private social workspace cleanup unit tests,pull up
chunk change logic is now good enough moving it to the mainlistener,move
 refactored cpu test suite,inline
created first version of linkedhashbimap not tested yet,push down
more work on database bug fixes,push down
pulled makeremoterequest up,pull up
jfg session scope plots have been added to the webui with follow features tests are sorted by startime pause between end of previous test and next test also considered,extract
ellipsoid rename constrict to contract,rename
use apache tika for all default text extractions cleaned up error handing append correct extenstions,inline
roi added group field basically to allow grouping roi for specific operation added getlength sequence method to compute length perimeter with sequence pixel size information added geteffectivedimension dimension method added unselectallpoints method moved some methods to roiutil much more interaction with d vtk display can now move and modify roi directly through d view roi d added support for z dragging operation some cleanup and tweaks roi dshape many changes to add interaction with vtk rendering safer vtk rendering roi dpoint better vtk rendering roi darea safer vtk rendering fixed a small issue where vtk display wasn t correctly updated on drag operation other minor tweaks and improvements roi d added roi dpainter class for easier display and interaction for d roi added isoveredge method added roi dshape abstract class for d shape roi added roi dpoint d point type roi added roi dline d line type roi added roi dpolyline d polyline type roi added roi dstackshape abstract class for d stack shape roi added roi dstackellipse ellipse d stack type roi available from stacking operation added roi dstackpolygon polygon d stack type roi available from stacking operation roi dstack fixed setname methods so children get modified as well deprecated getusechildcolor setusechildcolor methods roi darea safer optimized vtk rendering added roi darea booleanmask d zmin zmax constructor added isoveredge method roiutil moved methods from roi getunion getintersection added converttostack method to convert d roi to d stack roi added converttomask method to convert shape roi to area roi added converttoshape method to convert area roi to polygon roi added getconnectedcomponents to separate and retrieve connected components from an input roi added copyroiproperties to copy properties from an input roi roi action added convert to stack operation to convert d roi to d stack roi added convert to mask operation to convert shape roi to area roi added convert to shape operation to convert area roi to polygon roi added separate objects operation to separate connected component from area roi added manual cut operation to manually cut separate roi not yet implemented added automatic split operation to automatically split roi given their shape not yet implemented roi panel can now modify position size of multiple roi at same time removed copy paste roi link operation gui added a new tooltip to explain where is the main menu added java warning for osx users first menu task is now dedicated to roi operation only removed image open save actions re organized roi creation actions added many roi operation actions anchor d added integer z position information for d position of d roi added vtk display and interaction support allow roi d manipulation with vtk pathanchor d fixed visibility for closing point booleanmask d added getconnectedcontourpoints method to retrieve contour in connected order minor change to make it safer icycanvas added canvastoimagelogdeltaz method this is the z equivalent to canvastoimagelogdeltay canvastoimagelogdeltax methods icycanvas d improved setmousepos method to be safier icycanvas d added methods to handle mouse image position canvas d reversed panning direction from keypad keys vtkcanvas added getworldz point method to retrieve z depth for a given d canvas position added worldtodisplay point d method to convert a d world point to canvas d position added displaytoworld point method to convert a d canvas position to a world d point implemented imagetocanvas and canvastoimage from previous added methods implemented getscalex y methods implemented setmouseimageposx y z methods mouse event now provide a correct mouse position removed the enable picking on mouse move switch vtkutil simplified getsurfacefromimage method icyvtkpanel added proper event consuming systemutil added getjavaversionasnumber method icyexceptionhandler added anti spam protection for report method fileutil added getfiles method to easily retrieve file with a specific extension without using a filefilter xmlutil added filtering to avoid incorrect character in name attribute fields icycommandbutton added setpopup method to enable popup action tooltipframe added support to open external browser when clicking on url roiperimeterdescriptor modified to use the new roi getlength method,move
minor tweaks following review extraction of methods plus throwing upon unexpected data when mapping genres,extract
renamed a poorly named method,rename
changenamespace renameresources moved renameresources method to renameresources and try to prevent concurrentmodificationexception in tdb,move
idea load only those libs which placed under lib directly jdk moved to the start of class path update versions and ,inline
add basic configuration validation ui,extract
rename update with pojo to update merge pojo refs ,rename
renamed methods to be consistent with other resources,rename
renamed getoutputwindow to createoutputview for clarity,rename
moved external type record namespace into encoder decoder config,push down
merge with sync api refactor branch,inline
java using one buffer and flip instead of two in steamsocket java merged getreply and readpacket in steamsocket java deleted spare imports in sourceserver,inline
merged parallel tests branch into master fixes lazy initialisation bugs improves uuid reservoir design and adds tests which now all run in parallel,pull up
split up addlist into two methods and rename lead in methods to atnode,rename
restore tz hints to programmes broadcast around bst gmt changeover the radio times feed previously included hints at the start of programme titles to cater for ambiguous localtime programme start times during the bst gmt transition this patch prepends bst to programme titles starting in the hour before on the day of changeover and gmt to titles starting in the hour afterwards after the clocks have gone back without this change ambiguous localtimes of are generated in the listings and can make it impossible for downstream software to generate the correct utc offset for such broadcasts,inline
now computing real arc length in roadnetwork but not writing it yet some cosmetic fixes moved distance calculation from routearc to coord or should it go in utils git svn id d f ee a dfeeeb ,move
add an interface for a translatable logger this cleans up logging of localized messages additionally for bukkit logging has been corrected so that prefixes are properly applied to log messages,inline
moved mouse over related code to subclass mouseovermousemanager of class defaultmousemanager so that it can be used optionally,push down
added histogramoperationstats and refactored bar chart generation mean and stddev retrieved from histogramoperationsstats seems sometimes suffering from some hdrhistogram bug,pull up
extracting loadclass to allow overriding,extract
added one more class to move the charting logic there this is the kind of code where you have to wonder if java is really helping or getting in the way,move
merged sandobox with main after a looong time,inline
this update is the first incremental check in for it primarily refactors and cleans up the duplicationservice in preparation for adding reporting and error re queuing git svn id ed cd a f c be b fe bcb,push down
ui changes fixed renamer added in selected column need to add select deselect all control now display full path in rename table where move is enabled fixed the renamer where move is enabled,rename
refactored the css package to allow a clean separation from the core,push down
delombok add listimpl class in order to remove duplicates from two classes,pull up
project slimfastrefactored node hierarchy so that leaf nodes text comments scripts etc use bytes vs bytes each,push down
created schedulableentitymanager class updated entitytypetest to add isschedulable method added testcases for cluster schedule resume,push down
make line address parsing generic utility method so i can reuse it when parsing destination address for copy move lines this is a further enhancement on ,move
bz rename method to mention consumer unregister signed off by alexlehm,rename
rename streamrecurrencedates to streamrecurrences,rename
added unit test move class name checks into a central place,move
moved mouse over related code to subclass mouseovermousemanager of class defaultmousemanager so that it can be used optionally,push down
added quote provider that extracts quotes from html tables the feed provider tries to detect a table in the html loaded from the feed url based on the column headers it determines the types to extract values from the table issue ,extract
immutable location and move changes to location services to reflect location subclasses are now immutable therefore add method is depreciated and new implementation of static add to create a new location with updated coordinates haslocation now has a setter to allow locations to be changed through the shared state updated tests location is now stored in shared state via the haslocation interface as the underlying location will change locationservice has new setagentlocation method for changing the underlying location in shared state this function is disabled for participantlocationservice cannotseeagent now a runtimeexception so doesn t have to be checked movehandler updated for new apis,pull up
renamed some jmx attributes,rename
fixed message id in topicsadded method inheritance testrefactored out nevadoqueueconnection and nevadotopicconnection,inline
tidy up with added comments too git svn id d f ee a dfeeeb ,inline
 refactored negotiatescheme into separate spnegoscheme and kerberosscheme implementations deprecated negotiatescheme and related classes git svn id f bb ffa edef ,pull up
various code improvements yea i said that kill me,push down
fix add global annotations to graphs fixed a bug in which global annotations were ignored by graphhandler java and thus were not rendered by gnuplot added async call to hbase to retrieve global annotations when required in a similar fashion as that of queryrpc java note since both graphhandler java and queryrpc java implement similar query processing logic all of this should be unified in the future requires a large refactor to split all query logic with visualization logic signed off by chris larsen,inline
refactor celmailscriptservice with move methods to imailsenderrole,move
added used discovered service id,extract
item retract handled refactored some code,pull up
refactored external resource location logic out of resourcefactoryimpl moved to new services,move
finish support for pulling modules,pull up
hv moving test case to xmlmappingtest,move
manual merge and refactor of geoip,inline
refactoring move job specific handlers to jobsubstitutionhelper signed off by oleg nenashev,move
first commit for moving timer thread pool from protocolstack to transport merged all thread factories into one defaultthreadfactory changed naming of threads slightly,move
also ignore itemevents for refreshobjectcombobox merge refreshobjectcomboboxentries and selection,inline
artif move query paging into the query itself,move
hv pulling gettypeargumentconstraints up to constrainedelement,pull up
icons moved drag and drop interface updated dockables can now be dropped left or right of a single tab git svn id d d e b d d fefcacdf,move
move countingnodetester to examples,pull up
replace area intersect by sutherlandhodgmanpolygonclipper for now this has no advantage but it allows to move the shape merger up in the chain which is needed when we want to optimize wrong angles in shapes img size increases a bit compared to r because filters are not yet working properly git svn id prec coord d f ee a dfeeeb ,inline
output describe environments to file as json abstractneedsenvironment fixed sort of lookup logic moved to abstractbeanstalkmojo instead describeconfigurationsettings templates working with optionals createenvirionment drop cnameprefixtocreate hg branch cnameprefixforenvironment,pull up
working on moving element creating code from the activelayermodel to the cidslayerfactory,move
refactoring to make nexusurl non needed there was a mess this change should clean it up a bit out of strategies we have deferred and direct strategies does not tamper with rest they should be able to work without specified nexusurl in plugin configuration on the other hand the image and staging strategies do use rest former to close and latter fully uses the v rest api of staging now class hierarchy is cleaned up too non client users extend abstractdeploystrategy while client users extend abstractstagingdeploystrategy,pull up
moved checkeventsequence to flushtest,push down
refactor urldata to create a reusable implementation,push down
added callgraph classes lots of bugfixes and extendsions for struct and invokes,push down
some cleanups among refactored command classes moved addintermediatedir method into the base class since it is shared moved addsslconfiguration method into the base class since it is shared between two commands added validation for null check,pull up
classloader refactor,inline
merge makemove and undomove methods,inline
removing repositorymgr gettypemgr usages which led to some repositorymanager l repository refactoring in indexer code,move
refactor,extract
clearcase plugin refactoring pollaction and changelogaction into common historyaction git svn id c de d a be ed b c a,pull up
o moved static methods to an utility class so we could test them o updated javadoc git svn id f bb ffa edef ,move
refactoring matcher lookup yet again,pull up
tools microcode timing analysis version refactoring to support other processors and cmp support for io writes monitorenter monitorexit,push down
created listbucketsendpoint and extracted creation logic ,extract
jvm test rename getname to tostring,rename
fixed null exceptions in the unbalanced assignment inspection refactored the annotator to a visitor and have begun making sure the correct accept methods are getting added hg rename src lang psi impl expressions luadeclarationexpression java src lang psi expressions luadeclarationexpression java,rename
biserver lots of code shuffling around to reduce interdependencies between controllers and the main class embeddedwizard additionally all messaging dialogs have been centralized in one messagehandler controller,inline
method renames adding license headers,rename
open hudson ucm implement scm new polling logic to support rebases better a bit of refactoring refining some edge cases no load rule git svn id c de d a be ed b c a,push down
in progress using massivecraftcore and allman indentation style and minor refactoring,pull up
adding a simple annotation checker which uses isempirecompatible from empireutil actually that was moved into annotation checker but also checks to make sure the multiplicity annotations are used correctly this is sufficient checking for now we have it built in so we ll add checks as i think of them close ,move
refactored ssl tests to use the java api rather than the properties configuration git svn id f bb ffa edef ,pull up
correct interpretation of optdivide oneside and move long side calculation into rectanglevalue for future use there,move
fixed hudson added support for creation removal of dynamic views and tweaks to view removal when a job is deleted renamed or workspace is wiped git svn id c de d a be ed b c a,pull up
rename all the jaxp based xmlreaderfactories to not have jaxp as part of the name jaxp is the default and it just makes it more complicated than it needs to be,rename
experimental and incomplete add code to collect city names and zip codes todo split interval if zip code or city is not the same for all houses git svn id d f ee a dfeeeb ,extract
refactoring util source directory move sdktestcase from util to tests directory remove unused class invalidurlschemeexception inline class noseparatorfindableinpathexception rephrase references to app collection to use the phrase test data,inline
move relatedlinks from content to describedmoves the relatedlinks field and related methods up the hierarchy to described from content so a person has can also haverelated links,pull up
paths are created in a separate function this way it can be initialized with context related stuff like for example the way transforms are handled,extract
 refactoring moving all mapping method resolving stuff to class with own responsibility,move
major refactorin of the models sitemodel is now an interface implemented by defaultsitemodel the old sitemodel and filteredsitemodel designed for things like the spider where we don t show the entire view or fuzzermodel which doesn t show the queries spider s model has been factored out of the spider java class and is now standalone fuzzer the beginnings of fuzzer support also has a proper model i plan to factor out the model from sessionid and fragments eventually too model events are now a proper event class rather than multiple parameters,push down
refactored pipelinebase so it is usable to implement sharedjedispipeline as well,push down
xmlnode rename localname qticlassname,rename
balajin refactoring treatmentcardservice extracting out methods,extract
remove unregister as jena does not support it,inline
rename getcellattributebuilder,rename
move group communication down to jvstm ispn only this commit complements cc fe which first added support for group communication in all jvstm based backends it is considered best for now to keep this backend specific so in this commit we move such functionality to the only backend that currently extends jvstm common jvsmt ispn,push down
added methods on eutils web service to retrieve identifiers through elink queries moved sdf fields extractor classes to chemet io previously on core added pubchemcompoundcrossrefs git svn id research chemet trunk e a e c eb c a a ee ,extract
o refactoring move shared code to helper class git svn id f bb ffa edef ,move
extract settings object,extract
refactored out some common code,pull up
non working beta release developers only i made this commit of the work i have so far however there are a few errors here and there which need to be fixed however i have limited time to fix this so i m asking the community to do it so far problems in fe java around line not all non obfuscated have been checked if they needed some renames workbench java has been disabled due to the fact it needs a rework,inline
arq moved dbunit related settings to its own configuration,move
fixed unit tests failure,push down
enable directio text number format additionally decimal format has been renamed to decimal output style,rename
first commit for moving timer thread pool from protocolstack to transport merged all thread factories into one defaultthreadfactory changed naming of threads slightly,move
renamed assumejigsaw to assumejava ,rename
nxp cleanup pull up isconnectserverreachable and remove useless override,pull up
refactor git svn id plugin f e d c a e f ,push down
fixed optional protocol dialog refactored code,move
additional fixes for bug added api to abstractrsaclientservice to simplify the creation of providers change id i d eeaf de eb ad c f a a ,extract
refactor context,extract
rename faction tag to faction name what did tag ever mean name makes more sense,rename
rename requestpathmapping to routeregistry ,rename
extract method waitforexit git svn id b a c ae a bc d a bd,extract
extracted interpolation method,extract
multiple carets support for auto indent and refactoring,extract
ngrinder make monitoring service clean,push down
editor layout was customized for experiment and arraydesign,push down
refactored clientfactory and opensamplehandler separated interceptor chain within clientfactory into a clientpersister and the plain xmlserialization removed factory method for progressmonitorinputstream in clientfactory used alternative constructor instead added tags to ignore non translated strings moved tokenreplacingreader to name abuchen portfolio util package added paragraph to about html with tokenreplacingreader added mwhesse to contributors in aboutdialog formatted translation files with resource bundle editor issue ,move
tfj moved oauthauthorization encode to,move
replaced old default value code with prestodataprovider changesethandler,push down
refactored criterionview to be better structured use profilesview,inline
o the buffer is copied into a directbuffer if it s bigger than the senbuffersize so that we don t copy it many times when sending big files o added a method to convert a heapbuffer to a directbuffer o added some fields in the tcpsession the sendbuffersize and a pre allocated directbuffer to send chu ks of data o minimized the number of loops for the mb buffer on netty o the iosession writedirect method has been removed from the interface o some more javadoc,push down
minor mods fixes and refactoring git svn id f bb ffa edef ,push down
adds utility class for mapping contextto prevent modelmapper modules from using typeresolver directly and to reduce the redundant code so i create a utility classthat can be used for creating collection destination and resolvethe destination element type with giver mapping context,inline
changed browser compatibility and best match cookie policies to emulate the behaviour of firefox more closely when parsing netscape style cookies comma will no longer be treated as a header element separator if set cookie does not contain a version attribute mandated by the rfc rfc cookie specifications git svn id f bb ffa edef ,inline
redo substitution resolving to better handle complex cases the main idea of this patch is to introduce partial resolution which means resolving only the minimum branch of the object tree to get to a desired value by using partial resolution whenever possible more interdependencies between substitutions are permitted configdelayedmergeobject was a big problem because a lot of the code in abstractconfigobject really didn t work on it because it assumed a resolved object much of that code now moves down to simpleconfigobject,move
refactoring df j nio continued,push down
added visitor,extract
fixed a bug where neo j automatic index keys were being removed in automaticindexhelper methods,inline
refactor supplements util,inline
fixed bugs in buddy list view added ability to handle iq set events properly,extract
minstall install file should also install bundled pom xml from artifact adjusted src it minstall verify groovy according to changes removed meta inf maven from src test resources unit install file test generatepom target maven install test snapshot jar to force generation of a pom pom will be written to target directory ignore these poms in target directories for unittests which are under src test resources git svn id f bb ffa edef ,inline
hopefully the last of the big exceptions refactorings i went through all of the places we re adding context to our errors object and made sure we re never doubling up specifing the same injection point or key multiple times the new errors have nice at lines for parameters fields and linked bindings hopefully this makes it easier to follow the stacktraces additional context such as the binding s origin in a module could be added later if desired currently we have module specific sources in creationexceptions and plain old binding sources elsewhere the end result is messages that can look like this com google inject provisionexception guice provision errors error injecting constructor java lang unsupportedoperationexception at com google inject provisionexceptiontest reald provisionexceptiontest java at binding for com google inject provisionexceptiontest reald class provisionexceptiontest java at binding for com google inject provisionexceptiontest d class provisionexceptiontest java error git svn id guice googlecode com svn trunk d f a b b b d aecad e,push down
added enhancedpredcitivemodelbuilder and crossvalidator to work with data related hyper parameters,push down
renamed unifyer unifier this was incorrect,rename
her h failed get of replay char sequence due the outofmemoryerror map failed port her from nlevitt s h commit message inmemoryreplaycharsequence java new simple replaycharsequence that supports any encoding keeping everything in memory genericreplaycharsequence java if the encoding supports random access memory maps the backing file directly otherwise decodes to utf and maps that supports the first integer max value bytes of the file maps up to m moves the map around as necessary for larger files latin bytereplaycharsequence java removed functionality split between inmemoryreplaycharsequence and genericreplaycharsequence replaycharsequencetest java xesthugereplaycharsequence uncomment to test a huge replay char sequence testreplaycharsequencebytetostringoverflow test both utf and windows recordingoutputstream java use the new replaycharsequences,move
sc qcadoomes refactored production balance moved calculations from production records to production balance included tpz and additional time in calculations,extract
rename config toobject to config root this is clearer about what the object represents and how it relates to the config i didn t name it root before because it might have implied some relationship to configroot but since configroot is now gone toobject can have the nicer name root,rename
cleanup,pull up
clearcase plugin moved the change log entry creation into the factory git svn id c de d a be ed b c a,move
fix paxwicket refactored to a syncronized model based on the extractedservletdescriptor unified exceptionhandling and extractednormalizemountpoint function from genericcontext and,extract
push down some projections and queries from hive to mongodb hadoop any binary operator supported by indexpredicateanalyzer can be part of apushdown predicate to mongodb other operators are currently unsupported somore advanced filtering is done hadoop side,push down
cleaned up compoents renderes responsewriters and components ext xml,inline
rename methods for tool tip settings,rename
use scheduledexecutorservice for reconnecting further simplification,inline
continued on author view work also moved some of the validation service methods into better places in prep for adding a link to this from the author debug views,move
removing support for add and mod,push down
changing curation back to list of steps no json json serialzation handling in custom hibernate usertype,inline
resolved issue dirmina allow protocolencoder to generate non iobuffer objects changed protocolencoderoutput write to accept an object as a parameter renamed protocolencoderoutput getbufferqueue to getencodedmessagequeue git svn id f bb ffa edef ,rename
reimplementing change of language through listener,inline
fixes back end of outputters revised the mechanism for output formatting is now independent of the output destination e g there is no longer any formatting logic in the outputters but it s all in the walkers rearrange code structures to take the support classes to a different package this cleans up the regular org jdom output package the support package should only be of interest to people who override subclass customize the default functionality i will put a wiki page together on the new details and how overriders customizers can benefit from the the structures,inline
bitext extraction code changed word trans ratio calculation do for each token in sentence instead of terms in vector other minor changes fixes,extract
refactor removed unnecessary parameter taskids from plotdataprovider interface,inline
extracted and reworked checkcreateremotesvnpath git svn id f bb ffa edef ,extract
fixing bucketing aggregations created a common bucket class for all bucketting aggregations to return renamed termsaggregation bucket to termsaggregation entry to avoid naming confusion as well as to remain consistent with termsfacet entry created two distinct types of aggregations metricaggregation s which can have nested sub aggregations bucketaggregation s which cannot have nested sub aggregations but do have a getbuckets call which returns a list of buckets created a rootaggregation object as a filler to house an empty metricaggregation used in searchresult updated tests to reflect changes,push down
 refactor to clean up duplicated code in cacheentry validation regular and variant reuse negotation byextracting code to shared method git svn id f bb ffa edef ,extract
more refactoring of icalendar property and parameter classes,pull up
refactored servlet and standalone to prepare for eventual non servlet based ninjas,inline
jcbc prefix all query related classes with n ql motivation in order to maintain naming consistency and avoid confusion classes like query and related eg queryresult queryrow should be prefixed with n ql aligning it with view related classes like viewquery modifications renamed query queryresult queryrow their async counterparts concrete implementations and related tests by prefixing query with n ql querymetrics and queryparams have been respectively renamed to n qlmetrics and n qlparams queryexecutor has been renamed to n qlqueryexecutor order of fields and method declaration has been shuffled around a bit for clarity results less possible confusion when dealing with the various modes of querying couchbase view spatial view n ql change id i c c b a e c c reviewed on tested by simon basl√© reviewed by michael nitschinger,rename
lots of fixes of multipolygon issues i have also added some more javadoc and code comments renamed methods and variables and removed not very useful logging statements wanmil git svn id d f ee a dfeeeb ,rename
nio refactored one step closer to ideal,move
renamed add jvmoperation process jvmoperation,rename
removed all references to stringbuffer now uses chararray for about a speedup also reworked a few of the if else statements to produce slightly more efficient code,inline
pipeline stuff moved to separate repository,move
refactoring move private method linescuteachother from multipolygonrelation into utils no functional change,move
event wrapper enhancements event wrapper base wrapper,push down
added date information to change log lines,extract
using a new type of deobfuscating which makes updating go times faster using jarjar with rule file to rename class files and then deobfuscate changes moved to new type of deobfuscating changed the jar requirement from minecraft server jar to minecraft servero jar removed all code related to reserve list was unused anyway cleaned up some other stuff updated minecraft sql to match latest needed sql removed reserve list from update sql,rename
added shutdown lifecycle event and moved lifecycle into webbeansbootstrap removed postprocess method which is unused from deploymenthandler,move
upgrade to jetty and tomcat refactoring of jetty related test cases,pull up
renamed sendmessageparsed to msg,rename
faces move functionality that writes of section from partialviewcontextcleanupimpl to new partialviewcontextscriptimpl class,move
changelog updated for fileaide added to assist in common file tasksdemopsmerge diff csvtordf smush sparqltranslator xsltranslator csvtojdbc databaseclone initlog xpathtool arglist jenaconnect recordhandler textfilerecordhandler recordhandlertest removed vfs use for fileaidenlmjournalfetch pubmed webhelper webaidenormdamlevdist normtypodiff mathhelper mathaidematch pubmedscore score glozetranslator runbibutils sparqltranslator sanitizemodsxml xsltranslator merge no longer requires config filesmatch glozetranslator sparqltranslator runbibutils xsltranslator merge constructor cleanupscore lowered info message for no temp model to debugtransfer lowered warn message on no output to debug check for valid output changed and added remove from nothing checkglozetranslator sparqltranslator updated to modern input output with overridesdatabaseclone uses streams rather than fileobjects nowjenaconnect recordhandler jenaconnecttest removed file and fileobject constructors use string path constructortextfilerecordhandler uses stream closing rather than fileobject closing,inline
simplified assessment name title properties nobody was ever changing these so i m removed from the mvc layer removed the name property completely and moved title to assessmentpackage,move
corrects the dependencies management redefines the goals where the dependencies are downloaded and unpack and avoid doing so several times phase initialize goal nar download download all the project dependencies in the local maven repository phase generate sources goal nar unpack unpack in the project target folder sub folder nar the nar files needed for compilation phase generate test sources goal nar test unpack unpack in the project target folder sub folder test nar the nar files needed for tests compilations for tests executions and for executions removes the execution of the goal nar prepare package on the phase generate test sources this was needed to get the correct library name for tests compilation if the property output was used to rename the library the test compilation mojo now gets the correct name without the need to run nar prepare package on test compilation don t link the dependencies which are static libraries as they are already included in the library for which we are building the test executable corrects the following error the snapshot libraries are stored on web repositories with the string snapshot in the version number replaced by a timestamp based number if a project uses a snapshot library which is on a web repository and not yet on the local repository and defines this dependency with a scope different than compile or test the nar files are unpacked in the target folder of the project without changing back the timestamp to snapshot causing compilation errors as the dependency files are looked in snapshot directories example library with artifactid inetfunc and version snapshot stored in sonatype nexus repository as inetfunc nar inetfunc noarch nar inetfunc amd windows gpp static nar downloaded in local maven repository as inetfunc nar inetfunc noarch nar inetfunc amd windows gpp static nar renamed in local maven repository as good here inetfunc snapshot nar inetfunc snapshot noarch nar inetfunc snapshot amd windows gpp static nar unpacked in the project target folder as inetfunc noarch inetfunc amd windows gpp static,push down
add local variables to stackframes if agent is available ,extract
isqreade remove a redundant method,inline
new jdeeco core implementation todo tests runtime deploy jpf runtimejpf discretescheduler knowledgerepository knowledgemanager refactoring,pull up
port updating the encoding package to provide an almost complete although probably buggy as hell given how little i know about what i m doing implementation remaining tasks are implement the remainder of the hlafixedarray hlafixedrecord hlavariablearray hlavariantrecord implementations and write unit tests for the whole package that can wait and should be done as part of port ,push down
fix for ,push down
refactoring moved exmltomodelparser getlinenumber to preservelinenumberhandler getlinenumber this encapsulates the way the line number is stored as user data in preservelinenumberhandler on the fly made getlinenumber robust against user data not being available,move
jgrp gossiprouter support accessing multiple gossiprouters in tunnel in progress cleanup random policy is default,inline
merged thread pools of tp into using lazythreadfactory to correctly name threads changed sample configs to drop the oob thread pool tp added num threads spawned,inline
fix encoding of lists being sent in via api requests as described in we were previously translating lists to a special type of indexed object when sending them into the api via a request this patch corrects that behavior adds some significant clean up to the encoding utilities and adds some additional testing so that we ll have better guarantees that everything works,extract
push getvisualmotionstate into abstractvisualmodethis used to be an abstract method so that the different visual modescould pass in the right selection factory but this is now all handledthrough the fixselection method moving the implementation to the superclass means all visual modes usethe same motions,pull up
add float and datetime index field definitions introducing dependency on jodatime for the iso datetime formatting adjust integer index field definition such that the binary comparison of integers compares the integer values extend the string index field definition with various string to byte conversion options related testcases updates git svn id svn ssh dev outerthought org outerthought lilyproject projects lily trunk b d f e bd e a dc ,push down
renamed start stop reset to play stop rewind,rename
refactored buffer window frame management fixed tests,pull up
bug fix and cleanup,extract
added a new method styleutil applystyle that accepts a shapestyle to make it easier for plugins to change shape fill colors also updated the sample plugin to demonstrate its use,inline
idea ide ideaplugin ideplugin and so on throw exception if bad ide version refactored findclass test,push down
fix added command to move to column and beginning of line the command resets sticky column to the current position to unstick it on empty lines,move
coded mdi functionality and lots of other gui code gmltextarea leading spaces are converted to tabs tab width is set on initialisation added gettextcompat to convert newlines and tabs back for resave see prefs tabwidth see util convertindents string gmmenu extracted from gmmenubar to allow subclassinggmmenubar added window menugmtreegraphics background nodes are now shown correctly in the treemdimanager implemented resizedesktop mdimenu the window menu it updates when frames are added and removed and offers some common commands subclasses gmmenumdipane modified to call resizedesktop in certain cases added functions to close all etc vtexticon fixed a generics warninglgm mdi is now an instance of mdipane modified createtree to add a jtogglebutton for the eventframe reordered some gui initialisation code to work with the extra toolbar button overloaded makebutton for other kinds of abstractbuttonresource modified the arguments to copy there are now two versions modified subclasses to use the new arguments resourceframe added javadoc comments to some fields to clarify their purpose modified resourcechanged in all subclasses to compare against resoriginalscriptframe modified to use gmltextarea gettextcompat eventframe added support for the toggle buttoncheckstyle xml todo comments are now ignored eclipse already has better functionality for thatabstractbitmap removed a fixme commentgit svn id f f bc e be cd ,extract
undid redesign of april most importantly instead of a subclass of java io file overtherefile is now an abstract base class subclassing only made the implementation more complex and added no benefits any other code used expects to be able to open a fileinputstream or a fileoutputstream to a java io file which won t work for remote files this change also allows for more specific semantics of delete mkdir mkdirs and renameto removed api methods that have better alternatives e g use listfiles instead of list removed convenience methods such as get outputstream renamed get to getinputstream and put long to getoutputstream long renamed hostconnection to overthereconnection renamed overhereconnection startexecute to overthereconnection startprocess renamed commandexecution to overthereprocess renamed commandexecutioncallbackhandler to overthereprocessoutputhandler improved overthereprocessoutputhandler implementations they can now be created using static methods and can be grouped with the multipleoverthereprocessoutputhandler improved performance of ssh and specifically scp protocol by reducing wait time in loop waiting for completion of a command from ms to ms fixed bug in sshinteractivesudooverthereconnection where it could not handle a password prompt that does not end in assword but has assword somewhere in the middle added cmdline cmdlineargument abstraction of command line to allow for better hiding of passwords in logs and implement command line encoding moved here from from operatingsystemfamily improved over reimplemented overthereconnection execute in terms of overthereconnection startprocess reduces duplicate code in protocol implementations ensures execute and startprocess have identical semantics and forces all protocol implementations to implement startprocess so that the wsadmin and wlst daemons will always work set source and target compatibility to added building of sources and javadoc once artifacts gradle is fixed added dependency on guava should replace all use of apache commons soon using scannit for annotation scanning instead of reflections updated notes in readme md,inline
 extracting mapping instantitation from visitor class,extract
rename getincluderesourcesdirectory to isincluderesources,rename
fixes back end of outputters revised the mechanism for output formatting is now independent of the output destination e g there is no longer any formatting logic in the outputters but it s all in the walkers rearrange code structures to take the support classes to a different package this cleans up the regular org jdom output package the support package should only be of interest to people who override subclass customize the default functionality i will put a wiki page together on the new details and how overriders customizers can benefit from the the structures,push down
fix jackson for clean up otherwise,push down
oozie refactor action main classes into sharelibs rkanter git svn id f bb ffa edef ,push down
refactor remove support for postgresql ,inline
refactoring four new helper methods in codegeneratorbase clean up the code in both subclasses a lot idea s structural replace rulez on the fly cleaned up multiple declaration of jswriter out,inline
coded mdi functionality and lots of other gui code gmltextarea leading spaces are converted to tabs tab width is set on initialisation added gettextcompat to convert newlines and tabs back for resave see prefs tabwidth see util convertindents string gmmenu extracted from gmmenubar to allow subclassinggmmenubar added window menugmtreegraphics background nodes are now shown correctly in the treemdimanager implemented resizedesktop mdimenu the window menu it updates when frames are added and removed and offers some common commands subclasses gmmenumdipane modified to call resizedesktop in certain cases added functions to close all etc vtexticon fixed a generics warninglgm mdi is now an instance of mdipane modified createtree to add a jtogglebutton for the eventframe reordered some gui initialisation code to work with the extra toolbar button overloaded makebutton for other kinds of abstractbuttonresource modified the arguments to copy there are now two versions modified subclasses to use the new arguments resourceframe added javadoc comments to some fields to clarify their purpose modified resourcechanged in all subclasses to compare against resoriginalscriptframe modified to use gmltextarea gettextcompat eventframe added support for the toggle buttoncheckstyle xml todo comments are now ignored eclipse already has better functionality for thatabstractbitmap removed a fixme commentgit svn id f f bc e be cd ,extract
fix refactor compilers to better share code between instances rename template tests to templates subpackage to avoid clashing with unit tests in parent directory fix substitution variables not passed to default teaservlet xml files in meta inf add test cases for beanpropertyaccessor,pull up
refactoring of targets and utility classes renaming removal of alternative methods standardizing on generic lists,inline
execstoptask class is extracted from runtask down protected run method is renamed to exec,push down
project slimfast refactored node hierarchy so that leaf nodes text comments scripts etc use bytes vs bytes each,push down
rework ruleset loading resourceloader is now instantiable and we can tell which classloader to use to get resources we will always use the execution classloader or just add the paths added by ant but never the auxclasspath the classpath added by ant won t get into the auxclasspath either,inline
refactoring model controller entry point,inline
refactor common logic don t write stdout and stderr xml attributes if empty git svn id f bb ffa edef ,extract
refactor bspmaster and groomserver git svn id f bb ffa edef ,push down
jenaconnects moved truncate implementation to jenaconnect since all were the same also now activates listeners,pull up
move some maven client options,push down
range related code extracted from reaction class now have a more general abstractiteration class that can be used to implement arbitrary iteration procedures have also removed xml folder,inline
renamed candidatesessionstate status,rename
added method that allows request parameters,extract
rename,rename
rework serverconnection to have processmessage faster and easier to inline,inline
split session close boolean method to two methods,extract
refactored ioutilities down to nothing some methods moved to serviceutilities and now throw qtiworksruntimeexception if things go wrong other methods replaced with analogues in apache commons io,move
blank signs bug fix doesn t compress chunks that are not in active chunks replaced worlds onload uses player move events to track player location created reflectutil to handle field transfers,move
changed make factory methods e g idfactory getdefault makeid to create methods e g idfactory getdefault createid,extract
adjust structure ide and jdk resolvers changes,inline
fixes and cleanups some work on rent system,extract
adds more tests for the retrieval tool adds the option to specify a store id adds number of attempts to the output file various other small fixes refactorings git svn id ed cd a f c be b fe bcb,pull up
java moving rules into correct packages according to the new category part ,move
ttale completed patch as supplied on the jira task modified the api and documentation to allow for custom reports properly also removed package level reports temporarily so that work on topic branches can commence properly,push down
aesh refactored commandlineparser completionparser to interfaces should be more pluggable now might need some services providers,push down
rename log interface method,rename
update translators for movement of languages certificates and year move mongo translation of languages certificates and year fields from item to content translator to reflect changes in the internal model,move
her ensure retired status for queues is operator controllable her changing queue totalbudget not retiring queue as expected crawluri java includesretiredirective internalize to crawluri abstractfrontier java allow re enqueuing of untried uri with retire driective clean up terminology method names workqueue java workqueuefrontier java bdbfrontier java adjust budget sessionbalance handling to always count up always consult latest values always refresh values from latest uri processfinish reorganize to reduce redundancy dispositionprocessor java offer forceretire setting quotaenforcer java set failed status or forceretire not both her h adding sheetassociations mid crawl won t affect already queued crawluris sheet liveness sheetsoverlaymanager java applyoverlaysto rename unify reapply whenever called to ensure liveness candidatesprocessor java adjust to rename,inline
refactored to introduce datasource and irirewriter major refactoring and cleanup expressed much of the logic in terms of new datasource and irirewriter interfaces fixed many bugs around inconsistent rewriting of uris in the process started to change terminology from uri to iri not yet done re did much of the configuration parsing reading improved detection and display of problems in configuration file moved metadata stuff into its own class metadataconfiguration metadata templates are now expected in web inf rather than web inf templates removed obscure feature conf fixunescapedcharacters,move
dsl compiler generates cleanup stage client ,pull up
updated javadocs renamed typetoken to typeliteral hid configurationexception from the public api git svn id guice googlecode com svn trunk d f a b b b d aecad e,rename
moved layer generation independentlayer to separate class,pull up
 refactoring moving selection parameters to common selectorparameters repair,move
fixed jsplitpane slider location in sourceeditorview fixed editor tabs not brought to front when editing a file,extract
major refactoring to remove deprecated jsonparser feature s altogether,push down
moves the code within the bulk replication processor which handles the push of the source file to the destination into a new class replicator in order to allow the repmapper to run that piece in a separate thread and still respond to hadoop to indicate that the work is in progress this is very similar to the use of the filecopier in the base processor when transferring the source file from the source store onto the local file system this resolves git svn id ed cd a f c be b fe bcb,push down
added supported outputs functionality and some refactor and clean up,extract
feat support execute statements via simple q command to execute a query in simple mode queryexecutor query execute as simple flag should be used alternatively preferquerymode can be used to control the desired execution mode preferquerymode can have the following values extended default send all queries as extended parse bind exec simple send all queries as simple q extendedforprepared send prepared statements as extended and non prepared statements as q note simple execution mode does not support binary formats it does not support statement metadata etc other changes support timestamp timestamptz date time timetz point box and uuid types in simple execution mode closes closes ,pull up
newxpathengine moved to documentutils removed unneded exceptions,move
non working beta release developers only i made this commit of the work i have so far however there are a few errors here and there which need to be fixed however i have limited time to fix this so i m asking the community to do it so far problems in fe java around line not all non obfuscated have been checked if they needed some renames workbench java has been disabled due to the fact it needs a rework,rename
advance method extracted from run method,extract
extract defaultjavarunner change javarunner signarure to include javahome and workingdir git svn id b a c ae a bc d a bd,inline
pdb move the mql editor data access wizard and chart editor out into puc,move
improved unit tests branch coverage,push down
renamed searcher searchedittext to searchforedittextwithtimeout,rename
remove sslv hardcoding,pull up
removing redundant functions in extgraph duplicated by sesame s graphutil movign implementations of util methods to graphs extgraph now an interface extgraphimpl the implementation calls are jsut delegated to graphs adding two new graph extensions which extgraph implements iograph for rio util methods and functionalgraph for supporting guava functional classes renaming statementfunctions to statements adding additional functional utility methods on there adding testgraphs for testing the main graphs funcionality generally cleaning up extgraph extgraphimpl,move
added confirmation dialog for unsafed changes,extract
pulled out non webapp specific code from webappcontext into base class basesitemeshcontext in preparation to be reused by offlinecontext renamed webappcontext getrequestpath to getpath to be less web appy,pull up
core client fix record count property default value in coreworkload also refactor throttle method in client,extract
faces prepare for osgi by moving impl classes to internal sub packages in order to clearly distinguish api from implementation,move
massive cleanup of code pushed more implementations down to private packages making more re use of interfaces,push down
remove interceptorholder all values are moved to proxyconfig,move
imagesaverdialog can now return selected options viewer can now start stop play video sequence and change the desired frame rate colormap fixed color calculation with alpha blending delete key can be use to remove control point color component line order modified alpha is no more at front some fixes in sequence save operation better name logic f key now opens a browser to the support forum fixed minor issue in plugin installation somehow replaced focused viewer by active viewer but that may change fixed a minor issue with the ij icy image transformation action some refactoring removed old deprecated units reworked javadoc generation minors changes and tweaks,pull up
change address model to be an interface will allow consuming projects to override this funcitonality more easily,push down
renamed xclasscreator to defaultxclasscreator,push down
renamed test,rename
extracted particle creation from initrandomparticles tocreaterandomparticles now force independent needed for clean prepare call,extract
moved real code to hidden class made jgroups imp subclass added init,push down
rename a few more pair occurances to field refs ,rename
minor test improvements,push down
refactoring of stages removed stressors as a concept logic moved to stages statistics moved to separate package stages moved to packages according to used features refactored logics out of stresstest stage to separate classes,move
fixed stupid regression while refactoring staging code git svn id f bb ffa edef ,push down
renamed setlength to read setlengthofreplacedtext to rule out ambiguities,rename
split the layout into two classes made layout be an interface instead of a class moved the layout code into default layout issue number obtained from submitted by reviewed by,push down
scenario generator improvement,push down
clean up meta processing signed off by gordon smith,pull up
refactorings,inline
unsubscribe from node notification events working moved getdocumenthelper to abstract,pull up
fixes files are named after jtl results file again major internal refactoring of writer structure added separate tests,pull up
scoretest bad pmid for the main article when spidering through for pubmed it moves author authorship publication then out to the rest of the nodes this broke down in the test because the uri with pmid for the authorship was not the same as the publication match kept most of the phi however moved from adding to the model every time to building a list of all of the statements then adding the statements before moving to the next matchset will clean up for memory usage this weekend need full test on qa later this weekend,inline
 moved properties replacement into propertiesreplacer,move
added option to all operators to construct and use them without a model to fix also added configoperator to handle enrolling and removing config listeners to support this,pull up
revert partial merging of core changes from f this reverts commit fc be d f feac e bcc ac,inline
added createmonitor method so it can be overridden in subclasses,extract
renamend featuredetection into os detection,rename
major refactor of the io layers,inline
move some db methods to dao,inline
simple refactor,move
rf samples refactor,pull up
removed unused change from pr,inline
clean up created new astbuilder which is lesser pain to use than the old one,inline
renamed hostfile to overtherefile and refactored it from an interface to an abstract base class src main java compiles without errors or warning src test java still has compilation errors though,inline
a few extract method refactorings to make code more readable still won t win a beauty contestgit svn id f bb ffa edef ,extract
rework the textual ui,push down
dheeru abhi creating hierarchy of repository service for containerdashboard feature bifurcation restoring pretreatment functionality,push down
datacomposer initialization moved to initlistener,move
added support for multiple oauth services disabled the setted producer for servicehandler it should be build thru a cdi extension to avoid creating useless beans,extract
add udfs that permit storing bson from pig and extracting timestamp information from objectids hadoop ,extract
many doc updates move most docs from javadoc to html,move
renamed various engine props for consistency we now use the naming established in the recent jqti controller refactoring so enter end exit instead of init close terminate reinit hard reset reset soft reset,rename
fix highlighting algo misplacing some style classes,push down
turned utils static methods into presto methods moved typeutils into presto,move
completes add run to completion option to synctool ui,extract
renamed removeoobmessages,rename
added membaseclient object the membaseclient object should be used when making connections to membase clusters this commit also includes a new membaseconnectionfactory and adds adds the coresponding builder code to connectionfactorybuilder test support is also added for connections specific to membase clusters change id i a a da bff c f d d b f e reviewed on reviewed by matt ingenthron tested by michael wiederhold,push down
add testsuite remove eterm,push down
combo counter fixes,push down
merge buffermanager into inputinterceptormanager they were both singletons and heavily used similar code and are never supposed to be split make buffermanager a top level type and move its activate method to inputinterceptormanager,push down
revamped bootstrap process configuration properties and context specific functions are now all defined directly in the joo object package custom debug loadscript loadscriptasync and localization properties must now be set before loading the runtime jooruntimetestcase does so in order to set up everything for rhino all script loading methods have been moved to runtime s jangaroo module js a debug compiled concatenation of runtime classes previously called jangaroo runtime debug js no longer exists instead either jangaroo runtime js is used or the former jangaroo runtime debug classes js which has been renamed to jangaroo runtime debug js this is consistent with all other modules which are either loaded as concatenated modules without white space or as single classes with all white space and comments the class loader is created based on the configuration by the function joo createclassloader if any localization property is set a resource bundleawareclassloader is created otherwise a dynamicclassloader is used we could add a flag for non dynamic class loading to use the standardclassloader avoiding a bit overhead if all classes are loaded statically,move
some minor clean ups for ,inline
enable creation and retrieval of org webhooksmade ghhook abstract and created two concrete subclasses for organd repo hooks created utility class ghhooks to manage creationand retrieval of org repo hooks with minimal code duplication theseare invoked by ghorganization and ghrepository respectively,push down
move protobuf support to plugin module future work add module detector and executor move proto classes to another maven module,move
cadmium fixed initialization errors,push down
add new deletion upload endpoints to allow deletion or upload of single pieces of content to youview also move youview feeds endpoints to processing rather than app servers,move
refactor security client,pull up
code review of websocket feature change notes removed obviously unused faulty code renamed clarified connection names recovered async event handling review notes change introduces a componentupdate isprocessed feature i still have no clue how this relates to the websocket feature in general also change introduce the case handling for components without a peer at all not sure how this case is relevant because all components are required to have an peer applicationinstance handles concurrent disposal this case should not be possible at all component introduces a lastrenderid same here mysterious use case,rename
hopefully the last of the big exceptions refactorings i went through all of the places we re adding context to our errors object and made sure we re never doubling up specifing the same injection point or key multiple times the new errors have nice at lines for parameters fields and linked bindings hopefully this makes it easier to follow the stacktraces additional context such as the binding s origin in a module could be added later if desired currently we have module specific sources in creationexceptions and plain old binding sources elsewhere the end result is messages that can look like this com google inject provisionexception guice provision errors error injecting constructor java lang unsupportedoperationexception at com google inject provisionexceptiontest reald provisionexceptiontest java at binding for com google inject provisionexceptiontest reald class provisionexceptiontest java at binding for com google inject provisionexceptiontest d class provisionexceptiontest java error git svn id guice googlecode com svn trunk d f a b b b d aecad e,pull up
once again a temporary commit to keep modifications do not compile modified the queryoption mechanism once again should be the last version to be extensible now queryoptions are inherited from queryoption and declare their own typed and named fields it s easier for understanding and tracing options but it requires some more casts in the code modified the whole jdbcpersistencemanager according to the new option mechanism and added a specific queryoptionjdbccontext for statement reuse,push down
implement a default abstractdomainobject in core closes fixed getdomainclassroot in pt ist fenixframework dml pojocodegenerator to return the string refering the coredomainobject,push down
cleaned up the websocket interface,inline
refactoring ast for delegation name pair payload elems added scribble specific delegation payload types,push down
only show sources with unread notifications in unread view remove sources immediately when empty d ,inline
massive refactoring for keys settings,inline
added value params support to fieldparamspostprocessor,extract
rename splitintsnew to splitints,rename
extracted some internal methods in timelinevalue class with some tests,extract
merged thread pools of tp into using lazythreadfactory to correctly name threads changed sample configs to drop the oob thread pool tp added num threads spawned,inline
add zone getrotationangle fixes added an example to test also,extract
more cleanup aiming to remove content reference in box,push down
simplify the codearea s interface,inline
renamed keyword,rename
 moved switch case logic for treatment update from patient service to polymorphic classes,move
encapsulate matcher create in factory method and implement the matcher logic in a matcherimpl subclass,push down
worked on a error message model so that when functions fail their messages are more informative added g version to get gremlin version information tweaked lots of functions here and there added more test cases for functions found a load of issues with notation created issues and test cases commented out that need to pass,push down
releasing core ivory on github extracted from private svn repo,extract
made loggly reporting extendable,push down
reworked csv import to support currencies re use extractor validation logic show review pages before inserting transactions moved csv related code into separate package renamed ui classes to include csv issues ,rename
a couple of changes separated covbuildcommand into two different commands one for script sources and one for compiled sources removed the support compiled language sources during cov build phase checkbox updated all the unit tests related to above changes,inline
adds multipolygon geojson de serialization,extract
better naming continuing improvements around the naems of concepts in moo renamed getoriginexpression to getsourcepropertyexpression to match the updated usage renamed translation to source on collectionproperty to match property renamed itemtranslation to itemclass on collectionproperty it s more accurate and makes way for item source property expressions related to ,rename
initial pass to update client java library for changes in payment apis and invoie payment apis still under development,push down
shruthi dev refactoring adherencecaptureit test using default root transition welcome prompt is in summarytransition now,pull up
open task add states to execution of opd continue to move functions from opmanalysis to opdanalysis almost there,move
move the pool implementations into the stormpot package this will allow some obvious code sharing to take place without compromising visibility,pull up
rename method to getmovetodirectory and add a javadoc comment which among other things explains why make it public to access from tests,rename
context change for tree popup keywords,inline
renamed asyncstate to blockingvariables and asynccondition to conditionevaluator added class blockingvariable,rename
apply fixes outlined in issue lots of extensions to the ant task and a variety of code cleanups,pull up
o moved reporter construction logic further into reportermanagerfactory git svn id f bb ffa edef ,move
benchmark stages now separated into their own namespaces removed all the separate symlinks to xsd files replaced by single symlink to schema directory moved radargun xsd to radargun benchmark xsd fits better to the urn radargun benchmark namespace moved radargunscenario xsd to radargun scenario xsd and changed the namespace to urn radargun scenario core stages are now in radargun core xsd reduced code dependency on directories lib dir annotatedhelper renamed to classpathscanner now scanning whole classpath,pull up
 moved baseurl to super class and added tokenproviderawareclient class,push down
oozie add chgrp in fs action ryota via virag git svn id f bb ffa edef ,extract
renamed mdl to mol git svn id research chemet trunk e a e c eb c a a ee ,rename
safer date datetime parsing all date and datetime parsing moved to the safedatetimeconvert and safedateconvert functions these handle errors by returning null,move
added support for selection binding on ajaxautocomplete pretty lame impl and restricted to just displaystring support but better than nothing,extract
refactor pull out an abstract base class for deploy mojos git svn id f bb ffa edef ,pull up
lib change preference configuration format of transfercapabilities,inline
sweeping cleanups to reduce tangles and improve the code,pull up
moved the displayed calendar to the control in preparation of more skins,push down
cleaner simulator startup and run loop exiting if a default rom image rom bin isn t available at startup the simulator will now create and load a kb r w memory at the rom location so resets will work even without a rom loaded cleaned up the way simulator ui state is updated when the run loop exits,inline
add tile copying and fix rendering tiles that are transparent,extract
removed fielddata valuetypes and createtypes added link links,extract
changes for support of progress on bug ,inline
refactoring pushed property mgmt functionality into new superclass now shared by the report renderersgit svn id baf d a c fc e d,push down
hv introduce a valueextractorhelper class,inline
many modifications to code base to make some things a bit cleaner added ability to identify protocol refs on mapping via their type so now the user will see protocol ref sample collection for example this means that the protocol ref mapping can also be saved for the next time as well closes added ability to generate the protocols automatically on doing a mapping including automatic addition of the protocol name type parameter values closes tested all and appear to be working fine further testing required before release of version ,extract
shruthi moved treatment inside therapy,move
faces add general utilities for liferay faces alloy components renamed liferaykey to clientkey and liferaycomponent to clientcomponent,rename
fix for tfj user element is out of sync fix for tfj userwithstatus element is out of sync introducing extendeduser deprecating userwithstatus to make the class name consistent with the api doc extendeduserinformationelement git svn id b e d d ab bb d b,pull up
refactored sasl auth for greater reuse,pull up
rework of link matching and printing,inline
more merges with develop branch,inline
refactoring externalized all view propertys to a new viewmodel object which can be saved and loaded with a job,inline
make tests pass on phantomjs and chrome create abstract grapheneproxyhandler for custom proxies without no contextual information renamed grapheneproxyhandler to graphenecontextualhandler do not call unimplemented callbacks in some tests renaming test testgraphene to testgrapheneutilitiesparalelly,push down
renamed variable codechanged,rename
started removing hardcoding of road filenames,inline
dev displaying no of objects stored in db while testing changing column name for patient type,inline
fix meclipse maven eclipse plugin creates wrong org eclipse wst common project facet core xml for ear projects when javaee javaee api is used git svn id f bb ffa edef ,extract
refactor the old relevance query code big change,move
nojira move resourcemapping from emergencyalert to the lifecyclecontroler rename get feed get notifications uncategorized because we re going to start reusing it,move
added undo support to basic operation roi add remove roi properties change color stroke sequence operation remove channel change dim added plugin usage statistics added user account link support canvas d added area selection ctrl key mouse drag added message when there is not enough memory to display image fileutil getapplicationdirectory modified a bit roipanel fixed sorting on position and size maininterface added getundomanager method to retrieve the active sequence undo manager added undo and redo methdos for fast undo and redo on the active sequence plugindescriptor added isblundled method to know if this is a bundled plugin several plugins inside the same package added iskernelplugin to know if this plugin is bundled in the application pluginlauncher some changes with plugin launch operation plugin added getname isbundled and getownerclassname methods roi added copyfrom roi method to obtain a roi copy added getpropertyvalue setpropertyvalue for generic property get and set operations metadatautil added getsizex y z t c and setsizex y z t c methods sequence added copyfrom copydatafrom and copymetadatafrom methods added createundopoint createundodatapoint createundometadatapoint and addundoableedit methods to create complete partial or custom restore point for undo operation added undo and redo and clearundomanager methods added getselectedrois class roiclass to retrieve selected roi of a specific type only added sequenceutil getcopy sequence copyroi copyoverlay suffix to get a copy of the specified sequence with specific options added new methods to dateutil minors fixes and tweaks,push down
o added sime javadoc o renamed the processsessions method to processconnection as it s really what it does o renamed the connectionrequest method to getconnectionrequest for clarity sake o removed useless assert o fixed the getslice int int method git svn id f bb ffa edef ,rename
refactored global local vs compound simple del hierarchy,move
methods renamed,rename
refactored the derivers to share some of the boilerplate,pull up
straightforward translation of filemover to use java nio file path for the most part just replace everything related to the moving of files to use the nio equivalent this mostly applies to filemover and fileutilities java makes it very easy to go back and forth so for now uistarter and fileepisode are still kind of based on java io file and just use file topath and path tofile to go back and forth other changes try to clean up the progress label no matter what happens previously it would sometimes be left behind as a gray blotch change aresamedisk method to use filestores add javadoc comment about paths needing to exist fileutilities movefile no longer happily overwrites its destination it s true that we already checked that the destination file does not exist in uistarter when we re building the list of moves to do but things may have changed by the time movefile gets around to running especially if we have two files in the source location that map to the same destination file creating a race condition i still don t think we can truly guarantee that no race condition can cause file loss but it s far less likely now use our logger in movefile rather than the gjt logger use try with resources instead of ioutilities closequietly eliminate canstop argument to movefile since we always passed in true,extract
moved isentityreadonly eval to erd wpage,pull up
case corrected order of execution and renamed demote to reject,rename
renamed topic interfacecontrol and topicviews interfacecontrol to mode,rename
init content was added,extract
renamed signature parsing methods,rename
pull typetextinfile up to vimtestcase,pull up
remove abstractmessage,push down
moved more muck to terminalsupport,pull up
rename proposalgenerator addkeywordproposals to addkeywordcallproposals,rename
getallevents and getnrofevents methods with lucenequeryapi removed and corresponding methods in calendarenginelucene now delegates calls to calendarenginehql,inline
split javaqualifiedname into type and operation specific subclasses,push down
introduce failuremetadata and start associated renames subjectfactory subject factory customsubjectbuilderfactory customsubjectbuilder factory created by moe moe migrated revid ,rename
sc qcadoomescls delete parameterhookpc from basic plugin and move method to parametershookpc into production counting plugin,move
various fixes and improvements domain model for instance documents is a work in progress,push down
refactored the plugin extracted deploy strategies into separate components mojos got radically simpler k lines vs ish other smaller fixes like reshuffle,push down
o refactored resource abstraction again now less retarded but still not as i would like unfortunately this actually breaks the api of all previous releases o added support for registering full json files on a key and environment kind of made the api breakage worth it,push down
her improve bundled profiles to match best practice be self documenting profile crawler beans cxml add comments for all unstated default values an operator might want to change many reorder refactor rename to better minimize match simple configuration,rename
reduce copypasta,inline
improve multicommand to be reviewed more precisely to handle displayui correctly,push down
minor refactoring git svn id baf d a c fc e d,inline
simplify magicauthstringservice part ,inline
xml file processing moved into separate package dummy classes for annotation and dsl support refactoring of xml loading,move
 renamed foreach methods that had effects as parameters to foreachdoeffect,rename
added several methods on eogenericrecordclazz to support ec arguments moved a lot of stuff in erxxxutilities so the ec comes as first argument removed the xxxeditingcontext from the method name this is so the names are more like the ones in eoutilities added eocontrolutils clearsnapshotforrelationshipnamed added eocontrolutils clearsnapshotforrelationshipnamed added and fixed pkstring generation very useful for urls and das with non trivial pks added stringforprimarykey helper to prevent duplication but pk generation is still a mess added erxeoaccessutilities modelgroup ec supporting null for ec added erxeoaccessutilities entitynamed ec name supporting null for ec hopefully all eomodelgroup defaultgroup eoutilities entitynamed etc have been converted to erxeoaccessutilities modelgroup ec and entitynamed so most of the fixmes in that direction have been fixed i have not tested anything so far so please check if something broke on the way one thing might be the reordering of arguments i didn t want to deprecate them as they were pretty new anyway and shouldn t be used a lot outside of erx,inline
fcrepo allow fesl relationship resolver to use the resource indexrefactor existing code in prep for implementing ri based resolver movecommon code to abstract base class remove unused methods,pull up
reverting jmdns refactoring change id i bcd e c ff a b b c,inline
redesign of classic blocking connection management apis git svn id f bb ffa edef ,inline
 moved clientuid directive back to fileuploadparameterbuilder,move
reworked the updateeventhandler to dramatically increase performance for large number of pending updates replaced eventhierarchicalchecker with collapsibleevent changelistener interface modified see the impact,inline
changes in the nio implementation and re implementation of gossiprouter routerstub added pubserver and pubclient added send null to send to all added gossiprouternio added static creator methods for nioserver and tcpserver added code to create client servers tcpgossip and tunnel can now choose between blocking and non blocking connections to gossiprouter use nio request and response types between routerstubs and gossiprouters are now in a separate enum gossiptype removed gossiprouternio non blocking io will be implemented in gossiprouter itself using nioserver tcpserver added util buffertoarray moved connectionlistener out of baseserver removed server added list to gossipdata receiveradapter now uses util buffertoarray tcpgossip now implements routerstub membersnotification callback routerstub now uses baseserver to connect to gosiprouter gossiprouter now uses baseserver to implement connection management added tcpclient and nioclient moved all client server related classes to org jgroups blocks cs added tcpclient and nioclient moved all client server related classes to org jgroups blocks cs de genericized baseserver et al moved to package org jgroups blocks cs reconnects in routerstubmanager now work use peer connections to make unit tests pass added suspect handling in gossiprouter when a connection to p is closed then a suspect p will be sent to all members of that group made marshallinf of gossipdata for type message more efficient removed copying of messages in gossiprouter setting parameters in sockets channels before connecting them tcpconnection isopen now returns true when the socket has been created rewrote serverunittest to get rid of issues with dataprovider upgraded testng dep to x,pull up
bval move metadata methods to beanvalidation git svn id b cb b d ca fae ebed b ,move
cleaned up indexing entry points and documentation git svn id svn ssh svn internal sanger ac uk repos svn pathsoft psu trunk genlib java crawl ee ac c ac e b aa f ,pull up
fix query on transactional cache,push down
improve behavior when connections are errornous add jmx counter for that and invalidate connections if they have errors,extract
 updated cpu plugins according to newest emulib changes,inline
more moving logic out of the main enunciate mechanism over to the modules git svn id c b a b b d e ,move
introduce userproperites class and add move tests,move
added entitymanagerimpl persist collection objcoll the main advantage over persist object obj is that a single batch mutation will be used for performance,extract
cleanup and reorganization added a private api layer org postgresql core base cleaned up public api org postgresql pg added consistent headers and copywrite info removed deprecated serialize functionality cleaned up imports moved some files to more appropriate locations modified files jdbc org postgresql driver java in jdbc org postgresql pgconnection java jdbc org postgresql pgnotification java jdbc org postgresql pgstatement java jdbc org postgresql core encoding java jdbc org postgresql core notification java jdbc org postgresql core queryexecutor java jdbc org postgresql core startuppacket java jdbc org postgresql fastpath fastpath java jdbc org postgresql fastpath fastpatharg java jdbc org postgresql geometric pgbox java jdbc org postgresql geometric pgcircle java jdbc org postgresql geometric pgline java jdbc org postgresql geometric pglseg java jdbc org postgresql geometric pgpath java jdbc org postgresql geometric pgpoint java jdbc org postgresql geometric pgpolygon java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc databasemetadata java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc resultsetmetadata java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc jdbc callablestatement java jdbc org postgresql jdbc jdbc connection java jdbc org postgresql jdbc jdbc databasemetadata java jdbc org postgresql jdbc jdbc preparedstatement java jdbc org postgresql jdbc jdbc resultset java jdbc org postgresql jdbc jdbc resultsetmetadata java jdbc org postgresql jdbc jdbc statement java jdbc org postgresql jdbc abstractjdbc blob java jdbc org postgresql jdbc abstractjdbc clob java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc databasemetadata java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc resultsetmetadata java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc array java jdbc org postgresql jdbc jdbc callablestatement java jdbc org postgresql jdbc jdbc connection java jdbc org postgresql jdbc jdbc preparedstatement java jdbc org postgresql jdbc jdbc resultset java jdbc org postgresql jdbc jdbc resultsetmetadata java jdbc org postgresql jdbc jdbc statement java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc jdbc callablestatement java jdbc org postgresql jdbc jdbc connection java jdbc org postgresql jdbc jdbc preparedstatement java jdbc org postgresql jdbc jdbc resultset java jdbc org postgresql jdbc jdbc resultsetmetadata java jdbc org postgresql jdbc jdbc statement java jdbc org postgresql largeobject blobinputstream java jdbc org postgresql largeobject bloboutputstream java jdbc org postgresql largeobject largeobject java jdbc org postgresql largeobject largeobjectmanager java jdbc org postgresql test jdbc jdbc testsuite java jdbc org postgresql test jdbc optional basedatasourcetest java jdbc org postgresql util md digest java jdbc org postgresql util messagetranslator java jdbc org postgresql util pgbytea java jdbc org postgresql util pgmoney java jdbc org postgresql util pgobject java jdbc org postgresql util pgtokenizer java jdbc org postgresql util psqlexception java jdbc org postgresql util unixcrypt java added files jdbc org postgresql core baseconnection java jdbc org postgresql core baseresultset java jdbc org postgresql core basestatement java jdbc org postgresql core field java jdbc org postgresql core pgstream java removed files jdbc org postgresql field java jdbc org postgresql pg stream java jdbc org postgresql test jdbc serializeobject java jdbc org postgresql test jdbc serializetest java jdbc org postgresql util serialize java,pull up
merged decorator refactoring branch git svn id f bb ffa edef ,inline
one more refactoring to minimize dependencies,push down
throwing exception on failed puppet script refactored vagrantcloudhost to return a response object with logs and status moved part of the responsibility to vagranthelper throwing runtimeexception if puppet provisioning has errors have to parse puppet logs for that,move
moves encoding functions to their own class this moves functions used for encoding the outputted url segments into their own class this also removes a bunch of calls to the deprecated of method replacing them with calls to the urlbuilder s constructor,move
sesamize cleanup,inline
cleaned up nd order collector added cited by and the ram only cites query implementation,push down
whatever lets just move the last listener stuff over,move
this update is the initial commit for it adds the current username to the durastore s content ingest event additionally it includes the refactoring pattern that will be continued in the next commit for the other durastore events a new base class has been created for both contentstoreadvice and contentstoremessages git svn id ed cd a f c be b fe bcb,pull up
added ability to restrict tests that require provider to support cancel on connect the provider supports this but the urlconnection provider does not to specify whether the filetransfer tests should expect that cancel on connect can be tested specify the following system property org eclipse ecf tests filetransfer cancelsupportedonconnect e g dorg eclipse ecf tests filetransfer cancelsupportedonconnect false will not assume cancel on connect is supported the default is true cancel on connect is expected to be supported,extract
build fixes ,push down
factor out common unit test code it looks like the code might have been designed to be more generic but was never abstracted i know that the swing interface to junit jrunnder sometimes causes problems since it uses its own class loaded but since we use ant here there is no problem git svn id f bb ffa edef ,pull up
pom xml add tdb update jena etc jenaconnect added tdb case to param builder resultsets now copied to prevent conncurent modification errors getconnectiondataset now getdataset tdbjenaconnect tdb backed models memjenaconnect now uses tdb dbjenaconnect extracted to contain all database backed jena models shared code sdbjenaconnect add printparam stuff rdbjenaconnect add printparam stuff fix dataset changenamespace use new printparam name qualify single line mode regex cleanup cleanpredicates score temp option is now just the dir to hold tdb in arglist filter out usernames and passwords when logging options log j prop turn off jenaconnecttest use exportrdftostring failingtodeletefromsdb restored to test sdb regexqueryfailintdbvssdb used to test tdb detected conncurrent mod bug demopsmerge use tempjena as dirname not jenaconnect,push down
code clean renamed some package private methods git svn id f bb ffa edef ,rename
added more statements,extract
minor improvement to mathassess glue unexpected failures in the snuggletex up conversion process are now wrapped in a better exception allowing the original input to be logged to help fix snuggletex renamed some methods in the mathassess packages to use the newer naming conventions that were introduced earlier in the year when tidying things up,rename
part way through tree implementation some refactoring,push down
rework of wampmessage serialization added binary message using message pack,extract
new dynamicvariable remove extra copy,push down
androidlog added gettag and logchunk methods for easier subclassing,extract
more refactoring fix confusion between custom task properties and model extension properties,pull up
rename textformat as to typeas,rename
renamed method in buckettransferer,rename
rename getpagelayoutapiforname to getpagelayoutapiforref,rename
renamed bridge method getrelationto to getrelationbetween,rename
add support for infinispan remote listeners added support for ispn remote listeners code refactoring of cache listener added ispn hotrod service and server config file,pull up
refactored parcel and parceldto now uses autovalue central uses parcel directly,inline
moved lifecyle package to environment se removed unnecessary functionality from deplyment imported from seam to simplify,inline
toby moving the tuple literals into the literals class,move
refactor one part of the cov build command the part that was done in this commit is the part calling the cov build for script sources not compiled sources also renamed the package that all the command classes are inside,rename
 logout method returns login page now loginasadmin and loginasprovider are moved to loginpage use get page in page class to get corresponding page instance,move
add support for async post and put content,extract
fixes files are named after jtl results file again major internal refactoring of writer structure added separate tests,extract
fixed merge errors in simpleinstrumenttuner,inline
added support for jdbc the driver will now build under jdbc i e java this concludes my changes that restructured the code to support jdbc the jdbc unit tests were also resturctured to allow different tests between jdbc and jdbc although currently make check aka ant test for jdbc just runs the jdbc tests of special note the largeobject pgblob and pgclob classes have been moved under the jdbc jdbc specific directories as they now differ by jdbc version also note that this checkin removes the postgresqldatasource and files in the xa directory a recent checkin has added new datasource support that replaces the functionality provided by these classes modified files jdbc build xml jdbc org postgresql jdbc abstractjdbc databasemetadata java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc resultsetmetadata java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc databasemetadata java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc resultsetmetadata java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc array java jdbc org postgresql jdbc jdbc callablestatement java jdbc org postgresql jdbc jdbc connection java jdbc org postgresql jdbc jdbc databasemetadata java jdbc org postgresql jdbc jdbc preparedstatement java jdbc org postgresql jdbc jdbc resultset java jdbc org postgresql jdbc jdbc resultsetmetadata java jdbc org postgresql jdbc jdbc statement java jdbc org postgresql test jdbc batchexecutetest java jdbc org postgresql test jdbc blobtest java jdbc org postgresql test jdbc callablestmttest java jdbc org postgresql test jdbc connectiontest java jdbc org postgresql test jdbc databasemetadatatest java jdbc org postgresql test jdbc datetest java jdbc org postgresql test jdbc drivertest java jdbc org postgresql test jdbc jbuildertest java jdbc org postgresql test jdbc misctest java jdbc org postgresql test jdbc resultsettest java jdbc org postgresql test jdbc timetest java jdbc org postgresql test jdbc timestamptest java jdbc org postgresql test jdbc updateableresulttest java added files jdbc org postgresql jdbc abstractjdbc blob java jdbc org postgresql jdbc abstractjdbc clob java jdbc org postgresql jdbc jdbc blob java jdbc org postgresql jdbc jdbc clob java jdbc org postgresql jdbc abstractjdbc blob java jdbc org postgresql jdbc abstractjdbc clob java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc databasemetadata java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc jdbc blob java jdbc org postgresql jdbc jdbc callablestatement java jdbc org postgresql jdbc jdbc clob java jdbc org postgresql jdbc jdbc connection java jdbc org postgresql jdbc jdbc databasemetadata java jdbc org postgresql jdbc jdbc preparedstatement java jdbc org postgresql jdbc jdbc resultset java jdbc org postgresql jdbc jdbc resultsetmetadata java jdbc org postgresql jdbc jdbc statement java jdbc org postgresql test testutil java jdbc org postgresql test jdbc jdbc testsuite java jdbc org postgresql test jdbc jdbc testsuite java removed files jdbc org postgresql postgresqldatasource java jdbc org postgresql largeobject pgblob java jdbc org postgresql largeobject pgclob java jdbc org postgresql test jdbc tests java jdbc org postgresql xa clientconnection java jdbc org postgresql xa twophaseconnection java jdbc org postgresql xa txconnection java jdbc org postgresql xa xaconnectionimpl java jdbc org postgresql xa xadatasourceimpl java,push down
finished replication refactoring,extract
hv moving testutil assertion methods into a new class named constraintviolationassert,move
adding kindleresourcemanipulator to remove image resizing,push down
refactor tag handling in jgitrepository,inline
remove module related options from push pull goals,push down
add lwc history allows the viewing of all history items for a player or everyone dynamic arguments allow you to use the player name or page name anywhere lwc history lwc history hidendra lwc history hidendra lwc history and lwc history hidendra are all valid and will work later on will work hand in hand with lwc details,extract
fix wrong saved replace settings fix error when used terrain mode default move many terrain settings from world config to biomes old settings from world config will be moved to biome,move
try to get rid of the janitor and moved the day by day logic inside the importer this is a multi step refactor i need to simplify the code a bit because i am now lost the short term goal is to get back the helper on only one to be more central and that the fast import stream can stay the same as long as possible the documentation state that fast import can live up very long so let take advantage of this as most as possible,move
added functionality to remove and repeal law documents,extract
added apache commons net lib for laos tftp laos tftp support untested added libinfo class with version and driver information added moved junit tests old and stupid from visicut added getdrivername method to lasercutter interface changed epilogcutter splittet into epilogzing and epiloghelix,push down
pull out test methods into common areamoving the test methods that are in dynamicmongodaotest that aregeneral into the daotestsuite,pull up
this patch merges the identical methods from the jdbc and jdbc connection implementations org postgresql jdbc connection intotheir superclass org postgresql connection it also changes the close methods of connection and pg stream so thatpg stream no longer is responsible for sending the termination packet x to the backend i figured that protocol level stuff like that belonged inconnection more than in pg stream anders bengtsson,pull up
created reward source factory when reading config misc code clean up refactoring,pull up
roi added cansetposition and setposition d methods added cansetbounds and setbounds d methods added contains roi and intersects roi methods added roi darea and roi darea icycanvas and canvas d implements the new d support from roi overlay reworked the roi panel for better d support not yet completed sequencedataiterator and imagedataiterator implements the new d support from roi booleanmaskd added contains booleanmaskd and intersects booleanmaskd methods roi are now implemented as plugin roi classes moved fill sequence operation now use the roi properties to get the region to fill rectangled fixed union and intersection operation with infinite dimension added dimensiond classes,inline
metagen renamed test and fixed typo in test method,rename
resolving is just starting to function though it doesn t actually resolve anything correctly it does go through the motions hg rename src editor inspections inspections unbalancedassignmentinspection java src editor inspections inspections anonymousfunctionassignmentinspection java,rename
extracted a very unecessary dependency on java util uri this is probably the bigest change everrefactored on the system the uri classwas nested deep into the system for noreal reason it was assumed that allbackends would have a uri scheme andthat we keep the uri at all times onall buckets this was not the case andeverything from the bucket model to thepathresolver had to be refactored the change was made in the first placebecause glacier does not have a urithat we can just call instead we wantto configure each backend with key valuesinstead of with uri s this change to the system should alsomake it easier to transition intoa key value store since the abstractionfor transfering buckets is give thisbucket this key and when i give youthe key again then give me back my bucket,extract
removed predicate deserialization,inline
had to move some property sheet base classes to avoid circular plugin dependencies between core and ui this also adds configuration popup dialog framework default implementation is to display a subset of tabbed property sheets in a popup dialog extension plugins can override this behavior,move
a round of refactoring wow that turned out to be a big one i m sure there is now a lot of dead and duplicate code that must be removed this is next in line,move
closed task remove acess to width and height from model process programming issues issue ,push down
colormap combobox is now correctly handling modified colormap added pluginlauncher startsafe method which allow to handle exceptions reworked the threadutil invokenow callable method minors fixes and refactoring,inline
remove job as a decorator class and just merge it with player needed to fix some junit tests as well for this,pull up
refactor cellsclasses and replace deprecated superclass,move
cleaned up stgp initialisation classes,inline
rename parse methods to parsefoo for clarity and to avoid overload ambiguity,rename
removed previously added dependency injection since it just made the code more complex and imho didn t give any value,pull up
refactored the cov build post command cov analyze post command,push down
removed deprecated methods,inline
fix window delete change tabs,inline
core pipline and codecs moved tho the new repository,move
add iterator versions of getasyncbulk and getbulk add the following methods to memcached memcachedif bulkfuture asyncgetbulk iterator keys iterator tcs bulkfuture asyncgetbulk iterator keys transcoder tc bulkfuture asyncgetbulk iterator keys map getbulk iterator keys transcoder tc map getbulk iterator keys some times it is more convenient memory efficent to pass in an iterator of keys than it is to have a collection of them example public prefixadderiterator implements iterator private final string prefix private final iterator iterator public prefixadderiterator string prefix iterator iterator this prefix prefix this iterator iterator public string next return prefix iterator next rather than list prefixedkeys new arraylist for string key keys prefixedkeys add prefix key change id i ea ebd fd feeb ce fa ded b reviewed on reviewed by ted crossman reviewed by matt ingenthron tested by matt ingenthron,extract
java deprecated commentutil move parts to ast comment fix formalcomment,push down
refactoring tasks introduced single scheduling scheme hybrid of periodic and triggered scheduler executor redone,pull up
clean up queueing so that the majority of queued events are strings this allows putting them in a persistent queue store the default enqueue is string only now classes that want object enqueueing can cast to plainmessagequeue and call enqueueobject syntactic vinegar make many relatively simple value objects that get passed around in queues implement the bean specification so they can be passed around as xml instead this is done with enqueuebean a terrible name but dequeued objects are automatically unmarshalled back into the correct objects everything that passed around an auctionentry object to a queue now just passes the identifier and the queue processor gets the entry from entrycorral there may be a better way to do this but for now this works the timequeuemanager does unpleasant things to manage the differences between different kinds of payloads that need to be delivered possibly wrong things also canceling and setting snipes go directly to the server instead of being queued since it s not a long running operation lowering the number of moving parts in sniping operations thumbnail lookup and handling just involves a string url which is turned into real url in the manager this allows the thumbnail manager to be the only one that actually downloads the images instead of the ebayauction object the code to clear out multiple timecheck operations is removed there is a custom searcher serialize deserialize method that calls on searchmanager getsearchbyid to only load the right item theoretically i could do this for enqueuing auctionentry objects on deserialize pull them from entrycorral also but not right now i hate making huge checkins like this but once i started making deep changes to the queueing infrastructure i couldn t check it in until it was all at least stable and working git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,move
delete getdisplaysubject relnotes removed getdisplaysubject callers should use actualasstring overriders should use actualcustomstringrepresentation created by moe moe migrated revid ,inline
execstoptask class is extracted from runtask down protected run method is renamed to exec,rename
code refactoring in spredirect and sppost valves fixed the error page redirect,pull up
changed slider to checkbox in package graph view and removed it completely from cross package,push down
mph add gav parameter to calculate effective pom for any gav not only reactor adding an artifact parameter to the effective pom goal the name is to be consistent with the evaluate goal refactoring the common code into abstracthelpmojo git svn id f bb ffa edef ,pull up
prepared the base for distributed particle boundaries creation,push down
exploit new sourcepath option removed all guessing no more guessing of members classes and type casts removed the corresponding compiler options too the downside is that all imports must be accessible and parseable at compile time this means that we will also need something like a classpath before we can use this inside our maven plugin to resolve dependencies on jangaroo libraries the upside jooc warnings should be taken seriously now splitted analyze phase into scope and analyze changed parser to parse dotted identifier sequences as qalifiedide and increased priority of new operator to be higher than dot new a b c d is now correctly parsed as dot new ideexpr qide a b c d handled all code generation for qualified and unqualified ide expressions in ide and qualifiedide generatecodeasexpr no more tree rewriting in dotexpr and elsewhere i think we can remove the parent node slot in astnodes and change the return type of analyze to void code generation now adds the package prefix for imported identifiers and the private prefix for private static members this should be more efficient and less magical than the access via with we should be able to remove the with statements now renamed methoddeclaration to functiondeclaration as it is used for both added ast node for as expressions git p depot paths coremedia jangaroo change ,extract
 moved raise exception logic moved parsing response logic,move
moved references to slf j and classic into subclasswhen the concurrentserverrunner is moved to core it cannot referencedirectly the logger and loggercontext objects now the base classdelegates its logging to a subclass,push down
rename simple topic type field to avoid overriding identified type field topic s type field becomes topictype,rename
a major rewrite and simplification of storm components package code duplication removed,pull up
generalize ast treatment extracted a common node interface and base class combining common features of node and simplenode from all asts whenever possible reworked java and jsp ast classes to use the new interface all existing usages of simplenode changed to node yeah no more stupid casts for ast navigation visitation operations turned accessnode from the java ast into an interface as it should be deleted and renamed ast classes as appropriate to following convention in absence of simplenode classes jsp xpath rules are not yet working need to work on further generalization of ruleviolation code to make it a language feature and not something gathered via rule class hierarchy inheritance will be moving packages around soon git svn id baf d a c fc e d,rename
 refactor marker resolutions and quick fixes change id ibdcc cf cfbb fd c ba ce cfb c cb signed off by anton tanasenko,move
open hudson allowing view path not to be the same as view tag refactoring include most cleartool commands under cleartool abstraction removed most of specific implementations of cleartool to centralize in cleartoolexec git svn id c de d a be ed b c a,pull up
o added extraartifacts removed souts simplified getinitalgoals i know this is things at once but it does not seem impossible after all,extract
outstanding changes for merge,push down
new feature branch to allow a custom listener to be created for erxstatisticsstore such a listener can be used to notify an external monitoring system e g statsd graphite if request handling is slow,extract
refactored abstractname messageidkind name and namecollector,push down
fix add global annotations to graphs fixed a bug in which global annotations were ignored by graphhandler java and thus were not rendered by gnuplot added async call to hbase to retrieve global annotations when required in a similar fashion as that of queryrpc java note since both graphhandler java and queryrpc java implement similar query processing logic all of this should be unified in the future requires a large refactor to split all query logic with visualization logic signed off by chris larsen,inline
structural link bendpoints finished implementation of source and target movements,move
bug region add ability to replace a connection in the digraph rename method to replaceconnection and allow a null filter to indicate the connection is removed,rename
ashish ashok refactoring obd successful call details request,push down
biserver lots of code shuffling around to reduce interdependencies between controllers and the main class embeddedwizard additionally all messaging dialogs have been centralized in one messagehandler controller,inline
alex ian roy removed incomingpaymentprocessor and moved dao access from tabcontroller to plugincontroller,move
cw has been moved to rawdata model,move
moved the getposition method from linearmotion to motion,pull up
wee warnings cleanup,extract
consistency predicates minor change added missing javadoc consistency predicates refactor renamed a few methods in the consistencypredicatesupport api these methods now refers to a batch of existing object ids to return,rename
updates googleanalytics to reflect the recent measurement protocol update renames appview to screenview adds application id to the request change id ie bfdd a e a be fdce e a dffcf a ,rename
removing redundant functions in extgraph duplicated by sesame s graphutil movign implementations of util methods to graphs extgraph now an interface extgraphimpl the implementation calls are jsut delegated to graphs adding two new graph extensions which extgraph implements iograph for rio util methods and functionalgraph for supporting guava functional classes renaming statementfunctions to statements adding additional functional utility methods on there adding testgraphs for testing the main graphs funcionality generally cleaning up extgraph extgraphimpl,push down
fairly significant rework of the content stream handling code this should be a lot more reliable now,inline
more test cases to bucket movebuckettodir verifies that contents in the bucket is moved as well as the bucket verifies that exceptions are thrown when necessary,inline
refactor rename getyaxisgroupposistion,rename
added a global flag permission section to the config moved a few things around,move
hv move getter detection logic to separate class and allow users to configure it,move
refactoring of the chart interface,inline
refactoring introduce constants for elements move some methods to pomhelper,move
refactor rename method,rename
minor changes treenode fixed bug in computing leftw rightw treenode rewritten drawtree unionfindfind started working on shiny things tm unionfindfind rewritten find methods unionfind refactored renamed some variables enum types unionfindbuttons disabled buttons during an algorithm s run what to do the term from tea tomorrow signed off by viktor tomkoviƒç,rename
refactor to move the vertxhandler handlemessage to connectionbase handlemessage,move
minor changes treenode fixed bug in computing leftw rightw treenode rewritten drawtree unionfindfind started working on shiny things tm unionfindfind rewritten find methods unionfind refactored renamed some variables enum types unionfindbuttons disabled buttons during an algorithm s run what to do the term from tea tomorrow signed off by viktor tomkoviƒç,extract
add sorting of calendar txt and calendar dates txt entries by service id when writing to output add additional manipulation methods to servicedate initial entry for genericmutabledaowrapper initial entry for gtfsentitytransformstrategy support in gtfs transformer for the new entity tranformation strategy,extract
removed bpmn diagram type from tool profiles to simplify,inline
removing all google inject in preference for javax inject,pull up
move readonly command to clustercommands moved from binary jedis to jedis since binaryjedis doesn t implement clustercommands,push down
aesh moved masking into prompt,inline
renamed key property on varspec,rename
df some minor bugfixes ancestor instead of anchestor common some abstraction concerning fdockable and children allows clients to add their own specialisations common new concept of working area not yet fully operationable git svn id d d e b d d fefcacdf,push down
bplustree extracted innernode s constructors to init methods this allows the constructor s code to be reused in subclasses also extracted lastkey representation to its tostring,extract
extracting getvalue,extract
start fix problem with docx header footer by using master page manager,push down
moved uuid cache into namecache changed uuid get namecache get in byteman scripts,move
extended generated api with initsocket for now,push down
minor refactoring of androidforwarderrpc,inline
preliminary undo support fixed minor bug in viewer focus change improved imageutil scalequality method better icon quality fixed a minor bug with roi polygon interaction removing point while dragging added sequence calculatesize method to help in calculating a distance surface from a specified number of pixel search result producer are now sorted,extract
agova create api and common impl for jsr compliant framework more api cleaning changing packages and javadoc completion,pull up
leaving scmtestbase alone and instead moving tests incrementally to functionaltest using parameters,move
incorporated new visual design of login page and consent page made adding client apps work,pull up
extract interfaces to improve testability,push down
more intelligent way of getting the join relationships for a join entity will want to move that stuff down to erx once we have worked the kinks out of the notion of a sorted relationship potentially integrating in with the database context subclass that handles sorting automatically,move
renamed method,rename
removing internalcall to reduce internal stack usage a little bit,inline
refactoring no functional change simplify code to add background polygon type x b git svn id d f ee a dfeeeb ,inline
test refactored so it s possible to test with different classpaths,push down
oozie add ability to provide hive and hive action queries inline in workflows prateekrungta via rkanter,inline
refactor by creating an abstractxmldataset,pull up
refactor onemeasurement make returncodes private final make name final refactor repeated export code from subclasses,move
o refactoring move helper method to helper class git svn id f bb ffa edef ,move
minor module protocoldecl refactoring,push down
merged revisions via svnmerge from r alexsmirnov wed nov lines coding in progress issue rf csv code review r alexsmirnov mon nov lines coding in progress issue rf csv code review validator impl project removed r alexsmirnov tue nov lines coding in progress issue rf csv code review r alexsmirnov thu nov lines coding in progress issue rf csv code review r alexsmirnov mon nov lines coding in progress issue rf csv code review r pyaschenko wed nov lines doublerangevalidator longrangevalidator and tests was added r alexsmirnov wed nov lines coding in progress issue rf csv code review r alexsmirnov wed nov line remeve accidently added folders r pyaschenko thu nov lines regexvalidator and tests was added bugfix r pyaschenko thu nov lines requiredvalidator and tests was added r alexsmirnov mon nov lines coding in progress issue rf csv code review r alexsmirnov mon nov lines resolved issue rf optimize javascript utils r alexsmirnov mon nov lines coding in progress issue rf create jsf resource loading extension to dynamically add scripts and its dependencies r alexsmirnov tue nov lines coding in progress issue rf create jsf resource loading extension to dynamically add scripts and its dependencies r alexsmirnov tue nov lines coding in progress issue rf create jsf resource loading extension to dynamically add scripts and its dependencies r alexsmirnov wed dec lines resolved issue rf create jsf resource loading extension to dynamically add scripts and its dependencies r alexsmirnov thu dec lines resolved issue rf create jsf resource loading extension to dynamically add scripts and its dependencies r alexsmirnov thu dec lines coding in progress issue rf csv code review r alexsmirnov thu dec lines resolved issue rf create jsf resource loading extension to dynamically add scripts and its dependencies r alexsmirnov tue dec lines coding in progress issue rf csv development tests for client side qunit r alexsmirnov wed dec lines coding in progress issue rf csv development tests for client side qunit r alexsmirnov thu dec lines coding in progress issue rf csv development tests for client side qunit r alexsmirnov thu dec lines resolved issue rf csv development tests for client side qunit r alexsmirnov fri dec lines coding in progress issue rf csv development tests for client side qunit ,pull up
renamed compatibletype classcompatiblewith,rename
more cleanup issue number obtained from submitted by reviewed by,extract
split the layout into two classes made layout be an interface instead of a class moved the layout code into default layout issue number obtained from submitted by reviewed by,push down
changes to prepare the addition of overpass as an input source,push down
avoid code duplication extract a method,extract
refactored parameters,inline
core move returncode handling to onemeasurement returncodes onemeasurement hashmap concurrenthashmap closes gh ,pull up
reorg and refactoring of hashcode and equals methods,pull up
move workbench code as demo module,pull up
tests refactoring,pull up
all code that parses sql expressions moved into its own class,move
rsa simplifications,inline
mcheckstyle start some refactoring with moving rss generation to a dedicated component git svn id f bb ffa edef ,move
fixed minor issues refactored configuration layout added new integration tests upgraded to thymeleaf ,pull up
use the new dgs parser old one is moved to org graphstream stream file dgs oldfilesourcedgs this fix ,move
dev dheeru adding confirm adherence feature should fix it test for multiple patients renamed savedadherenceprompts to getadherenceprompts added resetpatientindexoperation class this operation should be added for every node in transition classes confirmadherencetransition persists adherence input captureadherencetransition adds input to session using encodebase urlsafe instead of encodebase ,rename
renamed some gameserver update methods,rename
refactored rule unit tests,pull up
extracted backend specific features in the consistencypredicates module implementation moved to the jvstm ojb implementation of cpsupport,move
changes for remote services,push down
recordbuilder add special support for filling record and list fields git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,extract
add webstart entry point for browser with no url or file open option move zoom to menu entry add warning on first zoom move preview to menu entry reorganize launch method a little to allow for multiple entry points,move
rename getnodexxx to getxxx where node is clear add prio,rename
open issue flexmojos move test runner into a separated component,move
refactor,pull up
added pesto solr module renamed view resolver to couchdb view,rename
renamed relate to create unique,rename
big refactoring to simplify user method names protected api of mvc parts,pull up
refactored rdfrelation into a basic executionplan structure,extract
renamed getrevision to getetag to make it match the response rather than how couch normally uses it,rename
refactored and improved loading of inventories and item schemata see koraktor steam condenser ,pull up
removed iterprocessor and replaced it with a new processor called datasourceprocessor datasourceprocessor is more general than iterprocessors previously template had a property called iterprocessor which was a special case for making a datasource object that was put into the main table of the report object datasource can do that when the tabledata property is set on the template as well as provide datasources for sub reports as well as for the main report,inline
refactored dictionaries portlet to use wrappers instead of model,extract
further wip on valiation reading did a hopefully final stab at loading validation which now constructs fixed objects containing resolution details for items and tests changes made to validation to match this some refactoring and tidying now required,extract
cleaning leftovers,inline
refactor move implementation of prepared and callable statements to pgpreparedstatement and pgcallablestatement note the code is moved as is no reformatting happens on the way for easier comparison closes ,move
entitymanager refactoring,pull up
removed some statistics that were only used in test code replaced them by simple visitors that only extractthe stored value from the raw data tree adapted the tests,extract
source update only lpoppush renamed to rpoplpush tested against redis commit e d b eb f c f e a f e ,rename
refactor move log to firefly slf j module,pull up
pull up some methods,pull up
rename methods,rename
working on added a forcemode method to ensure to refresh the pnode and added a dummy pnode to the layer in putmodelayer to avoid npes when the mappingcomponent is not yet listening to the layer,extract
refactored isymboltable and friends to properly support local labels inside of macros bugfixed macro handling line numbers offsets in expanded macros are currently broken and confuse the source level debugger syntax highlighting,pull up
added servicesview extension point to support future support of change id i cbe dfaa a b ab e c f,inline
bugs in the byteskey added regression tests,extract
issue finished saveall action refactoring of save action,pull up
katta created a separate kilkari service for handling call details both obd and inbox moving away from campaign service,move
refactor to make dashboard possible,push down
update pom to use joda draft of time zone parsing map between time zone names and utc offsets support for time zone parsing only time zones in timezone properties are supported tests for timezone parsing cleanup imports,extract
add filter for builds age,extract
sc qcadoomes delivery location field moved from deliveriestomaterialflow plugin to deliveries plugin deliveries required materialflow plugin now,move
added method for reading graphs from streams,extract
refactored sqsconnector into an abstraction to allow for easier implementation of multiple approaches,push down
inlined searcher searchfor toggle button,inline
modify the histogramdatapointdecodermanager to load plugins and create maps on instantiation that map byte ids to classes decoders so that we can use that for writing reading data in hbase signed off by chris larsen,push down
remove the task output queue it was a kind of crummy abstraction so now each worker can report progress whenever it wants with arbitrary json attached the controller will hang on to this data for the user as part of this took some steps to cleaning up the way the controller stores job metadata to be more flexible and threadsafe,push down
rest refactoring as per bug ,inline
renamed audit events to audit entries to prevent future name conflicts and refactored some audit code,move
faces rename responsive attribute of alloy inputdate and alloy inputtime to nativewhenmobile change and remove responsive references in renderer and responsewriter in order to be consistent with inputdatetime components,rename
hv move validationextension to the exported package,pull up
fixed fd leak git svn id f bb ffa edef ,push down
add kick to the command list changes to kick command,inline
jvstm lf several refactorings on the transaction classes,move
rsa additions and refactorings,pull up
moved prompt to only item del settings,push down
enhancements for service dynamics,inline
remove notion of chunk and make an overral simplification,push down
common moved loopbound getter setter to methodcode,move
deprecated downloadfile move url download into downloadfilebyhash possible to download files into our cas now though not implemented i believe,move
add a more generic configfunction many of the upcoming resources in the bo s wouldn t actually be resource now resource extends the more generic configfunction,push down
remove thread locals when storing statements,inline
hv inlining some trivial methods,inline
moved all except bsp setup and clean to abstract class graphjobrunnerbase git svn id f bb ffa edef ,pull up
made tarunarchiver not subclass abstractzipunarchiver refactoring suggested by viktor sadovnikov,pull up
refactoring for gipps krauss and newell model parameter dt is now taken directly from the simulation update timestep which is fix for one simulation,extract
further refactoring of jsonfactory,push down
mass rework of rhogenwizard launcher rhodes parameterstab class,inline
hv inlining some trivial methods,inline
extract out function for default homedir calculation,extract
cleanup moved property label providers to adapterregistry,push down
refactoring of selectors before i start with extend ,inline
o the iosession is made responsible for encrypting the data when in secured mode o moved out of nioselectorprocessor everything which is ssl related moved to sslhelper o get rid of many flags that are not necessary when dealing with ssl handshake o used a wider buffer for handshake unwrap o refactored the complete handshake logic o made most of the sslhelper methods private o added some missing buffer increase git svn id f bb ffa edef ,move
removed icyfileutil and icynetworkutil classes persistent ribbon minimized state fixed multiple carriage return in plugin detail panel description moved actions from preferences code modified internet connection monitor icon,move
archivebucketsize fetches bucket size metadata from the archive then reads it this will later be generalized so that glacier archiveid can use the same code by removing the dependency on bucketsizeio and only needing to specify filename all of this code can be reused for any immutable metadata that should be persisted and cached,inline
completed a static analysis pass using findbugs and netbeans hints to resolve almost small issues throughout the codebase there are still a few issues outstanding that are either presumed false positives from the analysis tools or require substantial refactoring to resolve additional issues are likely arise when better annotation is employed,move
a fix to an unfortunate rare concurrency problem during injector creation it s possbile that an inject method will start a thread and attempt to access injected members while the injector is still being created the identityhashset of members to inject is currently accessed and everything blows up terrible the fix is somewhat involved so i moved it all to a new class creationtimememberinjector it takes care of preventing other threads from accessing injected members until all such members have been injected git svn id d f a b b b d aecad e,move
added schema manager service to encapsulate meta data store creation new test caes and refactoring of existing test cases for such partially address brisk ,pull up
code cleanup,extract
rsa refactorings,move
ashish sush added csv builder renamed controller method refactored callback request to retrn enum value of operator instead of string,rename
support for file clause when specifying entity type in add operation,extract
nxbt add method to do a trial registration,extract
hv move the extraction of the value to validate to metaconstraint it simplifies validatorimpl and paves the way for the next steps,move
fixed support for truststore with multi pems extracted a method to read certificates bag use it indirectorytrustanchorstore,extract
detail aid group id atid refactor to create manufacturing order based in make to git svn id f ce d ac b f ,extract
simplification of sharding,push down
refactor code of project and model creation wizards,inline
jcbc add tracing to remove motivation this changeset refactors remove to include support for tracing and spans change id i cc cb a e a d d d a bb b b e reviewed on reviewed by david nault reviewed by subhashni balakrishnan tested by michael nitschinger,extract
arq improve init cleanupstatement handling rename properties to more meaningful ones,rename
loader dialog added z and t range selection added channel selection added resolution level selection improved preview loading saver dialog removed z and t range selection better to do adjust range before added saveroptionpanel for easier setting definition setting are now preserved in xml preferences display warning if output format can loss information conversion is now automatically done loader added checkopening method to check we have enough resource to open an image added methods to load only sub part z t and c and sub resolution of the image fixed issues while using importer on non image files many changes in general new methods refactoring bio format importer added multi thread support added tile loading for large image and sub resolution loading better thumbnail loading saver added many new methods to check compatibility image writing compatiblity reverted channel combination for channels image saving in tif format better for rgb image preview methods doing z t range saving operation are now deprecated better to do it before added method getcompatiblesequenceforwriter to automatically convert a sequence so it can be save by a given writer possible data loss roi d added add exclusiveadd intersects and subtract operations roiutil added split roi line d to cut split a roi from a given line d gui reorganized file roi tools menu added open region command to load a specific region of an image at a given resolution level added roi d to d stack conversion added roi shape to mask conversion added roi mask to shape conversion added roi component separation tool added roi line cutter tool sequence added position x y z information metadata added origin resolution xy region z range t range channel information when loading sub part of an image added getoutputbasename getoutputextension and getoutputfilename to obtain wanted output filename given origin informations trying to load too large array of data throw a toolargearrayexception exception sequencepersistent added isvalidxmlpersitence methods sequenceutil sequence merging operation is now possible with sequence of different type fixed possible memory leak issues with some methods better colormap metadata preservation added getoriginpoint convertpoint for point position conversion operation added getoriginrectangle convertrectangle for rectangle position conversion operation abstractimageprovider pluginsequencefileimporter pluginsequenceidimporter improved default getthumbnail implementation added getimagebytile method to load an image by tile useful for large image icybufferedimage trying to load too large array of data throw a toolargearrayexception exception added copydata array method to copy data from an array icybufferedimageutil added fast downscaleby methods to quickly downscale image by a factor of systemutil reworked a bit memory methods they should return more accurate values getjavafreememory return the total amount of free memory available to the jvm getjavamaxmemory return the maximum amount of memory the jvm will attempt to use getjavaallocatedmemory return the memory currently allocated by the jvm getjavausedmemory return an estimation of the memory currently used by the jvm getjavatotalmemory is deprecated replaced by getjavaallocatedmemory roidescriptor added getdescriptor descriptors descriptorid method metadatautil replaced omexmlmetadataimpl class by omexmlmetadata more generic check if that bring issue imagejutil added converttoicybufferedimage method to convert a single image from an imageplus to an icybufferedimage polygon d polygon d polyline d fixed adding new point on an empty polygon polyline improved memory usage estimation in memory monitor defaultsequenceedit default undo operation on sequence also preserve roi and overlays now reference only added rectangle dutil and line dutil classes many bug fixes several tweaks and optimizations some code cleanup,pull up
msgpack value v implementation add messageoverflowexception to support integer and float types using channelbufferinput when fileinputstream is passed to the unpacker added test cases for reading various types of messagebufferinputs added valueholder of integer float raw ext values added unpack method targetted to valueholder throws messagetypeexception when failed to convert the cursor type moved msgpack value code into msgpack core scala support moved valuetype to value package added gettotalreadbytes method added arraycursor and mapcursor introduced valueref as a super type of value,move
extracted calling search peers from listbucketsendpoint ,extract
change to digest mutabledigest to replace hashmap with arrays uses less memory ,push down
abstract tostring into abstractnode deprecate the implementation log that the default implementation will be removed,pull up
her expand beanshellprocessor beanshelldeciderule for every jvm friendly scripting language javascript jython groovy jruby beanshellprocessor java scriptedprocessor java beanshelldeciderule java scripteddeciderule java update to use any present jsr scripting engine requested by free text name update to allow script to come from inline string or file just as with seeds modules pom xml include groovy and jsr capable jars classpath add new jars to classpath beanshellprocessortest java scriptedprocessortest java rename empty test class,extract
refactor the clustered event bus tests to reduce the number of tests signed off by clement escoffier,pull up
fcrepo fcrepo allow both parent child and child parent relationships rirelationshipresolver based on querying resource index child parent and parent child relationships specified in config melcoe pep xml test case added to match hierarchical collection policy using range of relationships,push down
o refactor the creation of title and summary for the report into a couple of common methods in the parent git svn id f bb ffa edef ,pull up
fcrepo cleanup all tests pass,pull up
refactoring method idval string is only used for xml reader git svn id d f ee a dfeeeb ,push down
tweaked build of autogen ed scripts light refactoring,inline
refactor oauthappsettings by splitting interface and move builders to implementation agoravaextension in cdi now link oauthapplication annotation to default builder implementation,push down
moved modelversion up to a top level class erxmodelversion erxmigrator modelversion now extends erxmodelversion and is marked deprecated it s just too common to make you type the fully qualified import all the time,pull up
massive reorganisation to streamline grammar make faster and cleaner and more dynamic,inline
do some refactoring pass the account properties and messagebank around in a freemailaccount object to things that need it rather than creating them as needed this means we always use the same object rather than creating them as needed git svn id file home toad git migration temprepository trunk apps freemail a e eb a c ee a ,move
introduced non string exml constants some refactoring allows the idea plugin to reuse utilities needed to guess the constant s type if not given explicitly and to render the constant value correctly e g string quoting,pull up
nojira version in this version added xstream implementation for retrieving xml in xstream package moved dom j code to new dom j package updated edit functionality added new controllers added multiple locations ability externalized many items in jsp pages classes to messages properties updated pom dependencies externalized constant variables to interface adjusted test to handle more generically and correctly created smaller accuweather logo added accuweather com terms of use file git svn id f dbab f eb b e eb,move
vandana ashish moved the pack completion logic to subscription class and added some logging statements,move
aesh commandcontainer is now an interface and a commandcontainerbuilder have been added to provide a pluggable way of creating commandcontainers,push down
merged refactor to make cover cache use cache interface fixes ,extract
renamed method,rename
refactoring collapse input classes,pull up
meclipse connecting existing workspace artifact projectspatch submitted by richard van nieuwenhovenpush down from abstractidesupportmojo to eclipse mojo everything related to eclipse workspacegit svn id f bb ffa edef ,push down
renamed x center attribute to x in and according code changes renamed x init attr in,rename
adding support for mapping of reference attributes and lists removing dozer based implementation,pull up
update databukkit abstract config simplify improve loader,inline
nutch added a summarizer extension point and two enxtensions summary basic is the current nutch implementation moved into a plugin summary lucene a raw version of a summarizer plugin based on lucene highlighter git svn id f bb ffa edef ,push down
refactoring some of the entity code in preparation of the minecart hooks,pull up
refactor construction of beansxmlimpl,extract
added icons and startup screens landscape ipad startup does not work bookmark icon does not work,extract
simplified stream examples,inline
refactored conversion result to be an interface removed basetest re enabled tests that were temporarily disabled,push down
removed all references to bezierpath included a new jython version because b could not access path getters,inline
added support for using primitives with rendertext added sample os using invoke tag with local variables,extract
refactoring file test dataset by creating abstractfiledatasettest,pull up
filter support extended,push down
major refactoring and support to web forms,move
fixed sampling and efficiency problems in creating splits for numeric nodes also renamed some things,rename
nxp move webdav files around,move
rename bench methods,rename
refactoring towards moving db engine specific bits into a subclass hierarchy replace concat with operator for postgres,move
removing support for add and mod,inline
adding selector interpolation new style,extract
some comments in media are still missing but an important refactoring has been done meantime astbuilderswitch does not have to call postprocess anymore comments are finished after in an independent final tree traversal,push down
adding unit tests for various service calls mostly dealing with app creation and modification,push down
once again a temporary commit to keep modifications do notcompile modified the queryoption mechanism once again should be the lastversion to be extensible now queryoptions are inherited fromqueryoption and declare their own typed and named fields it s easierfor understanding and tracing options but it requires some more castsin the code modified the whole jdbcpersistencemanager according to the newoption mechanism and added a specific queryoptionjdbccontext forstatement reuse,push down
rename some variables and methods in memmain java memory plugin interface update reverse calls of imemlisteners in memmain firechange,rename
rename replaceableformatter to replaceableformatwriter,rename
a bug fix which caused improper termination fixed datasourcecomponents do not anymore need to have schema information all of these are moved to sql generator part,push down
change show hierarchy it uses to go like this showoption extends object show extends showoption localshow extends show failedshow extends localshow now it goes like this showoption extends object failedshow extends showoption show formerly localshow extends showoption series formerly show extends show so places that are supposed to be able to take either a failedshow or a show now must accept a showoption but other places that still take a show can now be guaranteed that the object they get is not a failedshow as mentioned the class that is now show is what used to be a localshow reversing the inheritance makes more sense there is no place that took a localshow but couldn t use a provider recognized show but classes like listingslookup only make sense with a non local show now it uses series so there is no worry about it getting a non series show a fileepisode no longer accepts a failedshow when we fail to get a show to map to the fileepisode we call setepisodeshow with null which updates the seriesstatus we no longer have to check for having a failedshow in the actualshow slot though we still need to check for it being null when we re using instances of series also change variables and comments to refer to series rather than show,pull up
evaluate moved from librarybase to termapi,move
added uncast and array methods,extract
indexer handle record delete move the create update handle code into a separate method git svn id svn ssh dev outerthought org outerthought lilyproject projects lily trunk b d f e bd e a dc ,move
minor internal refactoring,extract
updated flow latency analysis stuff we now have an explicit report entry element for sampled latency it is currently added by the component when it is sampling this is separate from the processing latency will need to add it for the connection if the bus is sampling i e operates periodically added capability to generate report for synchronous and asynchronous synchronous does the reduced sampling latency by rounding up rather than adding the full sampling latnecy it does so by adding the difference needed to round up,extract
fixed zooming behaviour coerced the various zoomin out all original into a single point of entry unified the stateu updating behaviour of the zoom actions to a single point the zoom level is now restored if a new acquisition is made some cleanups,inline
csharp parserand csharp merge parser,inline
rename nestededitorinfo to editorinfo the long name is getting unwieldy and preferably editorinfo should get passed instead of ieditorpart so the rename clarifies what it s for,rename
bug add progress monitor to long runing secure storage operations,extract
external auth provider refactoring,pull up
major cleanup of the query api moved the query language syntax specific functions into the corresponding dialect implementations finally thusly we only need one query factory that just delegates all query lang specifc things to the dialect killed the subclasses of the factory killed the subclasses of rdfquery all that stuff also moved into the dialect then added an arq specific sparql dialect to support their special bnode id syntax this organization i think more closely aligns with the normal jpa stuff and is a win for adding new rdf query language syntaxes also provided a work around for the namespaces stuff for when using empireutil all before ever using an entitymanager,move
pulled reusable code out of the ascii operation impl,pull up
rename parmeterholder getparams to getsetparams,rename
addressing issue refactoring towards native adea action toolbar also moved all action code into separate classes,move
rename method and fix typo,rename
verification method moved to util class,move
jvstm ojb moved consistency predicate generation out of the cp module this commit reverts the changes added in fdeda b,move
sc qcadoomes refactored production balance moved calculations from production records to production balance included tpz and additional time in calculations,move
rename attributes coerceattributes to attributes updateattributes,rename
added the ability for validatorresults and validatorresult to have an object returned from a validation method be associated with the result status git svn id f bb ffa edef ,extract
removed abstractwarzonecommand and moved methods into war,move
fix for actions being run more than once when more than one term in an or matches also the related bug where more than one element is created with a continue under the same conditions this is a moderately extensive fix so watch out for regressions git svn id d f ee a dfeeeb ,push down
open hudson ucm implement scm new polling logic to support rebases better a bit of refactoring refining some edge cases no load rule git svn id c de d a be ed b c a,push down
faces bridge does not remove the id of the portletnamingcontaineruiviewroot from the list of execute and render ids from ajaxbehaviors backport compatibility layer minimize diffs across branches,pull up
combine processing of primary sponsorsxml s billstat and ldspon files both specify the primary sponsor sobifiles also need to specify the primary sponsor a new method has beencreated in the abstractdataprocessor to combine all of this processingat one point to reduce code duplication,pull up
some refactoring move all translator functionality from formula to org eclipse iee translator antlr project,move
big refactoring added ioprocessor a thin layer which is similar to the reactor pattern renamed abstractiofilterchain to defaultiofilterchain because of the abstract methods of abstractiofilterchain are now moved to ioprocessor interface moved common parts of various iofilterchain implementations to defaultiofilterchain removed other unnecessary iofilterchain implementations added iosession getprocessor so that defaultiofilterchain can access the associated ioprocessor extracted interface from serialsession and all the implementation goes to serialsessionimpl git svn id f bb ffa edef ,move
more changes towards a massive refactoring of the auctionserver class to be more specific more testable and more sane git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,push down
split cache analysis start with some experiments on method cache persistence regions and some cleanup documentation,extract
code cleanup of search ui,extract
change title handling of abstract finance view rename abstract gettitle to getdefaulttitle add new gettitle returning the text of title label remove updatetitle update all classes using the methods mentioned above,rename
refactored argument node hierarchy,inline
renamed upload for signature files to install throughout github issue ,rename
added support for tostring annotation the code for generating tostrings has now moved from handledata to the new handletostring,move
added a compact option to the graphsonutility ,extract
unit tests for ant epox nodes towards and related fixes,push down
simplified trafficsignal initalization,inline
cleanup and fix overwriting of protected flag,inline
adding a few new vocabulary files mostly though fleshing out more of the query builder stuff various fixes and refactors such that it seems to work reliably now also adding a few more utility functions to the core utils bits that i need for various other projects,push down
new sequencebuilder class to help in building a sequence with multi threaded algorithms icybufferedimage added method to load only a sub part of an image minor speed improvement in loading some multi channel image better default channel colors improved error handling with networkutil download method modified classpath manifest to reflect libraries changes refactoring,pull up
massive refactoring to separate unit tests from integration tests,inline
remove automatic updating instead a notice will be printed in the console,inline
begun refactoring towards making war deployable,pull up
bug changes in the plugin xml while target is running are ignored on subsequent restart,inline
added test for case where only an area of interest is defined,extract
refactored iteratestage to use teststage as base class teststage got timeout and synchronousrequests properties generalized the way how results are gathered from stressors logic iterationstatistics generalized to iterationdata added example configuration for iteration,push down
nxp refactor to use different type of queue moving dispatcher from queue manager to producer start impl cqueuemanager,push down
readablity and supportability improvements includng code comments renames and refactoring motivated by code review feedbacks,move
add generator ztl to scala it is not totally completed,extract
refactor extract create parser method,extract
extract the main bindingimpl factory implementation of providermethod into an abstract base class this is a prefactoring for moving multibinders into the core all the multibinder factories will share a lot in common with providermethods they are providerinstancebindings the providers implement providerwithextensions the usersuppliedprovider is a bit of a misnomer so we provide a standard implementation this also removes the providerlookups from every providermethod which were pretty much unneeded created by moe moe migrated revid ,pull up
added diversion option to gendreau scenario,extract
nxp cleanup use of coreinstance,inline
feature introduced modulevalidation with the following constraints avoiddotandjaronbundlecpconstraint checks if a bundle contains jars and unjared classes eclipsebundleshapeconstraint checks if a bundle requires to be unpacked and doesn t contain the manifest header eclipse bundleshape dir projectencodingconstraint checks if build encoding project build sourceencoding is equal to the eclipse project encoding encoding,push down
refactor to move mime type and file checking to one location fixes ,move
divide color class to three classes color interface rgbcolor class hsbcolor class remove colormode refactoring many sources,push down
rename getsourcestring getsourceasstring don t use parser,rename
make mongosplitter an abstract class move splitter implementations into subclasses,push down
rename oscjavatobytearrayconverter oscserializer,rename
exojcr digest auth redesigned,push down
o extracted a few methods to make method fit in printed pages no functional changesgit svn id f bb ffa edef ,extract
include rentals eomodel in eogen configuration refactor eos from the rentals model to use superclass methods where possible add ercoreuserinterface implementation to user entity and use this instead of the newly added appuser entity remove appuser entity from the movies model and delete the related migration,pull up
renamed collectioncontaining hasitem arraycontaining hasiteminarray,rename
minor refactoring necessary for the css stylable version of the ajax upload button to work,pull up
extract generic octal formatting method to simplify code and eliminate array copies change leading padding to zeroes as that is more compatible and required for posix git svn id f bb ffa edef ,extract
pulled out common code in my optimization tests into abstractoptimizationtest refactored fipplefactor and naf optimization tests to use abstractoptimizationtest,pull up
extract the readbinding method so that it can be publicly reusedfixes ,extract
jgrp multiplexer should execute getstate for all registered muxchannel under one flush phase simplify flush invocation for getstate,inline
renamed test methods to conform with test guidelines,rename
refactor error handling so that exceptions can be reported to my site without circular class references git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,extract
moving tests around nothing important,pull up
ngrinder support concurrent multiple test very little clean up,pull up
refactored the code to move the ssl handling to the session configuration instead of the service git svn id f bb ffa edef ,move
configuration updates and changes to add missing properties and such made mobspawn command say it failed if spawning actually fails renamed lavaslime to magmacube as per the community name for it updated the readme a bit,rename
refactoring ivory app classes to reduce code duplication,inline
changes to remote service api and additions to implementation,inline
extracted filechecker,extract
faces after invoking an actionurl the bridge remembers resources that were in the section of the portal page refactored to make it easier to backport to jsf based branches,move
move recordmanager back to interface,push down
pc optimization refactoring only unit tests missing it tests refactoring,inline
removed deprecated method getconfigserver,push down
support for creating ordinary indexes currently only frontbase and mysql are supported use default index name when none is provided in erxmigrationtable addindex adduniqueindex,extract
ashok aravind introduced valid state transitions and pushed logic from service to subscription module,push down
add writer output to epubprocessorsupport,extract
removed setters from responsedefinition and made corresponding additions to responsedefinitionbuilder,extract
addressed,extract
refactored abstractname messageidkind name and namecollector,pull up
finished moving the painting code into the renderers issue number obtained from submitted by reviewed by,move
 added labelfeature functionality to all bpmn elements that have labels,extract
workings on permissions extracted an interface from permissionprovider to allow multiple and eventually plugin level exchangable permission provider implementations refined permission lookup again so haspath will take into account asterisks which it wasn t doing possibly causing derplings rewrote the addpath algo to be a bit more effective,push down
renamed gettoplevelproject to getexecutionrootproject to avoid misleading top level which is a different notion from the notion used in getrootsite git svn id f bb ffa edef ,rename
changed sink and source drawing generalized line drawing,inline
insignificant cleanup ci skip,push down
z added support for multiple ensembles,extract
revised code for bitext extraction we now process each sentence separately to balance load among mappers equally also other fixes her and there,extract
vishal shruthi refactored transitions to use prompt builders instead of using node builders,inline
prepare nodecontext for nested lists support not all tests are working yet but the current refactor is dramatically simpler support for published ports which is how nested lists will work is forthcoming,inline
rewrite gui of terminalwindow move gui package to terminal gui added configdialog and a possibility to save settings reorganize sources optimize,move
wip cleanup,pull up
refactor test execution methods conflicts src tests cputests java,inline
add initial support for debug logs,extract
riak added a workaround to allow strong consistent scan transactions riak moved the utility function createresulthashmap to the utility class riakutils java riak added riak strong consistent scans bucket type property to riak properties file to set the fake bucket type name riak updated readme md with a guide on how to allow strong consistent scan transactions,move
path compilation issues tests moved to proper location,move
rename method configuremetricsreporters to configurereporters,rename
icons moved drag and drop interface updated dockables can now be dropped left or right of a single tab git svn id d d e b d d fefcacdf,inline
moved real code to hidden class made jgroups imp subclass added init,push down
all static methods removed from gremlinevaluator scriptengine implemented console and script exector moved to scriptengine all libraries are in the com tinkerpop gremlin compiler context package now,move
adding first pass of compile time guice also moving stuff to internal to make constructionproxy and reflection classes available there git svn id d f a b b b d aecad e,move
common jcopter wcet moved various dump options into own subgroup,move
add unit test and fix resolveparentref,extract
itoollocatorservice is now fully integrated into the preferencepage the user can now choose between the shipped binary and a user defined version moved the prefpage stuff to the new packages renamed the prefpages,rename
start to create new layout for the toolbargroupdodckstation new version in this purpose the main panel of an abstracttoolbardockstation is defined in the subclasses an no more abstracttoolbardockstation class itself,push down
add secondary index to search by parents improve hadoop fs ls by adding another secondary index to associate a parent path to a file path,extract
rename equality method for separation from java and consistency with the dart implemention,rename
cleaned up stackimpl and localsimpl by moving logic into typeutils,move
refactored selectorparser logic into linkedinselectorparser as first step to creating agnostic selector,push down
code inspection changes,inline
metrics improvements rename a few things and use static instance for dummymetrics as they are stateless,rename
application entirely reworked the sequence image operation band new sequence resize feature new c z t operations new color conversion feature general improvements better plugin error report better colormap preservation when switching from d to d canvas better icy to imagej roi conversion minors improvements here and there modified roi dpoint so it now intersects point and do not contains it more consistent with other roi fixed a minor bug in roi getbooleanmask method fixed a minor bug in roi d contains and roi d intersects methods others bugs fixes developer loader added methods to hide the progress bar added getmetadata file file method to retrieve the metadata of an image file added loadimage file file int z int t method to load a single image from multi image file added icybufferedimage copydata src int srcchannel int dstchannel to only copy data for a specified channel added exceltable component to display excel type table added abstract method getviewcomponent to icycanvas so we can always retrieve the display component in a canvas improvements on sequencepreviewpanel and sequencerangepreviewpanel components added icybufferedimageutil class general icybufferedimage tools added methods to sequenceutil class fixed cursor preservation on canvas d added maininterface getsequences string name to retrieve sequence by name fixed a bug in imagedataiterator added a command line option to remove splash screen lot of refactoring and source reorganisation check deprecations,pull up
wow just wow fixes correctly and cleanly rely on templates,inline
renamed eagerly to aseagersingleton git svn id guice googlecode com svn trunk d f a b b b d aecad e,rename
from wonder bunch of fixes cleanups etc to stream utils including nio based file copying,extract
her bloomfilter bit bit length bug prevents full bitfield from being used premature saturation bloomfilter bit java include the split to subarrays for larger bitfields and round up to power of for performance options previously in largely redundant classes fit a number of problems with int long overflow and bitwise ops add methods for reporting testing bloomfilter java add methods for reporting testing bloomfiltertest java bloomfilter bittest java more extensive tests including two lengthy tests of default oversized blooms usually disabled by renaming bloomfilter bit java bloomfilter bitsplit java bloomfilter bp java bloomfilter bp split java deleted as buggy or redundant benchmarkblooms java move to test source dir bloomuriuniqfilter java change to accept filter instance rather than parameters for added configuration flexibility fix comments bloomuriuniqfiltertest java supply filter not paramters,move
refactored statistics recording api,move
rremoved invariants,inline
renamed column to be more sql friendly,rename
jsdk as a sdk user i would like to avoid double posting manual journal entries via api added new public method supporting posting of gl journal entries with transactionid,extract
moved regenerate and made it static,push down
renamed constants to follow java standards removed catch exception block git svn id f bb ffa edef ,rename
rework surface generators the biggest change is that they are now run during terrain generation instead of population previously the surfaceblock groundblock would be generated by chunkprovidertc and then overwritten by the surfacegenerator during terrain population now the surfacegenerator is responsible for generating surfaceblock groundblock nullsurfacegenerator is now called simplesurfacegenerator as it now generates surfaceblock groundblock and the old simplesurfacegenerator is now called multiplelayerssurfacegenerator generatingchunk has been added as an object to hold various data about a chunk being generated chunkprovidertc still uses its temporary class fields i hope to refactor this class in the future to use generatingchunk everywhere,push down
modularize query execution and add complete v protocol support removes jdbc jdk support oliver jowett,inline
add prettyprint with indent option,extract
rename method from getactionid to getactiontype on groomserveraction git svn id f bb ffa edef ,rename
shift further method to parent,pull up
libmanager now able to load in lgl and lib files added loadfile method to delegate and store in list added loadlgl method for lgl workhorse renamed loadlibfile to loadlib for lib workhorse notice mask is statically imported from gmstreamdecoder default libs in lgl format included in resources library lib consider location not loaded in yet timelineframe still doesn t know location updated libaction merged execcode and execfunction into execinfo since you can t have both at the same time added updated methods to gmstreamdecoder read now handles errors byte read and read for and byte integers readi renamed to read readstr for byte preceded strings instead of mask for easier bit masking statically imported in libmanager updated references in gm file git svn id f f bc e be cd ,rename
 preparing moved the lightweight meta objects related methods to the dbserver,move
more refactoring mainly pushing more stuff out of md java and into the clients this may end up getting pushed back in again but i think it s the right thing to do for now git svn id baf d a c fc e d,push down
jbide remove refresh of all ienvironmentvariable on add remove actions please reference the following change log removed update calls from environmentvariableresource destroy applicationresource addenvironmentvariable applicationresource addenvironmentvariables and applicationresource removeenvironmentvariable added applicationresource removeenvironmentvariable ienvironmentvariable renamed environmentvariablebyname to environmentvariablemap updated getorloadenvironmentvariable to work check for emptiness of environmentvariablemap updated loadenvironmentvariables to work on environmentvariablesmap and return it in contrast to a locally scoped version that did not persist corrected test failures due to omitted changes to instances methods for environmentvariableresouce and applicationresource updated remove methods to use remove ienvironmentvariable and applicationresourceintegrationtest to use application removeenvironmentvariable ienvironmentvariable in testing added integration test for removeenvironmentvariable ienvironmentvariable updated applicationresource addenvironmentvariables map to filter the incoming map key value pairs if they are duplicate keys without different values this update should resolve unecessary update dto requests being generated rebased up to nov since the original pr got behind corrected possible logical error that was accidentally included in addenvinronmentvariables map with the original pr if testvar null else rebased again to support merge with most recent version of upstream master nov corrected applicationresource removeenvironmentvariablebyinstance ienvironmentvariable and applicationresource removeenvironmentvariable string to correct failing test s,rename
simplify test framework some tests were incorrectly setup,inline
rework thetvdbprovider into smaller methods break up the jumbo methods in thetvdbprovider into more manageable chunks add a utility class for generic xpath parsing add a utility function in stringutils for turning a string into an integer move some constants into constants java and be more prepared to work in a language that s not english add an ability to prefer regular episode numbers to the dvd numbers though it s not used yet re use objects when it s safe to do so improve error messages have method signatures prefer interfaces list to implementations arraylist add a comment to constants java,extract
extract some methods in doiserviceimpl,extract
changed tests to use the modified channeltestbase,inline
refactored mod chests inventories compatibility,push down
extracted a method to parse the comment contents,extract
df qcadoomes changed locales,push down
added collectiontable implementation,extract
prevent adding an archiveentry with same name twice to an changeset git svn id f bb ffa edef ,extract
o extracted a couple of other small classes from the booter cleaned up on a few other minor style wise irritations that were left over from the larger refactoring in previous commit git svn id f bb ffa edef ,inline
retire monolithic clienttest vreak out into smaller individual tests move some tests under service,move
mouse and keyboard behavior of views can be changed you can now change the mouse and shortcut managers for views with your own implementations the old mousemanger and shortcutmanager classes are now interfaces and a defaultmousemanager and defaultshortcutmanager have been added,push down
bugfix line wise visual mode behaviour on empty lines during motions when selectiong empty line moved code that finds lines containing positions to static method startndtextrange lines,move
simplify roadmerger add static to methods were possible move evaluation of routeflags to convertedway rename element getentrysetiterator element gettagentryiterator git svn id d f ee a dfeeeb ,rename
jenkins add new selectors for perforce and p plugins that allow to update jira issues based on jobs associated with changes other changes refactor selectors break down methods in defaultissuesselector so that it is easier to reuse side effect is that defaultissueselector now will be fully recursive once the other problems are fixed fix resources defaultupdaterissueselector config jelly selectors defaultissueselector config jelly,inline
push crawluri and related constants down to modules subproject package many,push down
improve javadoc remove empty tags add new addanimation method,inline
rename methods,rename
rest of the views added,extract
rename charsequence variant of jsonstringencoder quoteasstring,rename
merge mapred branch to trunk remove it git svn id f bb ffa edef ,pull up
cut overall object instantiation in half by changing fileheader generation algorithm for a percent performanceimprovement when archive contains lots of small files also extracted two private methods createlocalfileheaderand createcentralfileheader in ziparchiveoutputstream these may have some interesting additional usages in the near future this is basically a tactical refactoring scatter gather had awonderful performance in the scatter algorithm but spentan equal amount of time in the gather phasegit svn id f bb ffa edef ,extract
previously migrations would migrate a sequence of models to their latest versions in order however if you are crossing a series of versions it s possible your migrations actually have intra model version dependencies for instance if app eomodeld depends on authentication eomodeld you can t just blindly migrate authentication to the latest version followed by migrating app to the latest version it s possible you may have to auth app auth app this change introduces the ability for a migration to return a version dependency for another model previously dependent models were not automatically migrated either this can potentially cause strange problems not dependencies are traversed so that by the end of the migration process for model a a and all of its reachable dependent models will be upgraded to their latest versions if you are migrating to a specific version then dependent models can not automatically be upgraded to any version other than what your migrations specify in their dependencies,inline
refactoring to make nexusurl non needed there was a mess this change should clean it up a bit out of strategies we have deferred and direct strategies does not tamper with rest they should be able to work without specified nexusurl in plugin configuration on the other hand the image and staging strategies do use rest former to close and latter fully uses the v rest api of staging now class hierarchy is cleaned up too non client users extend abstractdeploystrategy while client users extend abstractstagingdeploystrategy,push down
introduce field level metadata changes include added metadata immutable and metadatabuilder to api opted to make these concrete objects which the other builders are in fact not record extended with metadata get set methods read write path support for metadata for fields without metadata storage format stays the same bits of the prefix byte are used to indicate the metadata serialization version and at the same time the prescence of metadata no metadata see new class fieldflags were it s documented metadata not supported for versioned mutable fields matter of saving implementation time on something that probably has little value read always decodes the metadata if this would be a problem we can make loading metadata optional and or do the decoding lazily added metadata to binary record serialization which goes over avro bumped serialization version number,extract
refactored kernels and added constraint rules,pull up
create per project cert key use to fetch metrics move zk to more standardized approach,move
refactored base class for calculations moving some functionality into kenyacore,move
fix issue in enterhandler and refactor actionhandler tests fix an issue where if the caret is at the end of the file and the user presses enter after an open block tag we error trying to find a close block tag past the end of the file also added testing around this functionality while adding testing around this refactor tests to make it easier to write action handler tests,pull up
block option for servers both block options for endpoints bugfix for empty option as last message component and some code cleanup,pull up
cleanup and fix several issues abstracted resnode from a defaultnode that can be used with other tree models added contitional checking for if resources were changed whenver you close a frame it will check for changes and store that in the resource the global check for changes method will iterate all open frames and all resources in the resource map asking if they have changes number two led me back to the issue for wrong refernces to game info settings after load i have identified the cause and applied a temporary patch added the foundation for searching in resources and also placed the event panel in a tab in this area what s interesting is that i have noticed that if the toolbar for it is set floatable and you float it out it will take the tab with it and it can still be redocked this possibly menas a raw docking framework could be built from jtoolbar,pull up
integrated nrepl add new repl view refactoring of editor source viewer simplified launch process,extract
some refactoring on userprofile and attributesdefinition,push down
renamed feeds to sources for historic queries,rename
modified framesmanager to allow the registration of the annotationhandler defined an annotationhandler for each of the default annotation refactored framedelement framedvertex and framededge all the logic is now in framedelement so the classes framedvertex and framededge have been removed added classutils with the utility methods used in framedelement all the tests passed,pull up
move io simulation ot its own class,inline
moved mouse over related code to subclass mouseovermousemanager of class defaultmousemanager so that it can be used optionally,push down
add mojosupport to sort out the common setup exception handling cleanup muck refactor mojologger so that we can make this a final field reference,pull up
moved webenvironment up a package as it will be used by other tests added javadoc hg rename src test java com opensymphony sitemesh webapp contentfilter webenvironment java src test java com opensymphony sitemesh webapp webenvironment java,rename
refactored some date to jdk time methods out of sqlbasedao added preliminary law processor code optimized imports,inline
changing around selector behavior,inline
refactoring,push down
hama refactor graph package git svn id f bb ffa edef ,extract
rename all the things,rename
extracting system classloader inits to preclassloaderinitiator plugins ,extract
documentation and refactoring,extract
java moving rules into correct packages according to the new category part,move
test rename,rename
many elements moved to new mockito style,move
compress remove trivial factory method,inline
moved getnthfunctionnodeindex and getnthterminalnodeindex methods from kozacrossover to the more general location on node to fix ,inline
add a j presponseextractor for hooking into java client deserialization fixes ,extract
pdm refactored podamfactory to be an instantiable class added spring usage example and improved documentation,push down
renamed graphsonfactory to graphsonutility and renamed methods for better consistency,rename
refactor jsr api to use new libusb api as backend,pull up
reduced number of listfiles intended to make listing faste,inline
fixed rfc proxies have now separate parsing and serialization,push down
refactoring getmenuspace in navigation extract isemptymainmenu querymethod,extract
perform some better caching around compiled basic non basic codeblocks refactor the lookup or use bytecode generation to a basecompilableblockstatement superclass move code storage to a codestorage manager with entry to hold both codeblock and the resulting compiled object,inline
refactored classcachemgr to make a leaner more readable class and prevent bloat and make parallel work a bit easier,move
introduced randomdataproviderstrategy interface as extension to dataproviderstrategy and pulled up few methods in abstractrandomdataproviderstrategy to this new interface,push down
renamed methods,rename
rename to packstringwithgetbytes and add comments,rename
refactor,move
weakened emodulemanager s assumptions about the emodules it s managing among other things all reflection has been moved out of emodulemanager this has been done in preparation to mixed mode execution i e having an interpreter,move
renames,rename
switchyard remove camelmessagecomposer from implementation camel this commit contains shared code which should be placed in core and it s being used by camel exchange bus,pull up
minor renaming of code that didn t get renamed when accessright was renamed,rename
reorganisation of controllers codes bookingroomcontroller now uses bookroomcommand addbookingroomviewparamscontroller uses static methods from bookroomcommand fixed little bug in jsp working fine on tomcat git svn id database trunk a f c aaa da e aacc d ,extract
added support for extracting json objects and arrays from request bodies via helpers,extract
minor refactoring to further strip down api of tokenstreamfactory,push down
rename method,rename
testinfodto was expanded with endtime and moved to fetchutil,move
refactor of xmppchatclient for generality and simplicity,extract
changed phase four to add orthology information moved existing phase four kam building to phase five phase four now merges in relevant orthologous relationships,move
move groovy stuff in a special class to make it reusable,pull up
faces develop alloy outputscript component faces remove compile time dependency on portal service jar from liferay faces alloy moved liferayportletutil java and liferaythemedisplayutil java to util jar and modified them to avoid using reflection,inline
eliminated some dupe code minor code cleanup,pull up
added bytearraydatainputstream implementing datainput and bytearraydataoutputstream implementing dataoutput both read and write directly from to byte buffers added methods in bits which encode decode various types not yet done removed unused methods from util moved some methods from util bits added limit to bytearraydatainputstream replaced exposedxxx classes for sending and receiving of messages with bytearraydata input output stream classes removed the exposedxxx classes replaced exposedxxx classes with bytearraydata input output stream equivalents,move
remove unnecessary lines sorry,inline
implemented some tabs in gamesettingframe fixed loading of resources from jar added event replace colorselect basic colour choose panel indexbuttongroup made it possible to have decimal indexed groups rather than bitwise added basic actionlistener functionality listener added a line to the save as code to commit the changes of lgm gameset if it is open gm file corrected default icon code to work from within a jar changed coloroutsideroom to color rather than int gm filereader writer modified to read write coloroutsideroom correctly gmstreamdecoder added some alternate constructors gmstreamencoder added some alternate constructors renamed writei to write added write and writestr functions prefs added string defaultlibs for use when in a jar dynamic detection is planned for util modified getvalidimage to display error messages so that the method doesn t throw exceptions moved the adddim method to here and removed the convenience version to make it thread safe constant overrode equals and hashcode hashcode is just because of checkstyle made comparable for sorting added a copy function libmanager corrected autoload to work from within a jar backgroundframe modified to use the new version of adddim removed try catch in image loading code eventframe modified to use the new version of adddim small correction to linked frame selector frame is now selected as well as being put on top gamesettingframe implemented resolution loading and constants tabs all fully functional modified other tab to use indexbuttongroup modified graphics tab added scale factor field changed the background colour selector to a colorselect component gmobjectframe implemented dnd event replacing resourceframe removed the adddim method spriteframe modified to use the new version of adddim removed try catch in image loading code timelineframe made frame icon final checkstyle xml changed to ignore lines with trailing line comments git svn id f f bc e be cd ,move
added support for removing cursors some ui related fixes row labels were not always directly shown and scrolled sometimes first approach for rainbow colors on channels cleanups,extract
 renamed accessmodifier to accessrestriction,rename
added jsonname jsonroottype annotations updated tests and model to account for annotation changes in main isolated assignments that were doubling as conditionals git svn id c b a b b d e ,inline
refactored pdproadmodel system,push down
major refactoring for propertydescriptors changes include genericization of propertydesciptors which facilitates the dry principle split multi valued propertydesciptors into separate classes to take full advantage of generics remove simple string property accessors from the rule interface only propertydescriptor are supported now properties are defined via rule definepropertydescriptor propertydescriptor interface normally called in a constructors ruleset xml enhanced to support propertydescriptor defining rulesetfactory and rulesetwriter account for the more robust property definitions all ruleset xmls corrected to move definitions to java classes where needed and to including necessary type information where missing git svn id baf d a c fc e d,pull up
lib rename issuer issuerofpatientid to issuer fromissuerofpatientid,rename
move testdelayedflush up since it works in binary now,pull up
added tests for load balancer validation added a node validator and refactored for new validation structure,push down
rename mutator superdelete to mutator subdelete to be consistent with the rest of the api,rename
implemented dynamic class loading in unit tests rhino by forking between rhino and browser code in standardclassloader loadscript renamed jooruntimetestcase loadclass into import which simply calls joo classloader import which in turn will end up in standardclassloader loadscript calling jooruntimetestcase global joo loadscript now the testcatch test also works wihtout loading all the dependant classes git p depot paths coremedia jangaroo change ,rename
bug fixes for pushing down predicates,push down
refactored out some common code,pull up
added support for extracting json objects and arrays from request bodies via helpers,extract
major refactor to start process of eventually moving content manager classes into separate module for now they are moved to a different subpackage but remain in the kenyaemr module until all dependencies on kenyaemr are removed,move
few fixes and native sources updated to ,push down
removing com apple eawt package import no idea where that came from,pull up
another minor change nothing important happened,inline
refactor the auction loading code to not construct a new auctioninfo object every time,move
added support for postfix expressions albeit via the statementexpression node git svn id baf d a c fc e d,extract
reduced number of listfiles intended to make listing faste,inline
renamed a method,rename
jbide added tests for embeddedcartridgeresource geturl,extract
observer observable pattern for ui view interfaces moveable and moveablecontainer refactoring mega commit due to problems with remote branching,pull up
reorganize abstract processor methods put some functions specific to bill processing in abstractbillprocessor and make all bill processors inherit that class,push down
refactored remaining usages of fees and taxes to use transaction units issue ,pull up
more stuff moved from defaultdifferenceengine to diff,move
split opentsdbwriter and merge kieren hynd s tcollectorudpwriter into the class hierarchy to ensure consistent handling of tags settings and more also applied checks for numeric values and cleanup of quotes and other special characters to both writers,pull up
removing property duplication methodproperty and fieldproperty have a common superclass but had duplicated code between them this commit reduces that duplication and pushes common code into the superclass while at the same time adding some additional tests for the functionality,pull up
faces add general utilities for liferay faces alloy components refactored regenerated components added module attribute to yui components faces develop alloy button alloy commandbutton and alloy icon component refactored regenerated alloy button alloy commandbutton and alloy icon component faces develop alloy field component regenerated alloy field faces develop alloy fieldset component refactored regenerated alloy fieldset faces develop alloy row and alloy column components regenerated alloy row and alloy column faces develop alloy datatable and alloy panelgrid components regenerated alloy panelgrid faces develop alloy message and alloy messages components regenerated alloy messages and alloy message,pull up
improve javadoc remove empty tags add new addanimation method,extract
pmcachecfg moved deprecated code to separate classes,move
reorganise imports in java and cleaned artifacts versioning to parent pom,pull up
code cleanup and method renames renaming boolean get to is renaming getseller to getsellername to better represent what it s actually doing removing unused imports,rename
 expose global settings xml in m e preferences change id id badd ca f ed b cf c e e signed off by igor fedorenko,inline
move sharedloglogic specific getcheckedoperations from superclass move operation resolving to abstractloglogic,push down
backlog using isempty instead of null for several string properties removing auto levels when creating a measure for the same column correcting summary message when hierarchy is empty,pull up
extract some methods from abstractpipe path needed this to override getpathtohere in pacer plus it cleans up the method a bit i think,extract
fixed how we handle looting lots of refactoring,pull up
created a superclass basecontainerblock for all the things shared between chests and furnaces which is pretty much everything also fixed a small typo in sign tostring had one d too many and removed a few function duplicates i had missed,pull up
ets fixes based on test suite make heir option work implement ets setopts order elements of bag like beam does it fix epattern ematchspec to sort n variables and allow that n values are not contiguous from x fix pattern match spec so that works move ets info and ets info impl into etable class implement ets match for bag duplicate bag,move
remove automatic updating instead a notice will be printed in the console,inline
refactor code put current distro manager into default plugin,extract
rename webbeans weld,rename
refactor codegenerator to facilitate the addition of backend jvstm common,extract
rename the round robin selection of the name server to rotateservers,rename
move attribute bigendian from attributes to group,inline
xslt space normalization also a bunch of refactorings so all requests for xslt templates go thru the factory added a flag to the tag extractor to allow it to function in normalized spaces mode and non normalized mode to switch back to non normalized spaces change the constant template file in the factory and switch the normalize flag to false in th transformer,extract
removed duplicate customparams for tiledwms layer,push down
rename androidrelayconfiguration messagebufferconfiguration and paraemterize it in the example,rename
her make extractors interrogate for charset replaycharsequence genericreplaycharsequence use charset instance rather than string name recorder use charset instance ratehr than string name getcontentreplaycharsequence avoid reusing cached replaycharsequence when encoding in use has changed since it was created getcontentreplayprefixstring allow requested specific charset interpretation extractorhtml extractorxml work with charset instances double check that in content declarations are self consistent before using recycle matcher instances change minor charset problems decisions to a crawl log annotation,inline
renamed tunnel connection property to jumpstation fixed overthereonwindowsitest by opening the tunnels in beforeclass and closing them in afterclass,rename
rename stuff more appropriately,rename
qcadoomes code refactor in cell binder functionality added support for parsing localized decimals,pull up
introduce a cleaner lower level api with the console interface it provides a signal api access to the underlying terminal capabilities and stty settings it also brings support for virtual consoles when using remote connections for example its not much leveraged in the remaining of the code things like cursor movements etc should leverage this information the aeshinputstream hacks for transforming windows arrow keys can be just removed and it should also be noted that the aeshinputstream does not correctly handle the encoding of the input stream and assumes the default charset which is always not the case especially on windows the only external dependency on those new packages api impl utils is the loggerutil class this means that this can easily be extracted as the very low component,move
 basically reverting changes made for with a fix for handling super bounds in jdk failed after wrapping types in typesdecorator moved most of the logic of types gettypebounds to typefactory,move
renamed getec hostname to getec hostaddress,rename
moved common code between cascading merging daos to an abstract class git svn id directory trunk f dbab f eb b e eb,pull up
added static setter methods for the plugin,extract
faces move portlet bridge specific resource handling logic from resourcehandlerwrapperbase to resourcehandlerbridgeimpl,push down
move the handshake method to serverhandlewithwebsockets,push down
frame parameters tests set up changed buffer refactored a bit removed my notimplementedexception,extract
removing interface on seam component pnly use interfaces when they actually bring something useful not just boilerplate code,pull up
tidy up remove interface simulationinput,pull up
rename tests git svn id f bb ffa edef ,rename
refactored and moved some tests,move
 refactoring primary execute method in caching mostly method extraction git svn id f bb ffa edef ,extract
renamed execute methods added executeupdate method added transaction handling,rename
rename transaction to disputedtransaction,rename
change api method getwikidefaultdocref to only need depcellspacesuffix parameter,inline
nxp rename entity to activityobject,rename
completed method type property descriptors and refactored them under a common class that can filter by optional package prefixes matching test cases for same updated typemap to catch errors new test cases updated classutil with new functionality for the new descriptors and restored lost indentation formatting git svn id baf d a c fc e d,pull up
moved more io collection and other library classes to mlcllib,inline
latency measurements added for stormdsttuplestorage with and without bdb,extract
merged revisions via svnmerge from r steve fri nov line allow any charset as a target r steve sat nov line allow for making upper casing optional r steve sun nov lines make all the transliteration for the acsii only mode to be table driven r steve sun nov lines added missing blank character translit maps r steve sun nov lines build changes needed for character tables r steve tue nov lines russian transliteration provided by user liosha git svn id d f ee a dfeeeb ,extract
extracted a very unecessary dependency on java util uri this is probably the bigest change ever refactored on the system the uri class was nested deep into the system for no real reason it was assumed that all backends would have a uri scheme and that we keep the uri at all times on all buckets this was not the case and everything from the bucket model to the pathresolver had to be refactored the change was made in the first place because glacier does not have a uri that we can just call instead we want to configure each backend with key values instead of with uri s this change to the system should also make it easier to transition into a key value store since the abstraction for transfering buckets is give this bucket this key and when i give you the key again then give me back my bucket,push down
change the implementation concurrency to synchronize on this instead of the lazy connection,inline
redis support various improvements changed artifact dependency scopes rename various fields methods from memcached to storage use clq instead of list synchronization in jedispool close redis client on jedisconnectionexception exception get rid of memcachedclient references so that spymemcached does not have to be in the classpath when redis is used,rename
rework dynarray to follow the defineownproperty and other aspects of the spec,inline
attached is a patch that does the following improves performance of commit rollback by reducing number of round trips to the server uses functionality for setting the transaction isolation level backs out a patch from days ago because that code failed to compile under jdk details the old code was doing the following for each commit commit begin set transaction isolation level xxx thus a call to commit was performing three round trips to the database the new code does this in one round trip as commit begin set transaction isolation level xxx in a simple test program that performs transactions where each transaction does one simple select inside that transaction has the following before and after timings client and server on same machine old new sec sec improvement client and server on different machines old new sec sec improvement all timings are an average of four different runs the driver was using set transaction isolation level xxx at the begining of each transaction instead of using the new syntax of set session characteristics as transaction isolation level xxx which only needs to be done once instead of for each transaction this is done conditionally i e if server is or older do the old behaviour else do the new behaviour to not break backward compatibility this also required the movement of some code to check test database version numbers from the databasemetadata object to the connection object finally while testing i discovered that the code that was checked in days ago actually didn t compile the code in the patch for connection setcatalog used properties setproperty which only exists in jdk or higher thus compiling the jdbc driver failed as this method doesn t exist thus i backed out that patch barry lind,move
move hashcode to content,pull up
add unit tests,extract
nobug add compilation argument import support for mfcu option enh during compilation argument import add support for executing the commands being intercepted by the compiler wrappers sometimes a compilation failure causes the entire process to terminate early,extract
tidied up the head commit slightly i ve moved the creation of the exception resolver to the webapplicationconfiguration so that it can be shared with other beans,move
begin removing multireporter multireporter java deprecated toepool toethread workqueue workqueuefrontier precedenceprovider crawluri fetchstats java remove multireporter getreports and reportto string printwriter these are not used as multireporter specifies and multireporter is going away anyhow,inline
new attributes added into schema value with unit and observation date added into vmlobservation generic observation element added into observationtarget jaxb implementation improved json xml roundtrip tested,extract
fix lbclassic and lbclassic ,push down
move the record doremoteaction call down to fieldlist,pull up
engine fixes after code review,push down
rename d rq contentcolumn to d rq contentdownloadcolumn testers found the name confusing,rename
refactoring replace deprecated treenode constructor in treenodeservicetest,extract
rename pipecommand pipe,rename
added forwardword actions added undo to changeaction,push down
simplify commitwalkaction this moves code specific to either changelog or contributors to the respective subclasses,move
cleaned up merging ,inline
push getvisualmotionstate into abstractvisualmodethis used to be an abstract method so that the different visual modescould pass in the right selection factory but this is now all handledthrough the fixselection method moving the implementation to the superclass means all visual modes usethe same motions,pull up
rename tenantid tenantname i found it strange to use the combo tenantid tablename so made tenantid also into tenantname this commit also includes repositorytablemanager tablemanager renames which should have been in the previous commit sorry,rename
finished up change over to blockingdeque from wait notify for the queuenames,inline
artif extend redefine coremodel xsd to add artificer comment element in baseartifacttype split up xjc generation scripts,pull up
divide color class to three classes color interface rgbcolor class hsbcolor class remove colormode refactoring many sources,pull up
 refactor marker resolutions and quick fixes change id ibdcc cf cfbb fd c ba ce cfb c cb signed off by anton tanasenko,extract
on the way to removing ebean completely,push down
add pullup and pushdown for subprocesses,push down
removed the weightings utility class by moving its very limitted factionality elsewhere,move
reorganize to support transport clients,pull up
extract different parts of the statements,extract
surefire refactoring and suppressed printing null if exception getmessage returns null,inline
eliminate inner class from showname querystring previously was a static inner class in showname move its functionality up to showname i guess the whole distinction was kind of a dumb idea here s the dumb idea if we get two files like the office s e mp the office s e mkv i was thinking we should have separate showname objects for each because the substrings we extract as the found show names are not identical the office the office however their query strings are identical so that s what the previous setup did had them have separate showname objects while sharing a querystring object i realized that was pretty pointless i do still think it s important to retain the actual found show if something goes wrong with the office s e mp we don t want to say we had a problem parsing the office because that string does not even appear in the filename so we do maintain the original untouched string but we maintain it in fileepisode for the work we re doing here we don t need to retain it especially since as i was reminded in a recent commit the whole point is to not process both shownames since they have the same query string we only need to process one of them that s why we had the query string in the first place so to say either the office or the office failed is wrong anyway it s really the query string that failed if we do mention one or the other it s only as an example of a filename that gave us this problem so we do still keep an example found name along with the query string but we don t need separate show names which means we d have a to mapping between shownames and querystrings which means they can just be the same object,move
added some more unit tests and trying to make relative paths work as needed for ,extract
refactor tests centralize the annotation dsl equivalency tests to the main dao module move tests in the functional test module into sub packages split into separate files related tests create mongo and hibernate subclasses of appropriate test classes extended hibernate coverage,inline
v ashok moved valid call delivery failure record processing to service from handler,move
her refactor parameterizable policies out of frontier defaults xml update bundled profile for new chains refactoring crawlcontroller java move to three processor chains rather than one frontier java loadseeds removed toethread java delegate most processing loop to fetchchain and dispositionchain abstractfrontier java workqueuefrontier java move policies calculation out to processors candidatesprocessor java new processor for dispositionchain that runs every outlink through candidatechain crawlstateupdater java dispositionprocessor java rename expand to prep crawluri for frontier frontierscheduler java deleted use candidatesprocessor candidatechain linksscoper java deprecated use candidatesprocessor candidatechain candidatescoper only temporarily retained for ease of comparison candidatescoper java simple single uri scope testing for candidatechain frontierpreparer java precalculate all frontier policies in candidatechain before scheduling preconditionenforcer java processoruri crawluri take on some prerequisite preparation previously deferred to elsewhere processorsreport java update for chains of processors sheetoverlaysmanager java applyoverridesto moved here for broader use candidatechain java fetchchain java dispositionchain java role specific subclasses of processorchain suitable for type based autowiring crawluri java new fields accessors of use to new chains frontier postprocessor java deleted skip to postprocessing is now skip to end of chain processorchain java take on control loop formerly in toethread processresult java absorb processstatus eliminate problematic stuck result,move
implement missing byte extraction from ddb data add test and necessary updates to other packages to confirm add safevarargs to methods in dynamodbquerymodeldao other minor cleanup,extract
move versions from item to content,inline
fix concurrency issue and minor performance improvement and cleanup,inline
vandang ashok sush using repositories to delete all couchdb documents instead of the services added integration test added log messages,extract
memory improvements optimized chararray internals for copying strings and charbuffers deleted a load of unused code remove tag text getcontents always use more efficient writeto instead removed support for textfilters and the one unused regexreplacetextfilter implementation they added an overhead and were rarely used may replace them with something more efficient later based on user demand chararray implements appendable use appendable in more places instead of sm specific chararray propagate ioexception around api,inline
hv rename a method for more consistency,rename
refactored the diagram settings and dialog mode dialogs into a single preferences dialog allow custom color schemes to be defined by means of config files,inline
inlined the simplest methods of searcher,inline
rename variables,rename
some refactoring also tempoary test code for dead end tips bug,inline
starting to rename fplayer uplayer since we will need an mplayer,rename
refactoring to introduce replcommand to make it easier to add additional commands,move
refactoring to allow adding different versions of mapfish json parser,move
combine two methods into getreplacementtext previously fileepisode had getnewfilename which would construct a new filename out of downloaded information if in fact that information was successfully obtained the method would return various other pieces of text in the case where we didn t yet have sufficient information then we had getnewfilepath which took the result of getnewfilename and if move was enabled prepended the destination directory getnewfilename was useful as a public function in two places when we first create the table item we assume we won t yet have have the file information so we called getnewfilename to get the placeholder text and then registered a listener to change it when we had the information in the fileepisodetest we want to validate the name without the destination directory getting in the way is solved by simply having the placeholder texts be returned by the combined method was already solved by always disabling move for those tests the returned text will never have the directory prepended as far as a name goes neither getnewfilename nor getnewfilepath were really accurate since it could very well return a different type of text so i m settling on getreplacementtext possibly that name could still be improved,inline
rename dumputils to descriptorutils,rename
ellipsoidfactor move principal component calculation into its own class,move
introduce common workflow models and executors this also replaces implementation of test driver task executors,inline
fix bug add check on the mailx and wsdl j packages for cluster creation,extract
renamed methods and members to better fit with smartclient api,rename
moved canaccess check to memberinfo,pull up
made reconnection more reliable and allowed changing back off time in case of jms exceptions in jmsstreamdataprovider added test for jmsstreamdataprovider added dependency on mockito,extract
part of issue move moretypes memberkey into linenumbers linenumbers was its only use and the way linenumbers used it it was heavily dependent on the implementation staying the same one area constructed its own key to insert into a hash map and another area used the method to reconstruct retrieve from the map git svn id d f a b b b d aecad e,move
fcrepo allow fesl relationship resolver to use the resource indexrefactor existing code in prep for implementing ri based resolver movecommon code to abstract base class remove unused methods,pull up
favorite simplify last view management,inline
refactored hookexecutor now is event based and works via method reflection also factored out prioritynode additionally users can now add a cfg file for each plugin inside the pligins folder currently it is used to resolve priority hook execution order conflicts if that is required,inline
remove getqueryresults,inline
manual merge and refactor of geoip,inline
renamed sendfileregion to fileregion and renamed fileregion getbyteswritten to getwrittenbytes per trustins comments in dirmina git svn id f bb ffa edef ,rename
introduce elevationcalculator interface,push down
jni libs are now extracted to the wsn device drivers folder in the user home ,extract
added some more functions g round g union and their respective test cases cleaned up function implementations some more moved graphfunctionhelper,push down
reverse support in samt extraction,extract
json serialization deserialization methods are moved to separate jsoncodec class,move
da cotentwriter contentreader move isolation support to reader selectwithretry,move
support paging iterator for bulk fetch requests previously paging was handled internally and all pages were collected on each request this change exposes an iterator of the pages of responses that followed the link headers returned on each request this does not directly change any behavior of the mylyn github connector since issues and gist queries still return the full response change id i c e e e b e e db b b signed off by kevin sawicki,push down
issue moved conainer init code in a seperate class,move
added moving of all associated files on submission next step is to leave raw data files,move
sonarjnkns move global configuration to dedicated component,move
merged code into static method that should have done the same thing,inline
pull thumbnail code up to the core class,pull up
ismavatar commit alpha updated customfilefilter to handle files without extensions does not use a for loop fixed indexbuttongroup setvalue for non cumulative values changed from maptable to array stable but non variable size updated soundframe load and save buttons now load save sound data untested layout gui etc merged filename label and value addgap method added maybe extract to resourceframe appended space to messages properties soundframe file value updated lgm to display the working filename updated listener removed some listener debugger code for jfilechooser default folder added quadduc to credits in lgm upgraded marko from a hole to jerk git svn id f f bc e be cd ,extract
tidy up git svn id f bb ffa edef ,inline
enables condensed naming this required moving some of the name generation methods to the abstractgenerator to provide them access to the generatorcontext this had the side effect of cleaning up the way the main classes and interfaces are retrieved,move
compiler options can now be specified for jdk or jdk or lower after this was finalized i realize that we might consider moving entirely to string based options instead of inferring the options from the provided enum this setup does have the benefit of throwing exceptions when options are not present,push down
api cleanup,push down
renamed blockingvariable getvalue setvalue to get set more in line with java util concurrent method syntax better conveys that method may block added blockingvariablespec,rename
refactored crawldbmerger it should handle db unfetched merges better,extract
fix compilation error on master counters weren t added to infinispan until version x,push down
rfc redesign of authenticator and related classes git svn id f bb ffa edef ,inline
ticket batch histogram wip refactor to produce batch histograms for non tau parameters also driven by current fitted images dropdown selection,push down
introduce oscdatagrammchannel,inline
removed gui code from argument argument relocated gui related code to actionframe to keep data model separate from interface actionframe added argumentcomponent class to handle the things moved from argument removed the argedit field and replaced with argcomp messages properties renamed argument keys to argumentcomponent this is part of a part commit git svn id f f bc e be cd ,move
cleaned up the profusion of methods in orientdb implementation removed exists open create and put all that functionality into the constructor trying to keep the implementation as specific to blueprints as possible so as not to allow users to depend on non interface based methods transactionstestsuite still causing a problem with concurrent modification of hashmap,pull up
rename methods,rename
o added some comments in the abstractpollingconnectionlessacceptor o renamed the startupworker method to startupacceptor git svn id f bb ffa edef ,rename
refactored measures tests using abstract super test,pull up
menupieces are now organized in a tree git svn id d d e b d d fefcacdf,push down
simplified introspector and renamed beanpropertyx stuff to propertyx stuff,rename
changes from brian remedios refactored useindexofchar to extract common functionality into abstractpoormethodcall git svn id baf d a c fc e d,pull up
boleto refactoring tirando interface datas,move
added abstractremoteservice and refactored implementations to use it,pull up
quality refactoring,push down
extracted two methods from handlestate to reduce the method size,extract
refactor use picocontainer to instanciate jenkins components,move
added callgraph classes lots of bugfixes and extendsions for struct and invokes,pull up
reactoring and pass unit tests add a new unit test for heal sessions,extract
bugfix jenkins enhancement jenkins bugfix jenkins including new feature ignore parent stream can now tell a project to ignore changes made in the basis stream of the actual stream being built this can signficantly reduce the time the plugin takes talking to the accurev server new feature get streams singly more of an accurev client workaround really the plugin used to call the server and get the streams which included absolutely everything under the sun and this turns into many megabytes of data every poll and every build this server setting says to get just the streams we care about our stream our parent stream etc albeit at the cost of potentially making more than one call to the server enhancement logging improved which should make debugging accurev client failures a little easier enhancement now weakly caches the xmlpullparserfactory refactor extracted out code that runs the accurev client command into its own class reducing duplicated code and making parsing of command output more consistent refactor split out many of accurevscm s inner classes into their own files in an attempt to make the main class more maintainable,pull up
refactoring removing unnecessary interface changing to use non deprecated methods in tests,pull up
some fixes and cleanup first round of testing,pull up
assigned bug third party tool extensions not handled correctly renamed annotation to xmlpersistencemappingextendedmetadata,rename
resolve add tomcat support thanx h nig hans joachim kliemeck and cyrille leclerc cyrille le clerc see also pull requests and tomcat now redirects with instead of for automatically redirects so must be asked not to do so additionally the status code checks in testutils needed to be extended for change context path to to get rid of tomcat login workaround,push down
remove last pieces of old now non working clip region checking push down handful of fields from box to blockbox,push down
simplify code git svn id f bb ffa edef ,inline
renamed hashalgo to digestalgorithm,rename
fixed confusion about the getnumberofcomponents method renamed it to getadjointdimension also added unit tests,rename
massive refactoring to make epublib more logical and easier to use,push down
add common parameter loading code for both simulation loading methods from cli args and from db,extract
rework,inline
notifplt move the notion of jpa contains from jpanotificationservice to jpaservices,move
undid redesign of april most importantly instead of a subclass of java io file overtherefile is now an abstract base class subclassing only made the implementation more complex and added no benefits any other code used expects to be able to open a fileinputstream or a fileoutputstream to a java io file which won t work for remote files this change also allows for more specific semantics of delete mkdir mkdirs and renameto removed api methods that have better alternatives e g use listfiles instead of list removed convenience methods such as get outputstream renamed get to getinputstream and put long to getoutputstream long renamed hostconnection to overthereconnection renamed overhereconnection startexecute to overthereconnection startprocess renamed commandexecution to overthereprocess renamed commandexecutioncallbackhandler to overthereprocessoutputhandler improved overthereprocessoutputhandler implementations they can now be created using static methods and can be grouped with the multipleoverthereprocessoutputhandler improved performance of ssh and specifically scp protocol by reducing wait time in loop waiting for completion of a command from ms to ms fixed bug in sshinteractivesudooverthereconnection where it could not handle a password prompt that does not end in assword but has assword somewhere in the middle added cmdline cmdlineargument abstraction of command line to allow for better hiding of passwords in logs and implement command line encoding moved here from from operatingsystemfamily improved over reimplemented overthereconnection execute in terms of overthereconnection startprocess reduces duplicate code in protocol implementations ensures execute and startprocess have identical semantics and forces all protocol implementations to implement startprocess so that the wsadmin and wlst daemons will always work set source and target compatibility to added building of sources and javadoc once artifacts gradle is fixed added dependency on guava should replace all use of apache commons soon using scannit for annotation scanning instead of reflections updated notes in readme md,rename
updated command updatetest refactored,extract
renamed tests,rename
refactor ptf ifc clearer separation of duties between resolver and evaluator document ifc provide a pitr to execute method linking to leadlag done in executor windowtblfunc hold onto windowfndefs qdeserializer no special handling for windowtblfunc,pull up
major internal changes to xmloutputter and some public and protected method signature changes the code is now much cleaner with regard to whitespace handling and the text trim printing behaves a whole lot better in fact the following settings now pretty print on output even if the doc contains some content with whitespace from a file and some content built in memory with no whitespace settrimtext true setindent setnewlines true it may not perfectly match everyone s idea of pretty but in my mind it s pretty good btw the default settings no trim no indent no newlines still behave the exact same as before and print the document raw among the structural changes the printxxx methods now only print xxx and don t concern themselves with whitespace around the xxx item for example printcomment prints only the comment from and doesn t try to print the new lines and indention before and after the only place where whitespace handling occurs is printdocument for document level whitespace and printelementcontent for the whitespace between an element s tags but in both these cases the whitespace is naturally within the item being printed the signature changes deprecated public setindentlevel method having a global indent is better done with a stacked filteroutputstream the method is now empty it ll be removed after beta deprected public setpadtext method it s not needed with the current output mechanism the method is now empty it ll be removed after beta changed the protected printxxx methods to have a new signature without the int indentlevel final parameter didn t bother with deprecation here thanks to mark roder for raising the issue that got this started jh,inline
changes in event api better comments and more consistent api also more focus on interface,inline
renamed a method,rename
casc commit before we move to the new repository we cannot release this yet because we re missing a contributor license agreement,pull up
biserver more refactoring scheduleeditor now extends from abstractscheduleeditor,push down
handle console commands and fix system input blocking indefinitely,push down
added windgate csv feature ,extract
fix for rendering problems introduced by removing graphicsutil class use image instead of bufferedimage in most cases convert to awt image if necessary not complete requires cleanup,push down
meta data cache code moved to cache package,move
hv add support for non parameterized type in value extraction,extract
partially completed changes to kernel package started improving rule validity checking added constraintkernel interface renamed classes in predicateconstraint package implemented groundall in predicateconstraint package implemented lazympeinference,rename
refactor extract authorization service interace,extract
tweaks clean ups,pull up
moved more rendering code out of the layouts issue number obtained from submitted by reviewed by,push down
partial refactoring of the database atomstore interface so that the database no longer needs to know about the atomstore,inline
bval added some more tests and made the code work with arrays git svn id b cb b d ca fae ebed b ,extract
reverted last revisions as they introduced a currently unusable system for obtaining and updating the model,inline
move classes to impl package implement packages fetcher,push down
refactor cluster manager code to extract common code,extract
wip add support to unlock notify,extract
tfj add getretweetedby ids long statusid paging paging,extract
abstracted out some color helper functionality and cleaned up the image shader pipeline,pull up
rename to integer to round this fixes ,rename
refactored timeline package and renamed graphicsobject,rename
remoca√ß√£o da classe securityconfigimpl e movendo o c√≥digo para securityconfig,pull up
renamed removeall reset,rename
post cleanups all multipart entity generation logic moved to multipartentitybuilder git svn id f bb ffa edef ,move
removed the to much specialized methods sendto from the websocketserver java users can implement such behavior them self easily,push down
newtools moved some more code from project to wcettool,move
pull spunk restart into base class clean up restart usage,pull up
added tuning view with modifiable optimization tuning weights added another final bandaid to null pointer exception in xmltoggleview cleaned up the tuningpanel hierarchy,push down
clean up a bunch of stuff import completer impls from gshell,push down
fix for fix prefix should be added to keyword calls only not to variables,push down
renamed getdefaultservice to getdefaultname as it s actually only the default key string not the service,rename
fix for bug change id i fcd ad fd e c b d a b a,push down
nxp cleanup rights on public private social workspace cleanup unit tests,push down
renamed fire method,rename
fix extraction of parameter description from javadoc comments should be based on parameter name not annotation value,extract
heavy refactorization of siftingappender,pull up
interface imatrix and imatrixdimension refactoring,pull up
begun working on extracting jsonpath,extract
refactor doctypereader inputstream,pull up
reconciled dependency update and configuration update actions introduced mavenprojectactionsupport to handle project selection during depenency and configuration update consistently introduced iprojectconfigurationmanager updateprojectconfiguration mavenupdaterequest iprogressmonitor some cleanup of updateprojectconfiguration implementation signed off by igor fedorenko,pull up
mdep push down artifactcollector to listrepositoriesmojo that s the only one using it also simplifies unittests a bit git svn id f bb ffa edef ,push down
actor port and source hierarchy refactored,pull up
added machinery for a pushing a filtered call down to hbase codecleanup,push down
renamed intopackage testcases and removed duplicate test,rename
refactored spawning trajectories,pull up
ability to customise reduction added to hyperview,extract
added support for head and options moved setheaders string to script fixture as got forgotten removed support for fit variables starting with,move
rework status widget to use styling be smaller use a custom widget extending from clabel to allow styling to kick in while keeping the ability to do custom text shortening eclipse by default replaces the middle of the label with an ellipsis the old widget was also using a fixed width layout to stop the recording text from being shortened hidden but this has the result that other status items might be squeezed we now use widgets a seperator the mode widget and the recording widget of which the last one is not always added to the status bar fixes alternative fix for and possible workaround for ,extract
delete listtest listsubject is long gone and move the tests to iterablesubject created by moe moe migrated revid ,move
extract trigger conversion to separate class,extract
add chunked encoding response for server,extract
imdad ashok added functionality to renew a subscription,extract
get rid of really bad caching being done by filtermanager for necessary caching rely on the entrycorral for everything else just use the auction identifier as the lookup simplifies the code and makes it more correct i believe,inline
middle of splitting cli stuff from library stuff copied entire tree into o v h cli cleaned out cli related stuff from main tree next up is clean out library related stuff from cli tree evaluate how to do cli config stuff better,inline
code cleanup patch from sean bright,extract
balajin refactoring ivr module extracting out units,extract
renamed query haspaginating to haspagination,rename
refactor the auction loading code to not construct a new auctioninfo object every time,extract
refactoring completed,move
fix regression in lifted semigroup sum move lifted definition in monoid,move
cas port changes from cas to the pac j project saml clientconfiguration has been made non final to allow forsub classes a new init method has been introduced it does nothing insaml clientconfiguration but can be overridden in sub classes saml client now calls the new init method on its configuration a piece of code in clients has been extracted into a separate method itallows for reuse in sub classes of clients,extract
added support for dynos endpoints to list and restart dynos,extract
inlined searcher searchfor toggle button,inline
cleaner implementation added abstractwebsocket for a cleaner implementation,push down
cleanup inheritance,push down
port options from old codebase improve line break compatibility implement smart auto indent,push down
adds the initial implementation of durareport storage reporting more tests need to be added but it is functional after initialization it will start a storage report and store it in the x duracloud admin space once the first report is complete it will be available at until there is a report that url will respond with a while waiting for the report you can get for status no scheduling is currently in place but new reports can be kicked off with a post to the first url git svn id ed cd a f c be b fe bcb,extract
created ajaxseleniumproxy for obtaining ajaxselenium thread local context moved unsupported selenium api methods from typedselenium to unsupportedtypedselenium,move
major refactoring also preliminary work for ,push down
bits writelong and bits writelongsequence now don t use a temp byte buffer anymore moved util read writelong sequence from util to bits added description for all targets in build xml,move
m executor is pushed down from rubytask to arubytask,push down
refactor removing resetmaximum method this removes some not needed loops so it increases the efficiency and the code is understandable,inline
refactored evaluate methods into rule classes this change gets rid of the need for ruletype and directivetype i also got rid of directive getname except on expressiondirective,inline
rois panel layout modified again should not change much now table support now much more columns selectable xls export always take all columns in account others improvements you will notice layers panel we can now edit the layer s name directly in the table accept delete command through the table some others minors tweaks added actionmanager class which allow to access command action in a centralized way will be improved in future added generalpreferences getresultfolder setresultfolder methods to get set the default application results folder more internals commands accessible through the search bar replaced xlsmanager by xlsutil so use the later one now improved colorchooserbutton rendering icybutton fixed minors issues some improvements in the exception handler engine some bugfixes some refactoring,pull up
mchanges support rest api for jira o begin the process refactor the jiradownloader class stack to allow for both rest and rss probably not quite right yet git svn id f bb ffa edef ,push down
checking in all the graphical updates changes from the svn branch there will be more changes later but for now this is the bulk of the updates the only conflict was a missing api in dvrimain which needed to call some function that the current trunk is missing,inline
small refactoring extracting scope handling,extract
further minor refactor of lti oauth stuff i ve moved most of the key stuff into a single utility class to make it easier to test debug things,move
rfc redesign of authenticator and related classes git svn id f bb ffa edef ,pull up
nxp refactor to use different type of queue moving dispatcher from queue manager to producer start impl cqueuemanager,pull up
dry updatestylesheetsmojo watchmojo execute script moved to super method executesassscript,move
add connectioncontext used to track per connection data as opposed to requestcontext which is per request also move getremoteaddress from requestcontext to connectioncontext api breaking change,move
mvn refactoring add first step on testng,pull up
 add componentmodel jsr o refactor the other component model implementations to reduce code duplication,pull up
fix null pointer bug when there is no bounding box git svn id d f ee a dfeeeb ,push down
change address model to be an interface will allow consuming projects to override this funcitonality more easily,push down
added regimen manager to define standard regimens and arv drugs added kenya emr regimens xml where regimens are defined added loading of xml to module startup added display of definitions version on admin home page updated some art unit tests to use arv drugs included in the new list renamed regchange to drugorderchange for clarity deleted regimencomponent java which wasn t being used,rename
move getglobalartifact one level up,pull up
bugfixes additional actions git svn id d d e b d d fefcacdf,extract
renamed context to sitemeshcontext to avoid confusion with tagprocessorcontext hg rename src test java com opensymphony sitemesh contextstub java src test java com opensymphony sitemesh sitemeshcontextstub java rename src main java com opensymphony sitemesh context java src main java com opensymphony sitemesh sitemeshcontext java,rename
refactor threadlocalcleanup and extract warningthreadlocalcleanup subclass ,extract
extracted calling search peers from listbucketsendpoint ,extract
modelaccess getfieldvalue with baseobject added,extract
updated filtercommand with intbitset implementations added an additional worst case test for filtering which currently fails refactored a few things,pull up
moves rfc util methods into their own class,inline
added lifting scheme wavelet implementation by ian kaplan moved generalized goertzel test to test directory small changel all around,move
refactor options,pull up
a little more blueprints sail refactoring,move
 extract common builder for the streammappingmethods and iterablemappingmethod,extract
enable direct i o parallel roll forward com asakusafw directio threads commit max number of threads for moving files in roll forward operation default single threaded,move
enhanced pmbean cache cleanup,push down
manage headless unit test using monocle fix ,push down
added very simple rest like assessment runner,extract
the declaration of types too can move up,pull up
word lexprob parse yield moved to static method,move
extract methods no pngpdftransformerhelper e iniciando uma fluent interfacezinha para geracao de modulos,extract
split htmlcontentprocessor into different implementations htmlcontentprocessor a basic and fast implementation that extracts head title body and meta tags sm htmlcontentprocessor supports all the additional rules that sm had by default such as the tags msofficehtmlcontentprocessor extracts the document properties saved by word excel hg rename src test java com opensymphony sitemesh html htmlcontentprocessortest java src test java com opensymphony sitemesh html sm htmlcontentprocessortest java rename src test java com opensymphony sitemesh html htmlcontentprocessortest java src test java com opensymphony sitemesh html datadrivensuitebuilder java rename src test java com opensymphony sitemesh html htmlcontentprocessortest java src test java com opensymphony sitemesh html msofficehtmlcontentprocessortest java rename src main java com opensymphony sitemesh html rules msofficedocumentpropertiesrule java src main java com opensymphony sitemesh html rules msofficedocumentpropertiesrule java,rename
removed a bunch of unused jars and other files added matchingturbofilter which takes over some responsability from turbofilter added corresponding test cases,push down
many removed unused private vars and gui big fixes,inline
renamed writethrottlepolicy exception to fail added writethrottlepolicy log and fail git svn id f bb ffa edef ,rename
moved pingheader pingdata from header to message s payload removed local addr from log statement conflicting merge is not logged as error but as trace moved fd sock fdheader cachedaddrs into message body moved stable stableheader digest into message body moved flush flushheader digest into message body,move
renamed diagnostic method,rename
moved the font finding code into a fontresolver class added support for text inputs and refactored the form code a bit issue number obtained from submitted by reviewed by,pull up
rename unknown frame custom frame for,rename
improve chart measures,push down
renamed elements select to elements filter renamed so the api is better self describing,rename
various changes to support dao interfaces which are required for spring s transaction management,push down
finsihed rename of kernel to rule,rename
added delete candidate sessions functionality,extract
rename recordbuilder newrecord to recordbuilder build git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,rename
add uuid array support rename arrayelementbuilder to arrayassistant,rename
massive change to the eclipse handlers they now set the generatedby flag which we can use to patch eclipse in specific places to ignore generated nodes,inline
refactor getvaluetranslator to basematrixpersistance,pull up
faces develop alloy outputtext component tag extend generated base class for consistency,pull up
rename variable and method,rename
convert generation of js to listener compiles tests green needs cleanup,inline
arq refactored test lifecycle handling using event based approach with chaining using precedence instead of single entry point,move
move method to get boolean property to basesourcecreator,pull up
refactoring delete unnecessary methods and clean up code,inline
hh move datasourcefactory to nab datasource,move
datageode adapt to api changes in the org apache geode cache lucene lucenequeryfactory interface cherry picked from commit d e fec b e c e c a signed off by john blum,inline
renamed doconnect to connect git svn id f bb ffa edef ,rename
nojira moving portlet to ajax rendering and adding answered and deleted message flag information git svn id f dbab f eb b e eb,move
additional fixes for url detection,extract
moved variant properties from record to recordid git svn id svn ssh dev outerthought org outerthought lilyproject projects lily trunk b d f e bd e a dc ,inline
continuing refactoring for it is moved to new system and tests are passing no new tests have been created yet and it is still messy,move
refactored to fix broken unit test issue with cross package access of package private data result is even cleaner than before,pull up
remove dead code from slf jreporter and its tests remove among the other things unnecessary reset of string builders methods which accept only one argument,inline
added several new features e g sub fields report output and many more,extract
various todos and bugfixes git svn id d d e b d d fefcacdf,push down
rewrote tdb block code to use a superclass removed block simplified writing no need for a separate object the gmapsupp will also use the new fileblock superclass that s the plan git svn id encoding d f ee a dfeeeb ,inline
big refactoring added ioprocessor a thin layer which is similar to the reactor pattern renamed abstractiofilterchain to defaultiofilterchain because of the abstract methods of abstractiofilterchain are now moved to ioprocessor interface moved common parts of various iofilterchain implementations to defaultiofilterchain removed other unnecessary iofilterchain implementations added iosession getprocessor so that defaultiofilterchain can access the associated ioprocessor extracted interface from serialsession and all the implementation goes to serialsessionimpl git svn id f bb ffa edef ,push down
continued refactoring to global local dependency building,push down
ert send refactored and bugfixed wrt return value and badarg argument list,extract
modify dynamic table generation so that it uses a template file for style and layout,inline
more refactoring separating reflection and files from the rest of lems code generated reader instead of reflection instantiator,inline
hari arvind ashok refactoring around obd sub slots,push down
added transient properties to bookmetadata method bookmetadata setproperty allows the setting of a transient property merged swordmetadatalocator into metadatalocator moved swordconstants dir conf override to metadatalocator added missing casesensitivekeys to swordbookmetadata and configentrytype added missing utf arabicpoints to configentrytype,extract
extracted file handling methods from listener to new filechooser class modularized readers added support for plugging in fileview modules next revision will modularize the writers so translators might wish to wait until then to update strings git svn id f f bc e be cd ,extract
added documentation to subroutines refactored buffer local variables a bit refactored subroutines handling strategy,push down
moved cookie code fix for wo to common framework and refactored application java in main app,pull up
moved email addy to top user entity,pull up
hv create different programmatic mapping contexts for getter and field create different implementations of propertyconstraintmappingcontextimpl for getter and field to separate the logic,push down
added an exception handle for when twitter is having problems also moved the link for looking up twitter friends to the logged in version of the home page,move
add more tests update testutil,extract
move jbidwatcher specific stuff from the general purpose jconfig library to the jbidwatcher specific jconfig library,push down
code cleanups structure view is still broken,pull up
non deterministic mode switching moved to deeco independent library,move
expands modified flag to entity and aspect nodes changes to serializer to take in consideration modified flags for entity and aspect cleans serializer code adds more junit tests to perform network tests and further tests on existing serialization of trees,extract
minor improvement to javaruleviolation extraction of names and suppression status should be pretty explicit and clear now major improvements overall compared to the mess that is in x git svn id baf d a c fc e d,extract
cleanup,inline
faces develop alloy dialog alloy outputtooltip and alloy popover components added abstract tags in the components ext xml to avoid unnecessary copy paste moved headertext and autohide from hidden attributes to generated code by specifying true and a for both of them in outputtooltip changed the cssclass attribute to be the yuiname of the styleclass attribute overrode encodecssclass to utilize encodenonescapedstring,pull up
rename the handleexception on contextimpl to reportexception and add it to contextinternal so we can report exceptions to the context,rename
add interval to investment plan plus fixes add interval to create transactions monthly or every x months ensure day of month is always the same even if end of month rename transaction costs to fees,rename
jcbc n ql dp refactor query into statement motivation in dp queries are not just a string from the query language but they can have additional parameters the current implementation just assume there s no other relevant parameter we need to introduce the concept of a statement the current query dsl and allow to construct queries with either just a statement or with parameters positional or named modifications what follows are breaking changes refactored query class into statement class including in tests vars javadoc as a side effect fixed the references to query in javadoc of spatialviewquery and viewquery the query interface now represents a complete n ql dp query that is a statement and some other params such queries are sent to the server by transforming them into json the n ql server accepts json body in post for queries three implementations have been added simplequery replaces the use of query in previous versions while parametrizedquery and preparedquery allow to fill values for positional or named parameters in a statement previous methods query string s on buckets have been removed ad hoc querying is still possible by providing a complete json representation of the query parameters and all included through the queryraw method the equivalent of previous query query q method is now query statement s as the original query interface has been renamed to statement genericqueryrequest has been refactored in core to use factory methods to distinguish between a simple statement and a full json query the latest is now in use in couchbaseasyncbucket added tests for the construction of n ql json from various queries result user now construct statements using the dsl that they use in a query these conforms better to the dp specification of n ql querying and will ultimately allow for optional and named parameters to be used change id i fb bffe e f a e reviewed on tested by simon basl√© reviewed by michael nitschinger,rename
remove the window argument from the method signature and move configuration to a separate class,inline
added an implementation of graphicsconfiguration and graphicsdevice,extract
added a watch option to the main program,extract
balajin refactoring moving insert method to the repository layer breaking up tests removing unused update method extracting out the validation logic from patient using the correct enum for validating weight instance,move
clean up source for jdk ,inline
fixing replaceenvironment minor refactoring,inline
added all stream,extract
refactored,extract
faces develop alloy dialog alloy outputtooltip and alloy popover components added abstract tags in the components ext xml to avoid unnecessary copy paste moved headertext and autohide from hidden attributes to generated code by specifying true and a for both of them in outputtooltip changed the cssclass attribute to be the yuiname of the styleclass attribute overrode encodecssclass to utilize encodenonescapedstring,move
code cleanup format and moved implementation to internal class,move
surefire improve class design patch by stefan birkner applied with only a minor formatting adjustment git svn id f bb ffa edef ,inline
rename some methods,rename
bugfix dockablesrepositioned was not called by stackdockstation and flapdockstation on a call to move git svn id d d e b d d fefcacdf,pull up
artif support interacting with artificer through ejb split service logic out of atom resources,extract
remove unneeded classes some refactor improve population extraction add download for neuroml add domain type some more work on summary ,extract
total refactoring of village so that each type has autonomous subscriptions and inertia,extract
changed phase four to add orthology information moved existing phase four kam building to phase five phase four now merges in relevant orthologous relationships,inline
rewrite nugettoolusagestatisticsprovider start using toolusagecalculator in it,inline
display in view columns and tables from the query in the view display columns and table ectract from the query add an sql parser model modifications move columns reference from abstracttable to table add new class viewelement in view add references columns and tables,move
resolves spec issue removed key parameter from expirypolicy interface and renamed methods as entries keys and values are no longer provided,rename
added better collection parameterised mutators to intbitset e g removeall and update the unit testing ssomewhat,pull up
rename some methods in testcasewithtestfile,rename
 adding nested method match functionality including ut after merge with ,inline
extract client id logic and test,extract
toby extracting an abstract cachingiterator from predicatediterator filterediterator and subsequenceiterator and removing the iterator helper classes as a result,inline
rewrite realmapbinder to use internalfactory this cl is a performance refactor this does change the spi dependency tree in a way i believe more accurately describes the dependencies of each of the maps provided previously the dependencies for all maps was just a dependency on the entrysetbinder which contained providers for all of the values the new implementation has dependencies directly on the vs for map and the multimap versions e g map and dependencies on provider for map and the mutimap versions e g map this implementation follows the same pattern as optionalbinder notably all the mutable state is moved into a new inner class named bindingselection calculating keys set names is delayed until configure initialization time none of the factories need circular deps resolution caliper benchmarks show an improvement in all four bindings provided by mapbinder bfa c d a eaa d ac daf r scenario benchmarkspec methodname run label command used run run under perflab experimental users lukes benchmarks injectionbenchmark b timemultimapbindermultimapbinding timemultimapbindermultimapproviderbinding timemultimapbindermapbinding timemultimapbindermapproviderbinding t r head with change this has been run on the tap train and no failures are believed to be associated with this cl created by moe moe migrated revid ,move
dheeru refactored by pulling up common transitional logic to base transition class,inline
autorevert settingsupdate test cleanup,inline
refactored package structure for a clear separation between gdata operations and google plus operations,push down
extract method,extract
added couchbase views change id i d f ca f e d d e af aa d reviewed on tested by matt ingenthron reviewed by matt ingenthron,push down
lots of performance improvements streaming json instead of creating maps and lists cached reflection logic created the ability to write custom property objects value resolvers per object that yoga knows about moved around the way uri creation happens so that it can leverage and also be a bit more performant,inline
review fenix framework indexes move invocation to updateindexes to indexesconfig and rely on invocation to super bugfix nullpointerexception in updateindexes when dml has no indexed slots bugfix bplustree getkeys was not returning the keys as expected,move
hv moving shared code up to cascadableconstraintmappingcontextimplbase,pull up
renamed and refactored smtproxytuiolistener to util proxytuiolistener refactored some other stuff too also added some touch source bounds info console output that prints if smt debug is true,rename
rename methods to differentiate operations for current vs sub scopes,rename
dp refactoring code of data loading refactoring code of service controllers git svn id database trunk a f c aaa da e aacc d ,pull up
moved chargedensity interpolation method to the cic algorithm because it is specific to this algorithm,push down
fixed pullup and pushdown for nested subprocesses,push down
extract some logic to methods in defaultcomparator to improve readability,extract
set dependency on f o d v collab to optional to include in isdesigner change id i fa a e bd c b b d signed off by st√©phane thibaudeau,push down
started refactoring in cycledetection extension fixed bug in linked trajectory,pull up
cleaned up optimizer code,inline
 solving cyclic packaging dependencies moved context as inner class to conversioncontext in model common corrected buildin to builtin all requested built in methods added,extract
ongoing refactoring pmd rules to check code structure,push down
reorganized jaxb merged consumption in movsimscenario xsd,inline
restructuring deecosimulation extends deecorun and are in the runners package exception added for the case that a simulations starts without a termination time,pull up
 rename some classes name change the phrase androidservice to android it has the following changes mqttserviceandroidclient mqttandroidclient mqttserviceclient mqttconnection mqttdeliverytokenandroidservice mqttdeliverytokenandroid mqtttokenandroidservice mqttdeliverytokenandroid add close method merge latest code with android wakelock and java paho ping mechanism change id i b dc cbee bd c e da d b signed off by pleong,rename
renamed audit events to audit entries to prevent future name conflicts and refactored some audit code,rename
refactor tests,pull up
refactored inline editing of transaction types and owner removed reflection code from the editing support classes and workdirectly with account portfolio and transaction type classes removed error markers deleted commented out code removed primary and secondary transaction methods because editingis always of owner or cross owner not of primary or secondary,inline
removed generic from vcomponent,push down
sc qcadoomes mainly statechangeviewclient improvements move orderstate enum to proper package,move
issue introducing server client connectioncontext distinction and additional context fields,push down
extract abstract method javacsingularizer generateclearstatements,extract
stats move stack histogram method into stackstats,move
restructured simulation initialization,inline
ngrinder develop test report page including server side and ui add agent monitor chart,extract
refactoring protocol names as global local,push down
fix improve behavior management and remove unwanted files,push down
fixed permission query fixed the path resolver also renamed some stuff in permissionprovider and commandmanager again,rename
minor refactoring to xml reading apis deleted the modelrichness idea as it was never fully implemented split resolution code in assessmentobjectmanager into a separate class,inline
sgf move configuration of pdx to a pdxconfiguration class imported by the enablepdx annotation,move
mpmd pmd cpd report does not take into account pmd excludefromfailurefile refactoring move the code into exclude violations duplications fromfile helper classes git svn id f bb ffa edef ,move
compress move getunixsymlink from ziparchiveentry to zipfile git svn id f bb ffa edef ,move
minor refactor,extract
renamed animation to transition because that is what it actually is,rename
refactor lispminibuffer,extract
move channels into database,push down
 added application name check back in again since we need to lazy load the list of applications anyhow,extract
extracted vimtestcase typetext,extract
hh rename method to be more understandable an ivanov,rename
refactoring extracted icontool to deal with info warning error icons in reportsgit svn id f bb ffa edef ,extract
simplify sources which implement osm format readers mo effect on output expected remove interface loadableosmdatasource remove input format specific pbf o m xml implementations of osmmapdatasource osmmapdatasource now implements loadablemapdatasource and decides which parser is to use these changes allow to remove various sources a few classes were renamed to remove the format specific parts in the name osm xmlhandler was renamed to osmxmlhandler no idea what the meant i always confuse it with m a side effect of these changes is that the coastlinefile option now accepts o m format as input but maybe the option should be removed as well i ve also allowed to use gzip ed o m files o m gz as it needs no extra code git svn id d f ee a dfeeeb ,pull up
refactored and input adapted,inline
refactor to interface add mock client,push down
restore scala compat in mappingbuilder types removes entire concept of different local and remote napping builders on the basis that it was too complex for the gain in compile time type safety fixes scala compatibility issue resolves ,push down
implementing hilite functionality in the gui adding action listeners and actions in the menus moved the hilite filtering to the trellis menu since it does not concern the single plate adding necessairy fields in the heatmapmodel implemented a getplatestodisplay method before this was in the trellis but with the hiliting it had to be adapted too and i found it belongs to the model adding conditions in the rederers heatwell heattrellis to pick the right color changing the screencolorscheme to use the knime colors for selection and hiliting,push down
opmstructurallinks are now displayed using manhattan routers and with a special figure so that the router can be changed more easily closes ,push down
refactor and rename session manager to session store,rename
her refactor parameterizable policies out of frontier defaults xml update bundled profile for new chains refactoring crawlcontroller java move to three processor chains rather than one frontier java loadseeds removed toethread java delegate most processing loop to fetchchain and dispositionchain abstractfrontier java workqueuefrontier java move policies calculation out to processors candidatesprocessor java new processor for dispositionchain that runs every outlink through candidatechain crawlstateupdater java dispositionprocessor java rename expand to prep crawluri for frontier frontierscheduler java deleted use candidatesprocessor candidatechain linksscoper java deprecated use candidatesprocessor candidatechain candidatescoper only temporarily retained for ease of comparison candidatescoper java simple single uri scope testing for candidatechain frontierpreparer java precalculate all frontier policies in candidatechain before scheduling preconditionenforcer java processoruri crawluri take on some prerequisite preparation previously deferred to elsewhere processorsreport java update for chains of processors sheetoverlaysmanager java applyoverridesto moved here for broader use candidatechain java fetchchain java dispositionchain java role specific subclasses of processorchain suitable for type based autowiring crawluri java new fields accessors of use to new chains frontier postprocessor java deleted skip to postprocessing is now skip to end of chain processorchain java take on control loop formerly in toethread processresult java absorb processstatus eliminate problematic stuck result,rename
renamed conditionspecification to condition,rename
rename storage to storagedisk introduce storage interface,push down
creates a single center nod from real live data git svn id d f ee a dfeeeb ,push down
inlined wordcramengine s shapetoimage to bring its logic closer to what s in drawwordimage they re very similar trying to un tangle the mess there,inline
move test sections out of the menus,pull up
aesh a rather big refactoring processedcommand option are using builders now instead of numerous constructors commandcontainers can now contain other commandcontainers if they are a groupcommand,inline
merge luna changes,inline
refactoring extracted some common code,extract
changed grouprequest to use completablefuture removed grouprequest setanycasting as this is already present in the requestoptions instance passed to grouprequest async unicast rpcs with or without future don t lead to the creation of a unicastrequest but are sent directly if rpc is async don t create a grouprequest instance removed nullfuture replaced explicit message in messagedispatcher sendmessage castmessage calls with buffer unicastrequest receiveresponse should not consult rspfilter replaced org jgroups timeoutexception with java util concurrent timeoutexception changed accessors in requestoptions unicastrequest now uses completablefuture changed rsplist to subclass hashmap saves bytes plus fewer methods unicastrequest get on future removes request from correlator s table calls to an empty destination set now always return an empty rsplist,inline
closed make mockdevice behavior configurable refactored mock device to move code from mockconnection to mockdevice where it belongs,move
added per biome config some rework about config files added per biome object generator make it slightly work,inline
minor refactoring consolidation to work around using protected api in webobjects,pull up
fixed path to update lb extension,push down
move test sections out of the menus,push down
refactored servlet and standalone to prepare for eventual non servlet based ninjas,pull up
ismavatar commit alpha updated customfilefilter to handle files without extensions does not use a for loopfixed indexbuttongroup setvalue for non cumulative values changed from maptable to array stable but non variable size updated soundframe load and save buttons now load save sound data untested layout gui etc merged filename label and value addgap method added maybe extract to resourceframe appended space to messages properties soundframe file valueupdated lgm to display the working filename updated listener removed some listener debugger code for jfilechooser default folder added quadduc to credits in lgm upgraded marko from a hole to jerk git svn id f f bc e be cd ,extract
continued rename,rename
new files or files moved from other locations,move
code refactor,move
o created a real enum file for the sessionstate o added some javadoc and comments o changed the name of the state method to getstate for clarity sake o renamed remove to removesessions in the abtractpollingioprocessor class for clarity sake git svn id f bb ffa edef ,rename
rename where constraints,rename
added a few method stubs some comments,extract
sc qcadoomes samples properties moved to mes application conf,move
refactor fix build,pull up
lib add methods to saxtransformer to pass callback function to setup transformer,extract
canvas d name changed to vtkcanvas added new volume visualization option as gpu raycasting separated volume rendering in dedicated class updated vtk library loading for unix system added vtksequencevolume and vtkimagevolume classes sequenceutil added togray torgb and toargb methods,push down
test code refactoring,push down
constraints used to create table moved to own utility class,move
refactor jelisp tests todo fix load stack,pull up
added one more class to move the charting logic there this is the kind of code where you have to wonder if java is really helping or getting in the way,pull up
o extracted a well named method removed a commentgit svn id f bb ffa edef ,extract
removed configuration singleton injected relevant values directly into proxyresponserenderer renamed some config attributes,rename
moved getnamespaceuri down to foreignblock only will make apip easier later,push down
changed some fields to final,inline
b refactoring categories added prefixcolumnmap delimiter ascategoryset parameters to jdbcfeedsource jdbcfeedpublisher to we can configure our categories through spring moved category refactoring code into atom hopper project no more cloudfeeds atomhopper,move
remove sync check in the local listeners postponed to next cellar release git svn id f bb ffa edef ,push down
removing scraping qa design adding support for lbdc file parsing missing data reporying and related storage mechanisms,pull up
new way to describe the location of a dockable on a splitdockstation bugfixes in the change of modes by the fstatemanager git svn id d d e b d d fefcacdf,inline
refactor remove unused pgpreparedstatement adjustindex ,inline
reimplemented escape for x speedup replaced the escape method with a much simpler method that produces on the order of x speedup moved the utility functions to util and made them public,move
renamed mergecanceller mergekiller optimization if fetchdigests don t send if we re the only member merge start suspends stable and the viewhandler in gms merge stop resumes stable and the viewhandler in gms,rename
rhbz move method to parent class,pull up
continued refactoring extracted plotconfiguration interface,extract
faces develop alloy inputtime component faces develop alloy inputdate component refactor inputdate to be more consistent with inputtime,push down
pmd refactored plsql integration using now javacc during build time to regenerate most of the ast nodes and the parser all ast nodes inherit now from the new class abstractplsqlnode this class replaces the former simplenode this class implements the interface plsqlnode which inherits from pmd s node deleted all ast nodes that didn t have any modification after generating them plsql integration is now more like the java integration,pull up
refactor elasticsearch daos some significant restructuring of the elasticsearch daos combine methods to get search request response and result in base elasticsearch dao instead of throwing an exception when querying an empty index return an empty response move all uses of resthighlevelclient to the base elasticsearch dao handle all ioexceptions thrown by the resthighlevelclient by rethrowing as a runtime exception reorganized some additional code in search daos to look nicer,move
rename priodings boundingboxprioritytree massive cleanup this will allow to use boundingboxprioritytree on bot x y and lat lon coordinates and for nearest neighbor search,rename
updated lib and action code in gmobjectframe and timelineframe moved getlibtabs to gmobject timeline calls it from there renamed getlibtabs to makelibtabs created addactionpane in gmobject timeline calls it from there git svn id f f bc e be cd ,move
create tables and clean up code,inline
subscriptionexecutionstate changing serialized format from json to avro the serialized avro is the raw data without the schema embedded this needs some more thought wrt versioning in case we ever want to change the format maybe prepend it with a version number or so next week git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,inline
refactoring df j nio continued,push down
rename source options to src for consistency,rename
rename updatethread databasethread and rewrite it again there shouldn t be any plugins interfacing with this directly so it should not break anything,rename
ashish ashok removing dependency of location sync on reports contract requests and refactoring web requests,inline
renamed osgifyme osgify model names and aspectj src folders,rename
roidescriptor replace usesequencedata by separatechannel added needrecompute sequenceevent and needrecompute roievent methods roipanel better refresh policies remove annoying blink during column sort better value rounding policies fixed some possible exceptions on sort operation other minors fixes and improvements pluginloader fixed getplugins class method which wasn t retrieving blundedplugin roiutil many deprecated methods because of the new roidescriptor structure sequence fixed getpixelsizescaling and calculatesize methods roi darea fixed a minor refresh issue,pull up
renamet to prematching,rename
remove duplicate texthelper functionality move tests of format to testelement,move
renamed availabletypestreelazy method for symmetry,rename
recordhandlers set rather than list for find resultlogback xml re added classappender config but commented out so it can be re enabled easily if wanted changenamespacetest fixed arg testps vivo xsl updated to use merged recordsjdbcfetch removed executeold transfer removed emptyjc jc to use jc truncate xsltranslator revamp and cleanupmerge fixed and workingspecialentities added exceptions abilitytranslatetest stop catching exception so we can see them when it fails specialentitiestest updated to reflect exceptions,inline
sgf enumeration restrictions xsd enumeration should be avoided in the xml schema removed the evictionactiontype xsd simple type definition and subsequently all evictionaction enumeration restrictions on all sdg region element types in the sdg xml namespace e g gfe partitioned region that define and declare an eviction policy and corresponding action in addition performed refactoring and cleanup on serveral new sdg enumeration types like evictiontype and expirationactiontype along with the corresponding converter implementations and bean properties on their respective factorybeans evictionattributesfactorybean and expirationattributesfactorybean,pull up
some more tests going added some still to fix tests,push down
merged decorator refactoring branch git svn id f bb ffa edef ,pull up
some code cleanup,inline
rename everything called block to page so terms are unified,rename
attached is a patch to fix the current issues with building under jdbc this patch moves the logic that looks up typeoid pgtypename and sqltypename from field to connection it is moved to connection since it needs to differ from the jdbc to jdbc versions and connection already has different subclasses for the two driver versions it also made sense to move the logic to connection as some of the logic was already there anyway barry lind,move
remove knowledge of xmlunitproperties from diff moved knowledge of nodematcher from diffbuilder to differenceenginefactory,move
revert changing xtest runner to offer a validate and run interface to the this reverts commit b ce a f b caaee e e,inline
improve a bit,push down
major refactoring untangling separation of logic,pull up
some minor icofile fixes removed warning renamed method to reflect purpose added convenience method for writing a normal outputstream gets wrapped into a streamencoder git svn id f f bc e be cd ,rename
refactor topological test sort to extract graph and results,extract
add snapshotacceptancetest mostly with tests moved from snapshottasktest these tests ended up uncovering a few bugs which i ve fixed,inline
further implementation of dependency manager moved some code from the client to service acquisition as it is a better place some further cleanups on client code,move
renamed defaultsmtpevaluator to urlevaluator updated test case minor javadoc modifications to timebasedrollingtest,rename
improved cachecreate tests added getusertransaction test test support reorg,push down
introducing new option to openssl validator lazy loading on demand so far implemented for namespace policies both types only,push down
mdep updated dependencies to get the new unarchiver for rar had to move around the tests to avoid new heap size issues git svn id f bb ffa edef ,move
polish after pr merge extract common typemirror extraction into a separate method remove not needed code from tests,extract
gave exml its own facet this allows resolving component suite namespace uris on import and improves handling of exml source files and generated artifacts not yet complete but already usable also added an icon and the corresponding iconprovider for exml files git p depot paths coremedia jangaroo change ,extract
getcopyofpropertymap was renamed as getcopyofcontextmap in slf j ,rename
backlog changes utilhtmlsanitizer function params and moves name sanitization from connectionservice to connectionserviceimpl,move
jvstm lf draft ongoing work in distributed commit improvements to the remotecommit revise the validation algorithm create local and remote lockfreetransactions distributedlockfreetransaction is what actually is created by jvstm s transaction factory then local or remote instances are created when processing the commit requests a locallockfreetransaction wraps the node s local distributedlockfreetransaction instance,push down
revert changes that replaced getexpandentities with isexpandentities this commit un deprecates the get versions of the methods and removes the is versions,inline
renamed constants in hive tests for better clarity resolved intermittent failures due to use of incorrect constants updated hadoop all sh template to include configuration steps for x and cdh versions added a script to make testing easier,rename
refactor a bit to help reduce redunancy from ,pull up
implemented shift and lock and cleaned up from last commitsremoved commented updateinstance code refer to r or r if neededextracted different mouse parts to methodsremoved extra repaint call in mouseeditremoved wip text from object tabdowngraded cursorinstance to instancecomponent cursoricswapped id and object in roomframe status bar opposite of gm but more logical this wayremoved edit mode editinstancesobject editinstancesdeleteunderlying too hard to keep up to date just used swing directlyadded fixme tag for object tab i ll probably take this up git svn id f f bc e be cd ,extract
removed prestotype readonly which is now defaulted down onto prestofield readonly moved readonlymode to prestocontext isreadonly,move
resolved issue dirmina org apache mina common transporttype changed transporttype into an interface added transporttype getaddresstype added transporttype getsessionconfigtype removed transport type registry feature because it s not used anywhere removed the related unit test git svn id f bb ffa edef ,push down
and more code extracts,extract
save all refactor save action classes refactor save previously save all such that the version which appears in the objects menu and the version which appears in the this menu share a common superclass to simplify future maintenance,pull up
java moved attribute accumulatedpoints to tf stats as this is specific to gamestats added ispublic method to gamestats reformatted code,push down
renamed method for retrieving articles for user git svn id database branches hprofiler a f c aaa da e aacc d ,rename
bug duplicate object ids are created under certain conditions the insertionadapter wasn t always setting object ids so added a base class method to create temp objects and assign ids bug feature serialization for some elements does not match xsd used by jbpm parser added framework support for reordering features bug file save takes an unusually long time when jbpm user task property tab is visible refactored some code to cache tooltip text lookups this was enough to speed up the resource change notification loop,inline
java splitted steamsocket and sourceserver into new classes steamsocket and gameserver as abstract classes child classes of both for goldsrc goldsrcsocket goldsrcserver and source sourcesocket sourceserver fixed goldsrcsocket getreply to correctly reassemble goldsrc s split packets issue changed test to query a source and a goldsrc server,push down
 add parameter requesteddate to the create updatesubscription calls,extract
first major move with generics filter get generified and all the core jdom classes get fixed as the errors warnings come up org jdom is warning free in eclipse,move
extract step to a new function to make it possible to unit test,extract
updating websocket library to use new protocol changes to wsthread to implement the same dsp ,inline
introduce imatrixviewdimension and refactor some code,inline
moved prompt to only item del settings,push down
refactor some code,pull up
rename the jvm opts options to java options to be in line with the vertx command line signed off by clement escoffier,rename
refactor jogltargetfixedfunction common code to abstractjogltarget,move
refactored dataseries to replace overloaded class type with enum,inline
rename simplifytext to coalescetext and make it optionally descend,rename
added removeoobmessages,extract
closes gh refactor coordsuspendxcommand coordresumexcommand to transitionxcommand based from chao wang git svn id f bb ffa edef ,pull up
moved delete vcomponent to utilities todo move edit and delete to vcomponent,move
refactoring removed creator classes,move
improvements remove spikes simplify code in wronganglefixer git svn id prec coord d f ee a dfeeeb ,inline
added epi report,extract
vishal vishnu moved aggregation of smear and weight results to patient,move
refactoring of event bus into a clearer and cleaner form logic has been simplified and teased out some inner classes have been factored out into independent classes,push down
extract shared validation logic,extract
only extract urls that look like youtube watch pages,extract
split resolvelocation into multiple methods,extract
score make tempjena connect to uniongraph so empty dataset queryworksdatabaseclone trial new properties features layouttdbjc remove silly init method and merge into constructordbclonetest use new constructorex ps dbclone conf update format to reflect new dbclone features layout,inline
integrated nrepl add new repl view refactoring of editor source viewer simplified launch process,move
enable tsdb to store datapoints with salting by modifying the addpointinternal method along with some tests signed off by chris larsen,inline
some more tidy up work on the remote database stuff,push down
refactored uploading to attempt upload times rather than connection,pull up
refactoring rhodesadapter class fix create rhodes app from exists source fix show error in preferences,pull up
code cleanup in preparation for release of simplified protocol structure moved configlocator logic into hibernateconnection split large hibernatedatabase class into multiple implementations added javadoc test and test data reorganization removed slf j dependency,move
 introduced nature converter attribute when converting a project only consider converters that apply to project s natures all other converters are ignored thus avoiding unnecessary bundle activation signed off by igor fedorenko,inline
create unit test leavetest replaced base conversion via javax xml bind with base methods moved gmsimpl leaving and gmsserverimpl leave promise to gms added setxmitinterval to unicast fixed ccme in fd sock changed suspected mbrs to concurrent set added single test target to build xml removed bind addr from viewdemo and draw removed setting of system properties external port and bind addr in tests changed log formatting of message exchanges in nakack changed log formatting of message exchanges in unicast ,move
add branch coverage column including refactoring common coverage column code to an abstract class,pull up
reversing change to the date routines in this file as i suspect they may be causing the recently observed breakage i remember from the beginning that things dont work if the year field has certain values git svn id d f ee a dfeeeb ,inline
bug fixes new tests and structural changes needed for development of the new systemverilog parser,inline
renamed to futurerequestexecutionservice moved implementation classes to o a h impl client package git svn id f bb ffa edef ,move
switched to a common getmaxlen minlen implementation for all attribute types,push down
hv renamed constraint to constraintdefinition,rename
finalized sync async gae implementation with query batch lots of code re organized finalized sync jdbc implementation with query batch lots of code re organized moved all static functions in static class containers jdbc async is not yet implemented some batch functions update are not yet implemented added lots of unit tests,pull up
moved checkperiodicboundary method to the only algorithm where it is used,push down
initial support for hover currently disabled moved justification code into it s own class in a new subpackage for inline layout because it s so blooming complicated issue number obtained from submitted by reviewed by,pull up
starting to refactor showcase,pull up
added the audio read call there now exists an audio read call which is nearly the same as the video read call except for audio prompts the audio and video objects have been refactored to make it easier to access and control media objects closes ,pull up
extracting handling logic for unknown provider resources classes,extract
continued refactoring,inline
renamed ajaxseleniumcontext iscontextinitialized to isinitialized,rename
extracted executetext,extract
fix sequence name type,push down
more refactoring of mtt and simulation formatting sessionid now private in simulation currentframe now private in simulation completecursormessage renamed to allcursormessage to more accurately describe its funtionality,rename
renamed isa instanceof,rename
refactor,pull up
add populategeneraltab method create separate method to create the controls for the general tab leaving other setup in the existing creategeneraltab method make destdirbutton an instance variable so it can be created in one method and referred to in the other,extract
renamed method to avoid conflict with associations,rename
move more methods to bufferedrelayserver to simplify further buffered implementations,pull up
cditck move synchronousqueue to applicationscoped bean,move
sending requests as oob better perf access to client locks via clientlocktable modified semantics of lock acquitsition and thread interruption same as for reentrantlock removed synchronized from serverlock methods moved sending of lock responses outside the lock scope serverlock handleview and handlerequest only return response max jira,move
renamed dimensions to arraydimensions in variabledeclarationentry as well as typereference to effectivetypereference to be more consistent,rename
package and class name refactoring part ,inline
added feature to drop entities some refactoring and bug fixes,extract
make showoption top level make show extend showoption now when we compile a list of showoptions if we already have a show for any of the options we can use the show object instead,pull up
rename binding members var referrer the var who refers to this binding literalbindings bindings,rename
cleaning up,pull up
renamed to todo list application,rename
refactored indexes generation that was in the abstract codegenerator and moved them to the indexescodegenerator,move
pinbit machinery extracted to separate class transition executor now is a property and not a constructor parameter,extract
command system refactoring,push down
changes to shift functions to personal service,push down
remove non filled bar chart style rename some methods,push down
implemented disabled adapters updated configuration further refining adapter idioms refactored response handlers and renamed some classes in related packages to better reflect domain intent,move
o reduced duplication in mojos extracted nice methodspatch by stefan birkner submitted via github reformatted to intellij maven template by me otherwiseunchangedgit svn id f bb ffa edef ,extract
renamed a method git svn id b cb b d ca fae ebed b ,rename
improve multicommand to be reviewed more precisely to handle displayui correctly,push down
reworked draggablenumber and parameter view there are still a lot of issues with margins,inline
refactored fileflagsprovider api,inline
final refactoring of the process config some final adjustments were made to the xml s process config and this solution provides a more condense object oriented way of handling the acceptance and rejection of input data,move
add test for redis cluster max redirections and refactor jedisclustercommand exception handling,pull up
refactor properties config loading,push down
redesigned the comparisonfilterpipe its much more flexible and easier for users to implement or override the testobject method now complicated tests beyond equals can be created also per emil s request i made the filter option on the comparisonfilterpipe take enum instead of a boolean thus there is filter allow and filter disallow updated the tests and javadoc to reflect new changes,pull up
merged in the img file reading support the underlying img read code atthe imgfmt sys level has been heavily changed so watch out appears togive the same result files as before though in addition to read support you should find that blocksizes other than now actually work combining img files into a gmapsupp img file is now possible although notimplemented just yet git svn id d f ee a dfeeeb ,inline
hv move from jaxb to stax for xml mappings,move
renamed setmobspawnrate for consistency,rename
renamed easy classes to relaxed to better match the solution,rename
bval rename getvalue to getinvalidvalue git svn id b cb b d ca fae ebed b ,rename
added select and renamed objectfilter to discard provided respective test cases,rename
refactoring move calendar classes to new calendar class collection,move
cdi module moved to configuration module added loading cdi configuration from xml file,move
arqgra moved requestguard interface to api,inline
aravind pushed related things to gateway,push down
fixed some issues in an earlier merge renamed feeds to sources in the historic object,rename
continued refactoring not functional but compiles,inline
renamed dynamicfunction to nativefunction created a new path interface and path library started to work on making paths and functions have a similar bheaviors programtically and to allow people to define them both in java and in gremlin,rename
plfed move the reading and writing of ststype to wstrustutil git svn id cbddccc e a eb be d e b d ,move
rename getprotocol to getmechanism,rename
add rules component and dependencies to as and distributions,extract
simplified attribute model for consistency,push down
move sharedloglogic specific getcheckedoperations from superclass move operation resolving to abstractloglogic,push down
hama add i o system to yarn git svn id f bb ffa edef ,extract
rename method for clarity,rename
faces move method com liferay faces util component componentutil getclientvarname facescontext clientcomponent to liferay faces alloy jar,move
extract code to additional function,extract
added viewhandler removed viewbroadcaster,inline
rc functions rename reorganization of common model data,rename
hv rename containerelementindex to typeargumentindex,rename
added mote test for clientcanvas,extract
simplify roadmerger add static to methods were possible move evaluation of routeflags to convertedway rename element getentrysetiterator element gettagentryiterator git svn id d f ee a dfeeeb ,move
refactor tests,inline
refactored code structure added licence heade continued spi work added file inputstream url readers,push down
refactored protocol dependency collecting to context building,pull up
small effort to further reduce the amount of fiddly saxon dependent code,push down
small cleanup,push down
new html report aggregating all the charts and data from csv files more ways of retrieving data from simplestatistics fixed bugs in histogramstatistics table removed unused code chartgen abstractchartgen putgetchartgenerator chart sh report sh generates whole report not just single chart,inline
rename node getasxml to node getasdocument which is a more accurate naming git svn id baf d a c fc e d,rename
surefire fix documentation of includes property o includes property now has separated javadocs for failsafe and surefire,push down
moved wrap before and after from element to node for flexibility overriding implementations in element still return element,pull up
added state to connection entry going to closing state before removing connection ,pull up
remove the window argument from the method signature and move configuration to a separate class,move
changes to webinar example code,inline
merged orientgraph into blueprints this includes implementations of graph vertex edge operational semantics validated through property graph test suite updated readme textile and changelog textile to reflect orientdb inclusion,push down
simple channel use publisherdetails for availableon rename groups to channelgroups,rename
modified dynamiccomposite to handle non dynamic composites as well renamed dynamiccomposite to composite fixed typo in dynamiccompositeserializer added changed to comparatortype to let it reused by composite,rename
unified the layouts of all dialogs improved the settings of some on the visual side at bit fixed a small bug regarding the measurement tool channels starting at iso various cleanups,inline
activescope cleaning continued mixins filtering is moved to another class,move
resolved issue dirmina defaultiofilterchainbuilder synchronization issue with contains methods changed defaultiofilterchainbuilder to use copyonwritearraylist added more remove methods to iofilterchain in trunk did a little bit more synchronization and volatilization on methods and variables git svn id f bb ffa edef ,inline
cde adding unit tests,extract
added next int step prev and stepsbetween hash hash to geohash added boundingboxsampler class refactored common code between boundingboxsampler and boundingboxiterator,move
add a simple server for the jbtool that can respond to simple requests so far the only two requests that are understood are to retrieve an item number s xml and to shut down but more is straightforward to build git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,extract
it s now possible to map to java objects when extracting from a list in jsonpath,extract
reworked indexdeligate code to finally fix a dastardly bug,push down
enhanced the batch handler to output error messages added more tests and new provider that dumps docs selected by a query,extract
revert initial clean up in filelister this reverts commit b e c eb baab e bd cc a a ,inline
adding response handlers fixed bug where the workspace configuration processor would not append context paths,extract
moved multiget operation to esi jsearchindex get remains in esi jindex as it can t be performed on a multiindex e g,pull up
fixed hudson adding notifier for perforce labelling upon completion of builds,extract
add and,extract
rework a bit connection pools internals based on feedback waiter aren t be added to the waiters list when there is no waiter extract the connection acquisition from checkpending and use it in getconnection remove the all set and use the weight instead set a removed boolean on holder to tolerate incorrect usage of connectionlistener removed the validity check on the connection in favor of a pool eviction calling goaway code uses the last known stream instead of max int value,extract
restructuring itemidselection,push down
changing text properties simplified fixed,inline
extract version field from json responseextract the version from elasticsearch json response whenusing getsourceasobject getsourceasobjectlist try to apply the value to a jestversion annotated field in thesource object,extract
imap move search tests to new file,move
rename cleanup ci skip,rename
extract oidc userinfo and token request construction into extensible methods,extract
extract the main bindingimpl factory implementation of providermethod into an abstract base class this is a prefactoring for moving multibinders into the core all the multibinder factories will share a lot in common with providermethods they are providerinstancebindings the providers implement providerwithextensions the usersuppliedprovider is a bit of a misnomer so we provide a standard implementation this also removes the providerlookups from every providermethod which were pretty much unneeded created by moe moe migrated revid ,pull up
changes in the nio implementation and re implementation of gossiprouter routerstub added pubserver and pubclient added send null to send to all added gossiprouternio added static creator methods for nioserver and tcpserver added code to create client servers tcpgossip and tunnel can now choose between blocking and non blocking connections to gossiprouter use nio request and response types between routerstubs and gossiprouters are now in a separate enum gossiptype removed gossiprouternio non blocking io will be implemented in gossiprouter itself using nioserver tcpserver added util buffertoarray moved connectionlistener out of baseserver removed server added list to gossipdata receiveradapter now uses util buffertoarray tcpgossip now implements routerstub membersnotification callback routerstub now uses baseserver to connect to gosiprouter gossiprouter now uses baseserver to implement connection management added tcpclient and nioclient moved all client server related classes to org jgroups blocks cs added tcpclient and nioclient moved all client server related classes to org jgroups blocks cs de genericized baseserver et al moved to package org jgroups blocks cs reconnects in routerstubmanager now work use peer connections to make unit tests pass added suspect handling in gossiprouter when a connection to p is closed then a suspect p will be sent to all members of that group made marshallinf of gossipdata for type message more efficient removed copying of messages in gossiprouter setting parameters in sockets channels before connecting them tcpconnection isopen now returns true when the socket has been created rewrote serverunittest to get rid of issues with dataprovider upgraded testng dep to x,move
our own keystone redux reworked to eliminate some of the questionable ideas from keystone keystone doesn t keep a directory of endpoints client certs used for services fixed separation so that platformlayer itself doesn t need the auth db,push down
more code refactoring,pull up
rename chain to compose to be more mathematically correct,rename
 moved field patienttype from patient to treatment treatmentstartcriteria now makes the check on current treatment to find patienttype removed superfluous latestprovidedtreatment method on patient replacing it with getter for already present field,move
mchanges remove redundant anchors set on headings with subtask mchanges move anchor location in changes xml to header git svn id f bb ffa edef ,inline
move command hooks to top level of options hierarchy,pull up
internalnode interface introduced hg rename src main java org geolatte graph visitor java src main java org geolatte data visitor java,rename
merged setdigest and mergedigest into method ,inline
refactoring of remote services api and rest api,inline
minor cleanup,pull up
made several ui changes to accommodate brett s feedback removed question mark for time dimension label changed unique members label to contains only unqique members added bindings to show hide the clear ordinal column button added an editable menulist for the time format unfortunately it looks like the editable attribute is not yet implemented in the pentaho ui stack for menulists cleaned up the showing hiding of elements specific to time dimensions added utility method to show hide a container put time dim items in a container and geo items in a container changed code to hide show said containers,inline
refactoring bug fix,push down
moved session explosion code into candservicebase,pull up
refactored reportmanager so reports are just built in memory and not persisted,inline
a few more x fixes,push down
enhance mismatched block stache errors previously we only highlighted the close mustache in the case of a mismatch and we did not provide a quick fix which users probably expect if they are used to the xml html editing capabilities move the mismatch detection out of the parser and into an annotation object and inspection and add quick fixes for making the names match also smarten up the check to cover complex ids previously we were only ensuring that foo matched in foo bar foo baz and hence missing errors in cases like these,pull up
address confignode pr feedback address various pr feedback including remove unused map from confignodecomplexvalue stop caching keyvalue indexes in confignodecomplexvalue return an iterable for the children methods in confignodecomplexvalue and confignodekeyvalue change all confignode classes to implement abstractconfignode remove the constructor and the token instance variable from abstractconfignode make the render method final and have it use a new tokens method which returns the list of tokens contained by the node stop caching values in confignodekeyvalue,push down
refactoring extract tail builder classes and introduceabstracttaildoublearray class,extract
update version snapshot commit dde b f d d f d aa d d a author toshiki takeuchi date fri mar add cmykcolor class add enum classes for texture commit afbef c fc da aa af d author toshiki takeuchi date fri mar integrate mousewheelevent with mouseevent commit aab d d f fab b f f ec author toshiki takeuchi date thu mar fix a bug of sql modify arraylist of graphicsobject to copyonwritearraylist commit c a cbf a c e d fb d author toshiki takeuchi date tue mar update pom xml to use latest openni and nite commit ace d f d a df a dc c cc author toshiki takeuchi date tue mar modify trackball commit ab ddfdd e de e fe cbc a f f author toshiki takeuchi date fri mar add mouse class commit a d bf af b beadd f d a author toshiki takeuchi date thu mar fix a reshape bug commit afe e e e b a de d db f e author toshiki takeuchi date sat mar add reset method to trackball class refactoring applet and cursormode classes commit bfbab ddc c ffa cfaf a dda e author toshiki takeuchi date sat mar add trackball class commit e c d fadf df dcadd f a db c d author toshiki takeuchi date fri mar fix box class commit fe dbb ef c ef b da c d edaa merge ed df author yuki ban date wed mar merge branch dev of github com casmi casmi into dev commit f fb e ce c e cff cef author yuki ban date wed mar modified timeline class commit ed df f a ec ced de d ca cb cf author toshiki takeuchi date tue mar remove warnings of cpopup commit d c afd f ce fed ac b b author toshiki takeuchi date fri mar add license and javadoc comments commit fec a adf eac b fba c b author yuki ban date fri mar modified selection buffer commit cf da cd f dc f f f abdc e author xcoodev date sat feb add synchronized block in rendering commit b aa d ca f aad merge df d ba author xcoodev date sat feb merge branch dev of github xcoo casmi casmi into dev commit df d d a bced e b a c de c author xcoodev date sat feb add function to show a alert dialog box commit ba ab e b ed ce cb d b e eb author toshiki takeuchi date sat feb refactoring some classes commit e a c efc e b abb ebb ef e a b author xcoodev date sat feb fix bug in polygon class commit c f f c fd b c a author toshiki takeuchi date sat feb add graycolor class commit f a fda cffb bce bbd dd a author xcoodev date sat feb fix bug in line class commit f c ab a e fd d c author yuki ban date wed feb add mouse wheel event commit e b a bc f ff f c f defef author shigeodayo date fri feb add cpopupmenu add cpopupmenu easy to create popup menu commit ce bf f a dc da cfd e author toshiki takeuchi date fri feb fix bugs about primary key and short long type commit c fe a f aa a ff af f c author toshiki takeuchi date tue feb divide color class to three classes color interface rgbcolor class hsbcolor class remove colormode refactoring many sources commit f e cd d e e ca c author xcoodev date thu feb fixed version reference in readme commit de bf f c e ca caf author toshiki takeuchi date sat feb update version to snapshot commit b ef cc aec e c author toshiki takeuchi date sat feb rename roundrect java to roundrect java add maven compiler plugin version to pom xml commit b e ae be e de a author yuki ban date sat feb add repeat function to tweengroup commit c df bbf a c c ce fffe b f e author toshiki takeuchi date sat feb add a repository icon,push down
method rename to getcontextnodexri,rename
differenceengine test refactoring part ,pull up
issue rewritten viewcomputerdialog and fix some gui issues,inline
move classes and files around,pull up
code refactoring calculate super hash with bytes array,extract
isqreader move the dialog code into run and tidy up,inline
moving parameter processing to the superclass,pull up
fixed checkpoint logic moved checkpoint creation condition to history,move
properties column now highlights non default values still a bit buggy internals new visitor pattern for manipulating all selections able to disable rules from the violation list grouped rules show all unique priority values revised filter column icons revised plugin xml to export code for other plugins new opening rule panel for rule creation wizard git svn id baf d a c fc e d,push down
how i resolved applied the same fix to datagram transport backported all fixes to moved some common methods to baseiosession abstractiosession git svn id,pull up
support for european e identification merging with master only bootstrapping signature signing configuration if none defined support for configuring providername and authnrequest extensions guarding against null pointer exception when authcontext is defined but authncontextclassref is not it is not mandatory adding support for setting a saml attribute as the principal id extracting code block to reduce internalinit method size,extract
dheeru refactored by pulling up common transitional logic to base transition class,pull up
 asynchronous cache executor to use asynchronous cache apis changed algorithm of the backend response freshness check both classic and async cache implementations,push down
reworked the way how quartz mongodb accesses mongodb it is not through the mongoconnector interface support two implementations out of the box the one that owns the lifecycle of mongoclient creates and closes and another that just uses what user provided,push down
more code comment and a rename,rename
jgrp simplify flush jgrp investigate multiplexer locking scopes,inline
newtools added checks for native methods support to make method abstract non abstract,extract
linkurlprocessor remove input hdiv state parameter if it exists,pull up
renamed iscategoryadministrator to mayeditcategories and implemented it on liferayauthorizationservice,rename
refactored mpst explicitendpoints and updated demos,push down
move handling of command hooks to top of command hierarchy,pull up
menu contains all the menu items from the precusor gui add hide most frequent overlay option to the view menu add outlier handling option to the view menu change jmenuitems into jradiobuttonmenuitems when necessairy for the functionality add actionlisteners to those menu items where they were still missning plus the skeleton of the performer methods,extract
refactoring node visit with class checking,pull up
refactor,pull up
some refactoring of router classes,push down
extended the code in the iconio package added read support for new style icons with embedded pngs added write support to icofile in most cases the output matches the input i o now done with lgm s streamdecoder encoder gmfile now stores which version it represents at the moment this is only used to determine whether the game icon needs modifying if game version for easier debugging ending the inflater restores the original file position read byte int int now guarantees the requested number of bytes will be read unless eof is reached bufferedinputstream guarantees this but inflaterinputstream does not streamencoder now subclasses outputstream for convenience git svn id f f bc e be cd ,pull up
renamed class objects to objectutil for consistency with other util classes ditched existing objectutil class moving its only method to textutil,move
refactor transactions abstraction to have a transaction local context,pull up
a little tidying,inline
update to probably gonna move to github permanently now,move
jdbcfetch constructor cleanup fixed need for rh config,inline
deprecation fixed a few movemes added erxtomanyqualifer implemented evaluatewithobject on erxinqualifier,pull up
 added atleast support implemented concept of different await strategies added basic tests for atleast method,extract
refactoring to support new test cases in localdiscovery new test bundle,pull up
fixed issue testname junit rule doesn t respect unrolled method names added properties reportiterations and iterationnameprovider to featureinfo all iterationinfo s now have a name and description moved all unroll logic into an extension changed methodrule and testrule integration to respect iteration name,move
added overloaded remove for user specified timestamps,extract
simplified launching of swift,inline
removed jdbcconnectioncloseoperationcollectionaspecttest testcloseexception due to jdk version behavior issues there are some weird behavior issues between and ,pull up
volumes a sort of self made cuboid abstraction refactored warzones monuments and team spawns into volumes can finally start adding new features again soon,inline
refactor jwtprofile and oidcprofile ,pull up
renamed osgifydependenciespackager repackager added repackagertest,extract
rename tests around graphsonutility,rename
refactored parcel and parceldto now uses autovalue central uses parcel directly,pull up
cleaned up extended newick code did some testing,inline
refactored statistics recording api,extract
tfj extracted an interface from configuration class introduced configurationbase removed static factory factory method twitterfactory getdefaultinstance was too verbose and meaningless in terms of cost efficiency profiding a default constructor should be enough git svn id b e d d ab bb d b,push down
refactored and extracted open type converter in an own class,extract
renamed onevent to refresh,rename
re design a new data structure of bspmessage git svn id f bb ffa edef ,push down
cmdline checks also for added xprj fileending renamed methods added method,rename
plexus manifest now extends jdk manifest this change has several smaller compatibility breaks most of which should be easy to reasolve the actual plexus manifest class is now a subclass of jdk manifest and clients are recommended to use the jdk manifest methods,pull up
code handled search config settings differently in different places refactored to use a single static method on searchcommandparser instead also some javadoc,move
improve resources management,push down
added backquote t for tag call and backquote a for action call some internal refactoring that prepares for play independent templates,pull up
extract if clauses into methods and add javadoc commentsthe extracted methods more clearly describe why we useequinox extendedlogservice it provide named loggerswhich log messages with class based granularity instead of bundle based like with standard osgi logservice additionally the extendedlogservice is included and used by defaultin eclipse since version ,extract
toby moving addition accumulators into their own class and adding multiplication accumulators along with product methods,move
improved fixed sequence image ordering from filename many improvements on chat faster desktop rendering fix lag issue on osx support style coloring from irc support multi channels chat added closetabbedpane component basically a jtabbedpane with closable tabs added ircutil class irc utilities minors changes in pixel band imageposition classes some others minors fixes and improvements,inline
command line only needs for command mode search mode doesn t need it so it is better to move this to the commandlineparser code,move
prepare source for high precision with bits rename variables and methods like lat to lathp or lathighprec use named constants instead of values or git svn id d f ee a dfeeeb ,rename
refactoring for notifications,extract
extract out the method that runs an arbitrary file of sql statements so i can use it to create an actual upgrade path wiuth migration like things git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,extract
renamed method,rename
removed maketag functionality in chckout,inline
creating result iterable search moving longsearch to senateobjectsearch which relies on resultsearch,move
changed test logic and moved test configuration to the test method,inline
 removed attribute from daily weekly monthly controllers made them protected in abstracthistorycontroller during selection of research group in section history changed first menu item to all groups for daily weekly and monthly download history deleted menu item select research group git svn id database trunk a f c aaa da e aacc d ,pull up
refactor task to accomodate more general cases than just youview also includes some attempts at refactoring the tasks to split upload task creation content identification,move
cogrouper now extends configbuilder this permits easy testing of cogrouperconfig,pull up
merged revisions via svnmerge from r pyaschenko thu jan line rf r alexsmirnov thu jan lines coding in progress issue rf csv make client code compatible with the current wiki document r pyaschenko fri jan lines rf validators and converter hash script rendering were added validators and converters were moved to richfaces csv container bugfix r alexsmirnov fri jan lines coding in progress issue rf csv make client code compatible with the current wiki document r alexsmirnov tue jan lines coding in progress issue rf csv make client code compatible with the current wiki document length validator working r alexsmirnov wed jan lines coding in progress issue rf csv make client code compatible with the current wiki document r alexsmirnov thu jan lines resolved issue rf csv make client code compatible with the current wiki document,move
tfj refactored configuration made stateless tfj ability to configure baseurls introduced following properties default value twitter j restbaseurl twitter j searchbaseurl twitter j streambaseurl twitter j oauth requesttokenurl twitter j oauth authorizationurl twitter j oauth accesstokenurl twitter j oauth authenticationurl git svn id b e d d ab bb d b,pull up
moved partetestcase to a child of connectortestcase and renamed mrthod lookupmessageprocessorconstruct to lookupmessageprocessor,rename
rename scopemanager and create an interface,rename
api changes to be consistent with the client side and facilitate groovy subclassing component getproperty component get component getindexedproperty component getindex component setproperty component set component setindexedproperty component setindex deprecation of style getproperty and style getindexedproperty in favour of new style get and style getindex consequential changes in mutablestyle and derivedmutablestyle along with corresponding rename of setters,rename
sc qcadoo add transactions,extract
lib refactor attributecoercion s,inline
refactor the loading of resources,push down
rework type resolution javatypedefinition now lazily resolves generics meaning less overhead and avoiding access order problems ie class foo extends these means you can no longer request the generics list all at once but you probably shouldn t anyway i took the chance to move most type resolution code dealing with java s type to the javatypedefinition this makes things a little clearer and tidier there are some minor api changes but since is recently out i doubt these have any impact plus there was no easy way to just patch away the open issues in the old greedy algorithm,inline
simplified constructors of ldms reordered member functions,inline
blank signs bug fix doesn t compress chunks that are not in active chunks replaced worlds onload uses player move events to track player location created reflectutil to handle field transfers,move
renamed definecondition to condition renamed condtion to conditionevaluator etc,rename
doc gen big refactor to support general topics and scope,pull up
renamed isvalid exists,rename
renamed a poorly named method,rename
enhanced tool palette composition functionality added morph activity gateway features,extract
addlibrarytoclasspath,extract
first huge step at refactoring jbidwatcher to use guice instead of a wildly connected set of singletons,extract
this is a new implementation of input java util logging handler that intercepts logging information and forwards it to a splunk server through input there are two major changes massive refactoring that extracts sending events logic into a separate helper class this should make integration with log j trivial events batching events batching parameters delay in millisecond between sending events by default this value is i e and events are sending immediately com splunk logging max number of events in a batch by default i e no batching com splunk logging max size of events in a batch by default i e no batching com splunk logging an example of logging properties file handlers com splunk logging com splunk logging a db bef c f f b e f splunk server com splunk logging com splunk logging localhost com splunk logging metadata com splunk logging default com splunk logging localhost com splunk logging syslog batching com splunk logging com splunk logging com splunk logging ,inline
rename addall method to replace,rename
more refactoring added unit tests,pull up
creating client interface,push down
implement lems conversion and execution some refactor bug fixing move connection as projection children,move
getmidnightdate moved to calendarservice and calendar getstarttimestamp implemented,move
various fixes and simplifications to is not instanceof mostly under gwt make assertthat is not instanceof someinterface class blow up with a helpful message under gwt rather than always fail in the case of isinstanceof and always succeed in the case of isnotinstanceof make assertthat null isinstanceof fail under gwt instead of throw npe that said see b but for now let s bring our gwt behavior in line with our jvm behavior this also simplifies the code a bit delete platformtest which tests the helper methods directly in favor of adding more tests to subjecttest including tests for the cases above remove isinstanceoftypegwt from the jre copy of platform it s used only from tests not from the actual truth implementation also its tests don t run on gwt we could make them run on gwt but that doesn t help much since again that code isn t used from the actual truth implementation simplify the actual gwt implementation to avoid calling getname and to avoid constructing a set also simplify the jre implementation by inlining the helper method leave a todo to test with class metadata off which will demonstrate additional problems that show up only under that setting relevant assertthat is not instanceof someinterface class blow up with a helpful message under gwt rather than always fail in the case of isinstanceof and always succeed in the case of isnotinstanceof made assertthat null isinstanceof fail under gwt instead of throw nullpointerexception created by moe ,inline
remove globalobject caching from lexicalenvironment and move it to dynjs,move
set up a refactoring moving the base data methods to a base class,pull up
move interfaces of the v api to package me prettyprint hector api create a columnquery interface create two types of implementations thriftcolumnquery and avrocolumnquery not implemented yet split hfactory to two parts on is the external parts used by the api users and move to me prettyprint api factory hfactory the other part of hfactory is the internal methods used by the model package so they were moved to me prettyprint cassandra model thriftfactory and an avrofactory is due fix all required imports due to the above changes,move
some cleanup,push down
issue started implementing jdbc event store based on hsqldb refactored some classes to make them not depending on mongodb,push down
add one more test extract duplication,push down
aravind minor refactoring,inline
ngrinder simplify the impl delete unncessary code and extractmethods,extract
update version snapshot commit dde b f d d f d aa d d a author toshiki takeuchi date fri mar add cmykcolor class add enum classes for texture commit afbef c fc da aa af d author toshiki takeuchi date fri mar integrate mousewheelevent with mouseevent commit aab d d f fab b f f ec author toshiki takeuchi date thu mar fix a bug of sql modify arraylist of graphicsobject to copyonwritearraylist commit c a cbf a c e d fb d author toshiki takeuchi date tue mar update pom xml to use latest openni and nite commit ace d f d a df a dc c cc author toshiki takeuchi date tue mar modify trackball commit ab ddfdd e de e fe cbc a f f author toshiki takeuchi date fri mar add mouse class commit a d bf af b beadd f d a author toshiki takeuchi date thu mar fix a reshape bug commit afe e e e b a de d db f e author toshiki takeuchi date sat mar add reset method to trackball class refactoring applet and cursormode classes commit bfbab ddc c ffa cfaf a dda e author toshiki takeuchi date sat mar add trackball class commit e c d fadf df dcadd f a db c d author toshiki takeuchi date fri mar fix box class commit fe dbb ef c ef b da c d edaa merge ed df author yuki ban date wed mar merge branch dev of github com casmi casmi into dev commit f fb e ce c e cff cef author yuki ban date wed mar modified timeline class commit ed df f a ec ced de d ca cb cf author toshiki takeuchi date tue mar remove warnings of cpopup commit d c afd f ce fed ac b b author toshiki takeuchi date fri mar add license and javadoc comments commit fec a adf eac b fba c b author yuki ban date fri mar modified selection buffer commit cf da cd f dc f f f abdc e author xcoodev date sat feb add synchronized block in rendering commit b aa d ca f aad merge df d ba author xcoodev date sat feb merge branch dev of github xcoo casmi casmi into dev commit df d d a bced e b a c de c author xcoodev date sat feb add function to show a alert dialog box commit ba ab e b ed ce cb d b e eb author toshiki takeuchi date sat feb refactoring some classes commit e a c efc e b abb ebb ef e a b author xcoodev date sat feb fix bug in polygon class commit c f f c fd b c a author toshiki takeuchi date sat feb add graycolor class commit f a fda cffb bce bbd dd a author xcoodev date sat feb fix bug in line class commit f c ab a e fd d c author yuki ban date wed feb add mouse wheel event commit e b a bc f ff f c f defef author shigeodayo date fri feb add cpopupmenu add cpopupmenu easy to create popup menu commit ce bf f a dc da cfd e author toshiki takeuchi date fri feb fix bugs about primary key and short long type commit c fe a f aa a ff af f c author toshiki takeuchi date tue feb divide color class to three classes color interface rgbcolor class hsbcolor class remove colormode refactoring many sources commit f e cd d e e ca c author xcoodev date thu feb fixed version reference in readme commit de bf f c e ca caf author toshiki takeuchi date sat feb update version to snapshot commit b ef cc aec e c author toshiki takeuchi date sat feb rename roundrect java to roundrect java add maven compiler plugin version to pom xml commit b e ae be e de a author yuki ban date sat feb add repeat function to tweengroup commit c df bbf a c c ce fffe b f e author toshiki takeuchi date sat feb add a repository icon,pull up
simplified and corrected the tweet posting,inline
useless method inlined,inline
renamed primitive method basicat atput,rename
rename of methods for clarity and spelling,rename
arq improve init cleanupstatement handling rename properties to more meaningful ones,push down
initial restructuring to add jdbc support there was a significant amount of duplicated code between the jdbc and jdbc this checkin restructures the code so that the duplication is removed so that the jdbc support can be added without adding yet another copy of everything also many classes were renamed to avoid confusion with multiple different objects having the same name the timestamp tests were also updated to add support for testing timestamp without time zone in addition to timestamp with time zone modified files jdbc makefile jdbc build xml jdbc example imageviewer java jdbc example basic java jdbc example blobtest java jdbc example threadsafe java jdbc org postgresql driver java in jdbc org postgresql field java jdbc org postgresql core queryexecutor java jdbc org postgresql fastpath fastpath java jdbc org postgresql jdbc callablestatement java jdbc org postgresql jdbc databasemetadata java jdbc org postgresql jdbc preparedstatement java jdbc org postgresql jdbc array java jdbc org postgresql jdbc callablestatement java jdbc org postgresql jdbc databasemetadata java jdbc org postgresql jdbc preparedstatement java jdbc org postgresql jdbc updateableresultset java jdbc org postgresql largeobject largeobjectmanager java jdbc org postgresql largeobject pgblob java jdbc org postgresql largeobject pgclob java jdbc org postgresql test jdbc blobtest java jdbc org postgresql test jdbc connectiontest java jdbc org postgresql test jdbc databasemetadatatest java jdbc org postgresql test jdbc timestamptest java jdbc org postgresql test jdbc updateableresulttest java jdbc org postgresql util serialize java added files jdbc org postgresql pgconnection java jdbc org postgresql pgstatement java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc jdbc connection java jdbc org postgresql jdbc jdbc resultset java jdbc org postgresql jdbc jdbc statement java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc jdbc connection java jdbc org postgresql jdbc jdbc resultset java jdbc org postgresql jdbc jdbc statement java removed files jdbc org postgresql connection java jdbc org postgresql resultset java jdbc org postgresql statement java jdbc org postgresql jdbc connection java jdbc org postgresql jdbc resultset java jdbc org postgresql jdbc statement java jdbc org postgresql jdbc connection java jdbc org postgresql jdbc resultset java jdbc org postgresql jdbc statement java,rename
refactored the transactions package a whole lot ,pull up
commit first version of async removal of the index cache,inline
merged revisions via svnmerge from snapshot r redsolo on apr line added new files for ucm activity based change log r redsolo on apr line moved command lsactivity to cleartool r redsolo ti maj line move cleartool executable string into hudsoncleartoollauncher r redsolo ti maj line removed cleartool executable string away from cleartool implementations r redsolo ti maj lines applied path for ucmactivity and ucmhistorybuilder from henrik added outputformat and cleartoolformathandler to help with the clear tool formatting r redsolo to maj line clearcase plugin add ucm parsing of changelog xml patch from henrik r redsolo to maj line clearcase plugin add test for writing ucm changelog xml r redsolo to maj line clearcase plugin added changlogaction from henrik r redsolo to maj line clearcase plugin lshistory now returns reader instead of change logs r redsolo l√∂ maj line clearcase plugin finished importing ucm changes from henrik r redsolo s√∂ maj line clearcase plugin added patch to remove the view from ucm activity from henrik lynggaard r redsolo s√∂ maj line clearcase plugin more test files r redsolo s√∂ maj line clearcase plugin corrected tests for ucmchangelogaction r redsolo s√∂ maj line clearcase plugin fixed failing tests for lshistory ct command r redsolo m√• maj line clearcase plugin fixed change log parsing for base and ucm scms r redsolo m√• maj line clearcase plugin fixed compile error and tests r redsolo m√• maj line clearcase plugin applied patch to remove the view from ucm activity r redsolo m√• maj line clearcase plugin applied patch to add sub activities to change log r lynggaard on maj line dummy change to test developer access r lynggaard on maj line clearcase plugin branch ucm changelog page converted to activity based changelog r lynggaard on maj line clearcase plugin branch preparations for ucm tagging support need to expose the mkbl cleartool command r redsolo to maj line clearcase plugin made get methods in ucm ucmactivity exported r lynggaard to maj line clearcase plugin branch build extended changelog changelog since last not failed build r lynggaard to maj line clearcase plugin branch lsactivity needs the viewname r lynggaard fr maj line clearcase plugin branch if the user writes stream as part of the stream name then strip it r lynggaard fr maj line clearcase plugin branch extra unittest to locate issue r lynggaard fr maj line clearcase plugin branch cleartool is particular about parameter ordering r lynggaard l√∂ maj line clearcase plugin branch add tostring method for easy debug r lynggaard l√∂ maj line clearcase plugin branch improve ucm specific changelog issue r lynggaard l√∂ maj line clearcase plugin branch ensure changelog action is reset for extended changelog r lynggaard l√∂ maj line clearcase plugin branch improve ucm changelog provide stream and user for sub activities r lynggaard l√∂ maj line clearcase plugin branch remove seconds from ucm changelog r lynggaard s√∂ maj line clearcase plugin branch fix tokenize issue on branch also r lynggaard s√∂ maj line clearcase plugin branch improve ucm changelog page r lynggaard s√∂ maj line clearcase plugin branch minor change to regexp generation r lynggaard s√∂ maj line clearcase plugin branch new ucm fake cleartool setup r lynggaard s√∂ maj line clearcase plugin branch re enable edittype icons in ucm r lynggaard s√∂ maj line clearcase plugin branch lsactivity should be run from within the view r redsolo m√• maj line clearcase plugin move vob path handling out from lshistory into clearcasescm class fixed so load rules remove the and before they are used in the lshistory command r redsolo ti maj line clearcase plugin no need to quote the command line args as argumentlistbuilder already does it r redsolo ti maj line clearcase plugin fixed problem that was introduced in my refactoring for vob paths r redsolo ti maj line clearcase plugin added tests for getbranchnames r lynggaard on maj line clearcase plugin branch remove full username from changelog as we now rely on hudson users to display that r lynggaard on maj lines clearcase plugin branch defensive code to handle lshistory with empty activity names it appears that most version entries with empty activity names are version or mkbranch items this code is only there to catch it in case some real version has no activity however that should ideally never happen r lynggaard to maj line clearcase plugin branch add additional mkview documentation r lynggaard to maj line clearcase plugin branch small javadoc update r lynggaard to maj line clearcase plugin branch remove old extended changelog code as this is not the way we want to do it r redsolo to maj line clearcase plugin fixed so the changelog actions are adding the c comments to the lshistory format r redsolo to maj line clearacse plugin removed unused class git svn id c de d a be ed b c a,push down
added processingqueue made processingqueue process protected should not be called from outside the class added punch hole and close hole events serializing state requests at the state provider added hole punching to barrier correctly setting tcpping initial hosts in unit tests added support for get current view after a state transfer has completed called by the state requester jchannel getstate now throws an exception if there s a timeout added tests for blocked threads to barriertest punching hole for state requester provider handling exception on close barrier discarding messages when barrier is closed storing only last message re delivering those messages when barrier is closed not skipping blocked or waiting threads timeout on close barrier if threads cannot be flushed statetransfertest now tests all state transfer protocols fixed another bug in blockinginputstream also backported to barrier lets messages unicast or multicast with a skip barrier flag pass added skip barrier flag to message removed barrier closed this is handled by barrier directly,extract
do not retain mavenproject instances forever before this change mavenproject instances were eagerly loaded for each workspace maven project are were retained for as long as the projects were opened with this change mavenproject instances are loaded on as needed basis and discarded when they are not needed any more signed off by igor fedorenko,inline
move showmessagebox into uistarter change the inner class in aboutdialog to nonstatic so that it can access the ui instance variable move a number of imports from uiutils to uistarter as well now we no longer need to pass a reference to the shell to uiutils,move
changes based on keith s review a few tweaks to edgeset to help tracking edge removal modified src edu ucla sspace common similarity java updated to use vectormath dotproduct for the tanimoto coefficient deleted src edu ucla sspace common wordcomparator java moved to simplenearestneighborfinder modified src edu ucla sspace dependency simpledependencypath java removed println modified src edu ucla sspace graph abstractgraph java added missing implementation to subgraph class so now all the unit tests pass modified src edu ucla sspace graph directedmultigraph java added missing implementation to subgraph class so now all the unit tests pass fixed bug for reporting the correct edge types after removal removed dead code modified src edu ucla sspace graph edgeset java updated so that disconnect now returns the number of edges that were removed modified src edu ucla sspace graph genericedgeset java modified src edu ucla sspace graph sparsedirectededgeset java modified src edu ucla sspace graph sparsedirectedtypededgeset java modified src edu ucla sspace graph sparsetypededgeset java modified src edu ucla sspace graph sparseundirectededgeset java modified src edu ucla sspace graph sparseweightededgeset java updated to support edgeset interface change deleted src edu ucla sspace graph graphrandomizer java removed dead class functionality is in graphs java modified src edu ucla sspace graph simpleweightededge java fixed hashcode deleted src edu ucla sspace graph sparsesymmetricedgeset java removed dead class modified src edu ucla sspace graph undirectedmultigraph java added missing implementation to subgraph class so now all the unit tests pass fixed bug for reporting the correct edge types after removal removed dead code modified src edu ucla sspace mains fixeddurationtemporalrandomindexingmain java updated to replace wordcomparator with simplenearestneighborfinder modified src edu ucla sspace mains lexsubwordsimain java updated to replace wordcomparator with simplenearestneighborfinder modified src edu ucla sspace text labeledparsedstringdocument java updated for new parseddocument interface modified src edu ucla sspace text parseddocument java updated to specify the format of text as the tokens with white space delimiters added a new prettyprinttext which is the attempt to nicely format the tokens as they would have been originally modified src edu ucla sspace text pukwacdocumentiterator java fixed javadoc modified src edu ucla sspace text ukwacdocumentiterator java added more class javadoc modified src edu ucla sspace tools nearestneighborfindertool java updated to use the class instances instead of the interface modified src edu ucla sspace tools semanticspaceexplorer java updated to replace wordcomparator with partitioningnearestneighborfinder modified src edu ucla sspace tools similaritylistgenerator java updated to replace wordcomparator with partitioningnearestneighborfinder modified src edu ucla sspace util hashindexer java fixed javadoc modified src edu ucla sspace util paircounter java fixed javadoc renamed src edu ucla sspace util nearestneighborfinder java src edu ucla sspace util partitioningnearestneighborfinder java moved so that nearestneighborfinder can be an interface modified src edu ucla sspace util reflectionutil java removed dead code modified src edu ucla sspace util primitive intinthashmultimap java added javadoc modified src edu ucla sspace util primitive intintmultimap java added javadoc modified test edu ucla sspace graph directedmultigraphtests java uncommented out unit tests modified test edu ucla sspace dependency breadthfirstpathiteratortest java modified test edu ucla sspace dependency conlldependencyextractortest java modified test edu ucla sspace dependency wackydependencyextractortest java modified test edu ucla sspace text corpora pukwacdependencycorpusreadertest java modified test edu ucla sspace wordsi dependencycontextextractortest java modified test edu ucla sspace wordsi occurrencedependencycontextgeneratortest java modified test edu ucla sspace wordsi orderingdependencycontextgeneratortest java modified test edu ucla sspace wordsi partofspeechdependencycontextgeneratortest java modified test edu ucla sspace wordsi psd pseudoworddependencycontextextractortest java modified test edu ucla sspace wordsi semeval semevaldependencycontextextractortest java fixed unit tests to support proper tab delimiting of the conll format,move
dividends trrdiv renamed to totalrateofreturndiv fixed wrong calculation of mean number of shares debugstop moved to class helper,rename
moved most of the common render stuff to the render,pull up
added list of experimental designs to the idf views,pull up
display in view columns and tables from the query in the view display columns and table ectract from the query add an sql parser model modifications move columns reference from abstracttable to table add new class viewelement in view add references columns and tables,push down
rename requestfactoryparser to requestfactory builder it s not perfectly a builder but it fits the pattern of embedding the builder or factory within a type also rename response issuccess to response issuccessful also rename requestaction to parameteraction these are only used for request parameters also move all utility methods into the same class utils java,move
extract method,extract
polish logs and move tests into dedicated classes,move
getrequestparametermap moved from formvalidationservice to webutilsservice,move
ongoing refactoring,extract
shruthi moved adherence computation for treatmentcard to adherencesection,move
refactored methods from celementswebpluginapi to imagescriptservice public boolean useimageanimations refactored methods from celementswebpluginapi to celementswebscriptservice public void checkclasses public string getdefaultspace public boolean iscelementsrights string fullname public map getobjstoreoptionsmap string options public com xpn xwiki api object newobjectforformstorage document storagedoc string classname fixed celementswebscriptservicetest because of methods move,move
wcet refactor supergraph,push down
small effort to further reduce the amount of fiddly saxon dependent code,push down
ngrinder clean the thread rampup code,push down
renamed stack pop type and stack push type to avoid confusion with stack pop and stack pop added corewriter method to javacodewriter this method provides access to the underlying javacorecodewriter this functionality is needed by the repl,rename
using generics on interface bulkexecutor and renamed classes and variables to be consistent with usage,rename
improve documentation explaining why decoding is being done when and where it is refactor individual logic blocks fetching the erattachment evaluating if a request is legitimate into their own methods to make code more digestible and better encapsulated,extract
merged pull request with a few changes,inline
assigned bug simplify generalize discovery api summary bug ,inline
updated already existing entity base classes to incorporate latest api changes refactored mysql db stuff again todo move to api added canaryplayer todo implement added canaryplayer handling to oplayermp fixed getplayer in canaryentityliving,push down
refactor to allow a method to be added to the service to show a plot dialog,pull up
oozie refactor classes from launcher jar into oozie sharelib rkanter git svn id f bb ffa edef ,move
enable better guice error messages for a missing binding created by moe moe migrated revid ,extract
make mongosplitter an abstract class move splitter implementations into subclasses,push down
inline storage block size at a few places,inline
adding classes for creating the conjunction or disjunction of two queries testcase because of this change queryresult into an interface make use of the binaryprefixcomparator to enable all tests to run though this relies on patching hbase with hbase just for once i m taking the liberty to commit this anyway since i m the only one working on this git svn id svn ssh dev outerthought org outerthought lilyproject projects lily trunk b d f e bd e a dc ,push down
refactor signing encryption for jwt wip,inline
grab new analyzeskeleton from fiji and move all skeleton related code into org doube skeleton,inline
observer observable pattern for ui view interfaces moveable and moveablecontainer refactoring mega commit due to problems with remote branching,move
rename tarutils getxxx methods as formatxxx update javadoc throw illegalargumentexception if value won t fit in buffer treat long values as unsigned use string instead of stringbuffer for names etc git svn id f bb ffa edef ,rename
general java refactoring test improvements,pull up
added general info fields,extract
commiting the code of v new features custom commands now use my parser added entity data e g one can now use angry wolves powered creepers different villagers etc added a skript reload command to reload the main config and all scripts added expressions last spawned entity and line of whereas the latter can currently only be read and cleared but not set changes trigger files are now called scripts end in sk and are located in the scripts folder the main config also now ends in sk variables are now stored in a csv file merged right and leftclick into one event such that one can now use on click on the entity player etc cannot be used in damage events anymore one has to use attacker or victim respectively several changes in the api e g removed loopexpr all expressions can now be looped block loops now loop from bottom to top and not from left to right whatever left or right is argument can now also be accessed as argument or argument e g arg player or player argument targeted block is now stored during an event resulting in faster execution and no unexpected results when changing any blocks in the player s los the current targeted block can still be accessed with future targeted block or targeted block will be will not be etc fixes fixed checkediterator and blocksphereiterator and aabb for that matter skript now throws an error if it is reloaded by some plugin manager that doesn t reload the plugin like craftbukkit does fixed inventory handling e g can hold does not change the inventory anymore improved the handling of items that have multiple ids e g cauldron block item or redstone torch on off the parser doesn t exit anymore if an expression s init method printed an error allowing for more complex patterns fixed expressions and state most expressions don t even have it and others inherit it from others fixed furnace slots fixed clickint on air not being checked for being cancelled by other plugins correctly fixed clicking on an entity causing click events one for the entity and one for air fixed ambiguity of variables that have expressions in their name fixed not being able to heal or damage an entity by hearts fixed the expression of conflicting with itemtype s of and many other small fixes drafts added drafts for unit testing known issues the default location of many block events is at an entity and vice versa i know the cause but not how to fix this tidily the damage in damage events is still the raw damage i e without any armour critical enchantment modifidicators applied,pull up
rename project package fullbuild to batchbuild git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,rename
revise simple mapreduce engine moves some sandbox projects to core package,inline
fredsa had some cleanup advice for the unpack goal in bug ,extract
working on moved the layer creation from the activelayermodel to a new cidslayerfactory to allow recursive definition in the new modelayer,move
simplified bitmixer utilities a bit corrected a nasty bug with missing mix long which caused autoboxing to be triggered,inline
renamed deletemappings to removemappings and their static equivalents for consistency,rename
qualifiedname s are now also marked as generated during astconverter phase just like simplename s this fixes rename when inner types are used for both the main type and the inner type,rename
vishal abhi moved container registration details fields to inner object in container,move
refactored to pull error log into its own class,pull up
clearcase plugin moved the change log entry creation into the factory git svn id c de d a be ed b c a,move
fix for tfj user element is out of sync fix for tfj userwithstatus element is out of sync introducing extendeduser deprecating userwithstatus to make the class name consistent with the api doc extendeduserinformationelement git svn id b e d d ab bb d b,push down
tokenperpageprecreate for creating tokens in advance fixed npe and trim issues with protected methods property parsing tokenperpageprecreate allows use of per page token on first access rather then using session token on first access it only works in conjunction with jstl tags and is designed mainly for better back button support default value is false off,extract
renamed responsetime to time,rename
cleanup on snapshot api,push down
 refactor code and fix copyright notices,inline
merge from site refactor refactoring branch r git svn id f bb ffa edef ,pull up
moved and renamed keyaction to vimshortcutkeyaction,rename
reconfigure and enhance async configuration this commit adds a new async utility method that can execute a method that returns a result in the form of a java future object rename asyncrunner to asyncutils add asyncutils method get that asynchronously excecutes a supplier functional interface and returns a completablefuture that can retrieve the result move threadpool executor and scheduling configuration from web app config to app config remove unique threadpool for async event bus replacing it with async threadpool excecutor,move
import tool allow inline field declarationsextend the json import format to allow declaring field types embedded in record types thus it is no longer to require to declare field types up front in the fieldtypes section an inline field type declaration is recognized by the prescence of the valuetype attribute record type import now happens in two passes first inline field type declarations are extracted and checked for conflicts between record types and imported and then the record types themselves are imported,extract
added navigation links to resource calls that don t contain selectors updated tests to look for navigation links refactored tests so springmvc and resteasy demos use delegate to parent package ensuring consistency between tests,pull up
refactored operations to improve correctness of vbucket aware ops previously we had operations that implemented classes that they should not have been implemented for example there were ascii operations that implementing the vbucketaware interface since ascii operations must go through moxi and don t contain vbucket numbers there is no reason for them to implement this interface this commit also contains the addition of singlekeyoperationimpl and multikeyoperationimpl which subclass operationimpl and are superclasses to binary operations that contain one or more keys correspondingly this abstraction allows these type of operations to deal with vbucket awareness and the amount of keys the operation contains in different ways change id ic d ec e e fccc fcb cba ca da reviewed on reviewed by michael wiederhold tested by michael wiederhold,pull up
qcadoomes changes to decimal parser validation introduced cell binders registry code rafactor added simple support for import errors,push down
cleaned up cwbr code,inline
node analyze can now replace the current ast node this is needed for cases where the parser does not know better and creates the wrong type of ast nodes this submit looks much bigger than it is because almost every class implements node adding the replacement node as a return value of analyze touched many classes but the changes are minimal in most cases this is returned i e the node is not replaced the first and so far only example of actually replacing the node is a qualifiedide that is mistaken for a dotexpr since they cannot be distinguished syntactically only after parsing the imports the compiler can detect that a dotexpr is indeed a qualifiedide transforming the ast has to keep all symbols including their white space it then makes it easier to analyze other expressions e g to detect non invoking access to static members of other classes which have to be initialized before accessing the member warning i was too lazy to always reassign child nodes with the result of node analyze because i know that currently only dotexprs may be replaced this is a todo because it may lead to surprises in case the same technique is used for other nodes in the future git p depot paths coremedia jangaroo change ,inline
common moved inner classes stuff into own class some more docs code to rebuild innerclasses attribute,move
added instant submission feedback written in db,extract
significantly restructured the shader package to make it easier to understand and extend,pull up
fix shadow volume rendering with multiple debug views fix shadow map rendering allow shadow map and shadow volumes simultaneously,push down
java changed rconsocket getreply to accept split response packets added rcon tests for long responses e g cvarlist fixed detection and decompression of bzip compressed packets moved receivepacket from querysocket to steamsocket,pull up
more membase to couchbase refactoring changes changed some more occurences affects javadocs and log messages also added renamed vbucketcouchbaseclienttest java which i missed change id i ec dd ac cb bed e a ac reviewed on reviewed by michael wiederhold tested by raghavan n srinivas,rename
use localdatetime instead of localdate for transactions updated some ui elements to support localdatetime instead of localdate adapted tests line endings updated onvista consorsbank extractors removed warnings etc adapted consorsbank parser to use date time for transactions when available issue signed off by andreas koch squashed commits reverted some changes to api signed off by andreas buchen,push down
multiple modules added refactoring,inline
implemented sticky options for pm implemented sticky options for pm it allows to have options stick for pm when used across different thread previous implementation used threadlocal so options were valid only in the thread scope the new implementation gives control when setting options to make them sticky global scope or not thread scope refactored unit test to centralize the aws property file,extract
remove compartment from activity move executors for di tools dctool more to come to new package andrestructure extract base executor class move differences between nwversions into templates instead of classes,extract
refactor splunkinputformat splunkoutputformat splunkeventsinputformat to use new mapreduce api add equivalent integration tests splunkinputformattest splunkoutputformattest splunkeventsinputformattest for these classes,move
add tests and implement time limitations,extract
renamed deserialize method,rename
adds the reportdata and reportclient projects the reportclient is the client for durareport similar to storeclient for durastore it includes an example client as well the reportdata project contains the java beans and serializers which are used by both durareport and the reportclient to handle the report metrics information renames the data collection classes in durareport to indicate their use in data collection as opposed to the new data storage classes in reportdata note if you have existing storage reports in your primary provider in x duracloud admin you will need to clear those out for durareport to work properly git svn id ed cd a f c be b fe bcb,rename
fix transcripts starting with inaccurate lines refactored pdf generation refs ,extract
moved tokeystrokes to vimtestcase,pull up
shruthi moved tbregistrationnumber from treatment to proviedtreatment,inline
refactored cov capture command to its own class from coveritytoolhandler,pull up
interface segregation write methods moved from iususmodel to iususmodelwriteaccess next step restrict visibility of write access interface,move
rename method tobinarystream to toinputstream,rename
rhbz rhbz squashed commit for zanata init command client pull commit ab cefde b a cc ecd e b df author patrick huang date thu aug rhbz handle not exist src dir commit dea e c d bd c db a d e eea author patrick huang date thu aug rhbz check server is compatible to init command commit fe f e c c f f author patrick huang date tue aug messages change commit b a bd c fc b a a d b c d a e author patrick huang date tue aug change message template to match prompt commit dd bc a c a author patrick huang date tue aug fix exception type and tests commit cc b d c e fc b c c ff e author patrick huang date tue jul change copyright year and a few messages commit ec adde e dbec d aa f c d author patrick huang date tue jul improve message commit f bd ab f d e de fee cbd author patrick huang date tue jul remove unique from project id prompt commit b d cbddc dbc e f d a a cbf f author patrick huang date tue jul rhbz handle when there is no server url in user config commit cec f a a ff ba bb a a d f e author patrick huang date tue jul refactoring commit c f f d fa df a d d author patrick huang date tue jul rhbz rename method and static import commit f e f d fb de dd bdc f a ebc b d c author patrick huang date tue jul rhbz refactoring commit e ad fa e a b b b a author patrick huang date mon jul rhbz extract methods in userconfighandler commit baa eab dc d ebbf db author patrick huang date mon jul rhbz refactor project source and trans prompt commit cdf efc baeac c d d d author patrick huang date mon jul add copyright to files commit d ed d ab bca baa da c bf author patrick huang date mon jul rhbz extract methods in projectconfighandler commit a ddda afaee f e a ea author patrick huang date mon jul rhbz extract methods in initcommand commit c dbf b ef ab b d c c cc author patrick huang date mon jul remove updatechecker from production code pending story and rfe commit fa af e a ad bd ccbf c b a c f b author patrick huang date mon jul rhbz missing resource key will log an error commit e a f f f f f ec author patrick huang date mon jul rhbz rename methods in optionmismatchchecker commit c ebebd bc deb b ee author patrick huang date mon jul rhbz rename class mode to displaymode commit ac cb bff c c b be f e c author patrick huang date mon jul rhbz rename class commit bb c bfc f da df bae cb author patrick huang date mon jul rhbz refactor initcommand extract method etc commit a f f e e cb f e eb e a ef author patrick huang date mon jul rhbz refactor class that expects user input commit db a f dcb e de b e d ade a author patrick huang date thu jul rhbz add color output and change some messages commit f c a f fc c b ee author patrick huang date wed jul rhbz able to filter project in long list commit a fa fee a e b acd aa d f author patrick huang date fri jul rhbz check key availability in resource bundle commit a a ffe b de author patrick huang date wed jul rhbz check if there is newer version of client available commit fe e a e cb fc e fa cf b c daf author patrick huang date thu jul rhbz externalize strings to properties file commit e a e b ebfebc e b a eb d author patrick huang date tue jul rhbz add init to zanataclient commit c c d b c b fa b c add dcc f author patrick huang date tue jul rhbz fix minor issues and print what s next suggestion to user commit e a f f b f cba f f author patrick huang date tue jul rhbz refactor and clean up code commit f f d c ced b d a author patrick huang date tue jul rhbz refactor to extract project and version prompt to separate classes commit caf c f b a e ff d bdf ce author patrick huang date tue jul rhbz refactor extract project config handling to separate class commit d f be a b f eb ed c f fede edc author patrick huang date mon jun rhbz refactor extract to separate class commit f d f d dc e cca author patrick huang date mon jun rhbz refactor test and mock server commit c d b a d ec e fc bdc author patrick huang date fri jun rhbz add init mojo as maven goal commit f cc b ef f ba c ded c c author patrick huang date fri jun rhbz prompt user for trans dir commit a a a a c da d c e author patrick huang date fri jun rhbz use index number to select project and version commit cb b dfc baf d d e b ae dc author patrick huang date fri jun rhbz src dir includes and excludes prompt commit f e a cb e f ff a ac c fd author patrick huang date fri jun rhbz refactor zanataproxyfactory to allow not eager rest version call commit ec dd f e ddbc f c author patrick huang date thu jun rhbz add includes and excludes to zanata config commit c a da cc d a ec c b author patrick huang date thu jun rhbz pull up includes and excludes to project configuration commit d a b bd b b b ca a a a author patrick huang date thu jun rhbz rhbz add src dir and trans dir to zanata config commit e ef e b a c a f ac author patrick huang date thu jun check for potential wrong src dir in podir project commit e a d a edeb f a d be d cff author patrick huang date mon jun rhbz create init command commit c ebac da fd fc f c bbecdc e author patrick huang date wed jun add friendlier message to inform user server is not up,extract
refactor tvanytimegenerator to generate a tva element removing the serialization component from this class,move
add jongo class and remove query to json responsability from processor,inline
sc qcadoo prioritization and data access refactoring,inline
merged duplicate solver and abstract solver class our repo moving git merging screwed up the renaming some commits earlier,move
implemented insert menu command implemented more of the popup menu replaced prefs protectroot with prefs renamableroots resourcelist added the duplicate function back in made the function set handle removal of listeners and reassignment of refs added indexof function made replace delegate to set listener implemented insertresource implemented the rest of the popup menu commands added alternate versions of addresource and insertresource for use with strings and constants defined in resource stringtores now returns for group added a putnode method to handle common functionality like adding the node expanding the tree and selecting the node prefs replaced protectroot with renamableroots since allowing moving and deleting of root nodes can corrupt the file resourceframe added abstract method commitchanges removed abstract modifier from updateresource and implemented it removed implementations of updateresource from subclasses except where additional actions were taken git svn id f f bc e be cd ,pull up
intercept part input change event in some cases when close editors automatically is enabled for ex eclipse can substitute the underlying editor of an already opened part handle this case by resetting the references associated with the part,inline
renamed a few of the links methods so that things are more consistent,rename
vandana sharvani all the change pack logic is now moved to changepackprocessor,move
her make extractors interrogate for charset replaycharsequence genericreplaycharsequenceuse charset instance rather than string name recorderuse charset instance ratehr than string name getcontentreplaycharsequence avoid reusing cached replaycharsequence when encoding in use has changed since it was created getcontentreplayprefixstring allow requested specific charset interpretation extractorhtml extractorxmlwork with charset instancesdouble check that in content declarations are self consistent before usingrecycle matcher instanceschange minor charset problems decisions to a crawl log annotation,extract
nearing end of another major refactor,pull up
some cleanup moved a method back to transcoderservice as it really belongs to this service added missing javadoc,move
added some additional javadoc on the usage added methods that can return any other default value than zero when parsing fails bumped version to ,extract
scj cleanup in rtsj classes,push down
trigger reconciliation consistently rename test to testreconciliation,rename
modules move jaxp redirection to jdkspecific,move
updates based on code review added a comment why we look at the class loader of object renamed internal method name to reflect it s new behavior signed off by paulo lopes,rename
cleaned up the area system,push down
refactored code to support separate managers for sauce connect and ,push down
added new commands skript reload all config scripts and skript enable disable all added enchantment support added condition is enchanted entities can now be deleted added effect push to push entities around added expressions name of and display name of latter of which can be changed added expression message which holds the message in chat events and which can be changed added loops loop times and loop numbers from to added booleans as available command arguments and it now recognizes on off as well readded the physics event improved detecting of empty configuration section improved the drop experience effect to accept expressions as experience as well fixed delays not working in conditionals loops at all fixed the damage and kill effects not damaging the entity but setting its health fixed the health expression returning negative values if the entity is dead fixed inventory of not working fixed errors when parsing large numbers fixed the teleport event and allowed different timestates for the world expression fixed there s no null in this event messages fixed the expression fuel slot of conflicting with the default alias fuel fixed furnace slots again fixed a few possible issues,push down
test add unit test for dswdatasourceserviceimpl,extract
refactored infinispan cache wrapper hieararchy all wrappers should from now on keep linear hierarchy according to infinispan versions one wrapper per plugin each feature should be implemented by separate object wrapper and feature can be enriched separately code from the core wrapper moved to lifecycle and basicoperations these are not features wrapper should only hold the caches and orchestrate features infinispanwrapper now can work as multi cache wrapper as well see stresstest usebuckets,move
frame parameters tests set up changed buffer refactored a bit removed my notimplementedexception,move
oozie remove some duplicated code in fsactionexecutor rkanter via tucu git svn id f bb ffa edef ,inline
add isportalinterior hide interior materials,extract
renamed module about to team,rename
adds license and javadoc to the matrix factorizations includes wrappers around the matlab and octave implementations abstracts some common svd functionality to a base class unit tests nmf and svd reduction methods make some helper functions public,pull up
refactor symbol table from pmd symboltable into pmd lang java symboltable as symbol table is currently java only removed bogus jsp symbol table git svn id baf d a c fc e d,push down
canvas mouse canvas position moved in base icycanvas class d mouse image position moved in icycanvas d class icytextfield removed the consumecharkeypressevent property icyframe added getinputmap and getactionmap methods roi general performance improvement on draw and mouse events removed useless mouse position information fixed shift combination shortcuts accidently enabled on text fields better headless support fixed wrong null sequence report limited maximum memory to mb for bits jvm to reduce the cannot create native thread error minors others fixes,move
wip of law builder refactor,push down
facebookclient move adding app token and possible appsecret proof into its own method add optional computation of hash pom xml add explicit dependency on commons codec so we can hex encode the hash which is a byte array,extract
implemented shift and lock and cleaned up from last commits removed commented updateinstance code refer to r or r if needed extracted different mouse parts to methods removed extra repaint call in mouseedit removed wip text from object tab downgraded cursorinstance to instancecomponent cursoric swapped id and object in roomframe status bar opposite of gm but more logical this way removed edit mode editinstancesobject editinstancesdeleteunderlying too hard to keep up to date just used swing directly added fixme tag for object tab i ll probably take this up git svn id f f bc e be cd ,extract
added unit tests for bfsdistancelimited and gridindex additionally moved stubs for locatable to stubs package and added stub for locatable small code and documentation changes for bfs and spatialindex code should not have any external impact,pull up
reworked extension mechanism renamed moved some specs moved configuraiton of spock maven plugin into master pom,rename
jvstm lf create remotewriteset and deal with remote commits several fixes todo reload body only,push down
hv rename getpayload to getconstraintvalidatorpayload,rename
improved debugging of ast moved self type self method up to ast node cleanup,move
code review of websocket feature change notes removed obviously unused faulty code renamed clarified connection names recovered async event handling review notes change introduces a componentupdate isprocessed feature i still have no clue how this relates to the websocket feature in general also change introduce the case handling for components without a peer at all not sure how this case is relevant because all components are required to have an peer applicationinstance handles concurrent disposal this case should not be possible at all component introduces a lastrenderid same here mysterious use case,rename
simplify extraction of proposals by including isbasedoninput property of proposal sets as input for priority level,extract
removed unused method reduced duplicated code by adding loadaaacproblem string method which now handles loading all problems rather than methods that were identical save one character git svn id bcaee e b e be a d c f fc ,extract
factor out more netty configuration specifics into the config builders this change mainly adds control over number of boss and worker threads for the netty channel factories used by the netty client and server thread pools it also renames nettyconfigbuilder to nettyserverconfigbuilder to contrast with nettyclientconfigbuilder and turns the config builders into actual builders they were just used directly before,inline
first cut of caching perf work on candidate svc integrated outputstreamer idea for showing source files source file streams now include length better content types moved package related code from serviceutilities to new assessmentpackagefileservice cp import modified to handle qti vs safe files better,move
sc esilco added damaged products report,extract
fixed class names for changes in celements search,inline
fixed typed properties for relationships added tests,extract
create unit test leavetest replaced base conversion via javax xml bind with base methods moved gmsimpl leaving and gmsserverimpl leave promise to gms added setxmitinterval to unicast fixed ccme in fd sock changed suspected mbrs to concurrent set added single test target to build xml removed bind addr from viewdemo and draw removed setting of system properties external port and bind addr in tests changed log formatting of message exchanges in nakack changed log formatting of message exchanges in unicast ,pull up
fixed naming issues for switchyard ,push down
add support for remove conf redirectrdfrequeststoendpoint as it is no longer clear which one onf multiple data sources would be the target move conf webresourceprefix from dataset level to server level as we need to have the same relationship between entity uri page url data url etc for all datasets some work towards separating the concerns of mappedresource between source to web uri mapping and the structure of related uris on the web side fix some minor issues with namespace declarations,move
renamed restoremetaclass to revertmetaclass,rename
minor refactoring to further strip down api of tokenstreamfactory,push down
updating documenthelper to remove redundant and streamlone methods,inline
remove redundant worker setorderedpriorityqueues list and other minor documentation and cleanup,inline
add a retrieve signature with params to all resources,extract
add ability to load default xml config file with overrides,extract
 remove jetty xml and add host to solandra properties,inline
moved mark profile picture set logic into profile picture service,inline
o renamed addtag appendtag,rename
dev dheeru renamed resources to activate provider theme as these resources are non reusable for reset password,rename
made io compatible with lambdas moved methods to iofunctions,move
add snapshotacceptancetest mostly with tests moved from snapshottasktest these tests ended up uncovering a few bugs which i ve fixed,move
removing inheritance between simplereducer and simplecombiner it simplify the code,inline
border radius implementation heres is full border radius support known issues that should be patched prior to a release are as follows set px value under shorthand border radius is not computed correctly declarations around the cssname border radius should be cleaned up and re organized to be more logical and return consistant types to the borderradiuscorner class borderradius sides are not automatically fixed when the total radius of one side excedes its width height this will need to be completed after the css parsing issues have been resolved you can observe this by setting border radius they should be normailzed to because side cannot have over note i did most my testing using itext additional testing should be done with swing and itext ,inline
enhancements to how queries with bind values are stored internally and sent to the server previously we allocated a new string object for the entire final query we were sending to the database if you had a big query or especially if you had large bind values you ended up with essentially two copies in memory this change will reuse the existing objects and therefore should take the memory it does today for a given query this restructuring will also allow in the future the ability to stream bytea data to the server instead of the current approach of pulling it all into memory i also fixed a test that was failing on a database also renamed some internal variables and some minor cleanup modified files jdbc org postgresql core queryexecutor java jdbc org postgresql jdbc abstractjdbc connection java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql jdbc abstractjdbc resultset java jdbc org postgresql jdbc abstractjdbc statement java jdbc org postgresql test jdbc databasemetadatatest java,inline
refactor downsampler to avoid the mutabledatapoint class and reduce methodcalls signed off by chris larsen,inline
her expand beanshellprocessor beanshelldeciderule for every jvm friendly scripting language javascript jython groovy jruby beanshellprocessor java scriptedprocessor java beanshelldeciderule java scripteddeciderule java update to use any present jsr scripting engine requested by free text name update to allow script to come from inline string or file just as with seeds modules pom xml include groovy and jsr capable jars classpath add new jars to classpath beanshellprocessortest java scriptedprocessortest java rename empty test class,rename
remove obsolete methods,inline
some refactoring to enable testing,extract
removed the enum and moved to a different way may need to evolve this more but it seems to be ok for now,move
move the custom utf decoder into a subclass of encoding add support to the utf decoder for unicode code points above u ffff represented as a surrogate pair in java these values can be generated by the backend from the reverse path is already handled by the jvm s own utf encoder add a number of unicode encode decode tests to make sure it s all working,push down
remove unused timeout variants of sdktestcase splunkrestart,inline
sonar clean up,pull up
revert backlog changes utilhtmlsanitizer function params and moves name sanitization from connectionservice to connectionserviceimpl,inline
exojcr move dbinitalizer and dbcleaner common code into separated class,move
simplify imatrix hierarchy,inline
bval rename constraint related classes to make them more readable check the spec applied to the ri as well git svn id b cb b d ca fae ebed b ,rename
refactoring move field reflabels from mapobject to polyline the field is only used in polyline so we waste its memory in class point there is also no need for a public getter now git svn id d f ee a dfeeeb ,push down
features now stored via feature ids and vocabulary somewhat cleaned up feature name label system,push down
ssl code refactored git svn id f bb ffa edef ,inline
added write lock to remove and read locks to the iterator methods added first tests for concurrency,pull up
tynstep resolve fix chapter lookups which required a bit more refactoring,inline
moved v and s and associated methods into base class,pull up
something is broken but i need to take a break hg branch idea rename src kahluainterpreterwindowfactory java src kahlua kahluainterpreterwindowfactory java rename src kahluainterpreter java src kahlua kahluainterpreter java rename src lang inferenceable java src lang inferencecapable java rename src run kahluacommandlinestate java src run kahlua kahluacommandlinestate java rename src run kahluaexecutionresult java src run kahlua kahluaexecutionresult java rename src run kahluaprocesshandler java src run kahlua kahluaprocesshandler java rename src sdk kahluasdk java src sdk luajsdk java,rename
minor rename,rename
contentextractortestbase javacreaterecorder string string new method for creating test recorder and specifying charsetcreaterecorder string deprecate use default charset as before,extract
application entirely reworked the sequence image operation band new sequence resize feature new c z t operations new color conversion feature general improvements better plugin error report better colormap preservation when switching from d to d canvas better icy to imagej roi conversion minors improvements here and there modified roi dpoint so it now intersects point and do not contains it more consistent with other roi fixed a minor bug in roi getbooleanmask method fixed a minor bug in roi d contains and roi d intersects methods others bugs fixes developer loader added methods to hide the progress bar added getmetadata file file method to retrieve the metadata of an image file added loadimage file file int z int t method to load a single image from multi image file added icybufferedimage copydata src int srcchannel int dstchannel to only copy data for a specified channel added exceltable component to display excel type table added abstract method getviewcomponent to icycanvas so we can always retrieve the display component in a canvas improvements on sequencepreviewpanel and sequencerangepreviewpanel components added icybufferedimageutil class general icybufferedimage tools added methods to sequenceutil class fixed cursor preservation on canvas d added maininterface getsequences string name to retrieve sequence by name fixed a bug in imagedataiterator added a command line option to remove splash screen lot of refactoring and source reorganisation check deprecations,extract
add proxy pac support,extract
backlog changes utilhtmlsanitizer function params and moves name sanitization from connectionservice to connectionserviceimpl,move
renamed methods to make sitestagemojo and sitestagedeploymojo as similar as possible git svn id f bb ffa edef ,rename
changelog updated for fileaide added to assist in common file tasks demopsmerge diff csvtordf smush sparqltranslator xsltranslator csvtojdbc databaseclone initlog xpathtool arglist jenaconnect recordhandler textfilerecordhandler recordhandlertest removed vfs use for fileaide nlmjournalfetch pubmed webhelper webaide normdamlevdist normtypodiff mathhelper mathaide match pubmedscore score glozetranslator runbibutils sparqltranslator sanitizemodsxml xsltranslator merge no longer requires config files match glozetranslator sparqltranslator runbibutils xsltranslator merge constructor cleanup score lowered info message for no temp model to debug transfer lowered warn message on no output to debug check for valid output changed and added remove from nothing check glozetranslator sparqltranslator updated to modern input output with overrides databaseclone uses streams rather than fileobjects now jenaconnect recordhandler jenaconnecttest removed file and fileobject constructors use string path constructor textfilerecordhandler uses stream closing rather than fileobject closing,inline
refactored and improved loading of inventories and item schemata see koraktor steam condenser ,move
finalize add attribute filter to control which session attributes are serialized to memcached main implementation was provided by rainer jung this commit adds tests the filtered map now also is a concurrenthashmap as attributes in standardsession slight formatting changes added warning when sessionattributesfilter is specified with non sticky sessions,inline
the declaration of types too can move up,pull up
push all references to urls that result in a network access into a jconfig factory method so i can intercept it and replace urls at will this will allow for testing,push down
update version snapshot commit dde b f d d f d aa d d a author toshiki takeuchi date fri mar add cmykcolor class add enum classes for texture commit afbef c fc da aa af d author toshiki takeuchi date fri mar integrate mousewheelevent with mouseevent commit aab d d f fab b f f ec author toshiki takeuchi date thu mar fix a bug of sql modify arraylist of graphicsobject to copyonwritearraylist commit c a cbf a c e d fb d author toshiki takeuchi date tue mar update pom xml to use latest openni and nite commit ace d f d a df a dc c cc author toshiki takeuchi date tue mar modify trackball commit ab ddfdd e de e fe cbc a f f author toshiki takeuchi date fri mar add mouse class commit a d bf af b beadd f d a author toshiki takeuchi date thu mar fix a reshape bug commit afe e e e b a de d db f e author toshiki takeuchi date sat mar add reset method to trackball class refactoring applet and cursormode classes commit bfbab ddc c ffa cfaf a dda e author toshiki takeuchi date sat mar add trackball class commit e c d fadf df dcadd f a db c d author toshiki takeuchi date fri mar fix box class commit fe dbb ef c ef b da c d edaa merge ed df author yuki ban date wed mar merge branch dev of github com casmi casmi into dev commit f fb e ce c e cff cef author yuki ban date wed mar modified timeline class commit ed df f a ec ced de d ca cb cf author toshiki takeuchi date tue mar remove warnings of cpopup commit d c afd f ce fed ac b b author toshiki takeuchi date fri mar add license and javadoc comments commit fec a adf eac b fba c b author yuki ban date fri mar modified selection buffer commit cf da cd f dc f f f abdc e author xcoodev date sat feb add synchronized block in rendering commit b aa d ca f aad merge df d ba author xcoodev date sat feb merge branch dev of github xcoo casmi casmi into dev commit df d d a bced e b a c de c author xcoodev date sat feb add function to show a alert dialog box commit ba ab e b ed ce cb d b e eb author toshiki takeuchi date sat feb refactoring some classes commit e a c efc e b abb ebb ef e a b author xcoodev date sat feb fix bug in polygon class commit c f f c fd b c a author toshiki takeuchi date sat feb add graycolor class commit f a fda cffb bce bbd dd a author xcoodev date sat feb fix bug in line class commit f c ab a e fd d c author yuki ban date wed feb add mouse wheel event commit e b a bc f ff f c f defef author shigeodayo date fri feb add cpopupmenu add cpopupmenu easy to create popup menu commit ce bf f a dc da cfd e author toshiki takeuchi date fri feb fix bugs about primary key and short long type commit c fe a f aa a ff af f c author toshiki takeuchi date tue feb divide color class to three classes color interface rgbcolor class hsbcolor class remove colormode refactoring many sources commit f e cd d e e ca c author xcoodev date thu feb fixed version reference in readme commit de bf f c e ca caf author toshiki takeuchi date sat feb update version to snapshot commit b ef cc aec e c author toshiki takeuchi date sat feb rename roundrect java to roundrect java add maven compiler plugin version to pom xml commit b e ae be e de a author yuki ban date sat feb add repeat function to tweengroup commit c df bbf a c c ce fffe b f e author toshiki takeuchi date sat feb add a repository icon,rename
new branch refactoring the interfaces to support jlems,pull up
hv moving shared code up to cascadableconstraintmappingcontextimplbase,move
sc view definition refactoring,push down
faces develop alloy panelgroup component extend generated base class for consistency,pull up
hv pushing logic for appending path nodes to specific sub types of constraintlocation,push down
refactor botrunnable for more seperation of our and pircbot code,inline
refactoring for fix ,push down
clean up,pull up
 more method extraction the body forcaching execute now at least fits on one screen git svn id f bb ffa edef ,extract
nick o interim commit for thundr v abstracted requests introduced aop for annotation based processing of instances created by the injection context general clean up and refactor,push down
nexus moved param creation to proper place as the rc goals lost many of them like polling related stuff,move
fixed issue testname junit rule doesn t respect unrolled method names added properties reportiterations and iterationnameprovider to featureinfo all iterationinfo s now have a name and description moved all unroll logic into an extension changed methodrule and testrule integration to respect iteration name,inline
refactored two text string related utility classes into one,move
fixed ,push down
rename nabla in div,rename
improve readability rename gettype getgtype no functional change git svn id d f ee a dfeeeb ,rename
refactoring of tabrisui api,pull up
clean up clipping code etc reduce copypasta code in plotcontent code,pull up
refactor rename method,rename
removed getcfmlengineimpl method from configweb,push down
extracting class naming generator,extract
moved handling of function equality to functionnode to simplify functions writing,pull up
warning eliminations hazard model generations removing aml,inline
latest wi implementation update from gagnavarslan support all characters in file folder names include url encoded characters move digest auth directory and other wi related configuration into nuxeo platform wi backend module bug fixes etc,pull up
extract method,extract
refactor jwtprofile and oidcprofile ,push down
refactor calculated subjects to be more useful added a subjectdatareference to handle some of the logic of a reference to a changing immutable subject data object and updated code to use this transient and persistent data references are now also exposed through the calculated subject the calculated subject also provides debug output for high level queries made to it implementations that customize permissions lookup in some way i m looking at you spigot still need to do their own lookup unfortunately there s no way to get a subject s name rather than identifier so players will only be shown by uuid in debug output,move
her make default warc size comply with spec adjust default pool size for fewer odd sized w arcs archivefileconstants javaremove superfluous constant writerpool javadefault max active writerpoolmember javaupdate constant use remove deprecated unused methods writerpoolprocessor javapull storepaths up from subclasses but set default via subclass methodset defaultmaxsize via subclass method warcwriterprocessor java arcwriterprocessor java getdefaultmaxfilesize getdefaultstorepaths as appropriate,pull up
make querycount logging logic injectable add interface and default implementation for logging refactored to remove duplicated code close ,move
rename mapping methods to mapfrom mapto signed off by luke hutchison,rename
refactored userinfo serializer,push down
renamed wordcram draw to drawall to better reflect that it draws all of the words you might be waiting a while,rename
yv to nitro main changes yv to nitro main changes,inline
implement filters in like chain of responsibility pattern in dispatcher and requestcallback lots of refactoring move some better versions of classes from our project to the restygwt,move
feat implement coreinputlwjgl chore minor coreinput spi refactoring add coreinputlwjgl corekeyeventlwjgl coremouseeventlwjgl lwjglmouseeventdriver classes for implementing lwjgl input backend remove several unnecessary methods from coreinputevent corekeyevent and coremouseevent interface move enable disable default dispatcher methods to absractcoreinput add logging to coreinputjogl ran auto format on several incorrectly formatted source files,move
convert purify to a plugin from pluginfilter and get closer to the fiji design guidelines,inline
refactored xmlnode hierarchy for better ns support,pull up
halfway through refactoring of commands and permissions,move
moving seteditingcontext setobject locking up to erd wpage,pull up
fixed introduced testmoderator for test driver s internal api,inline
o added some missing javadoc o moved the getprocessor method back in the super class o added a constructor to initialize this ioprocessor member o minor refactoring git svn id f bb ffa edef ,pull up
artif jpa rdbms repository hibernate search full text refactored abstracted common repo logic rearchitected repo unit tests installation integration for eap wildfly,pull up
arq refactored data sets handling introduced generic resources and cleaned up providers,pull up
move sharedloglogic specific getcheckedoperations from superclass move operation resolving to abstractloglogic,move
added unit tests,extract
extract methods,extract
isqreader rename a very long method name,rename
refactor placeservice to reduce method numbers,inline
refactored tests hierarchy to simplify adding tests for new bug patterns,pull up
pull up excluded property into nodeinfo,pull up
refactoring statusprinter,extract
apply patches from nutch remove static nutchconf submitted by marko bauhardt stefan groschupf jerome charron git svn id f bb ffa edef ,inline
bug fixes and utility improvements to the arrays in preparation for a trove based overhaul new file src edu ucla sspace clustering candidatecluster java ripped out the common code from streemer and faststreamingkmeans into its own class modified src edu ucla sspace clustering faststreamingkmeans java fixed some bugs added more comments and javadoc uses candidatecluster instead of facility modified src edu ucla sspace clustering streemer java uses the external candidatecluster class now this class is still not well tested modified src edu ucla sspace clustering seeding generalizedorssseed java added some minor modifications to handle double accumuluation modified src edu ucla sspace graph linkclustering java commented out debug code modified src edu ucla sspace matrix abstractmatrix java made the class easily implement a read only variant modified src edu ucla sspace text termassociationfinder java added some much needed javadoc but this class is still a mess modified src edu ucla sspace util sparsedoublearray java modified src edu ucla sspace util sparseintarray java modified src edu ucla sspace util sparselongarray java modified src edu ucla sspace util sparsenumericarray java added new methods to support in place multiplication and division of elements modified src edu ucla sspace util primitive abstractintset java removed newline modified src edu ucla sspace vector abstractdoublevector java now extends abstractvector made the class better support read only vectors that just want to implement get added a magnitude implementation updated equals to call the abstractvector code for non doublevectors new file src edu ucla sspace vector abstractintegervector java added a parallel base class for integervectors new file src edu ucla sspace vector abstractvector java added an implementation of the most basic vector operations of equals hashcode mangitude and tostring modified src edu ucla sspace vector compactsparseintegervector java modified src edu ucla sspace vector denseintvector java removed code already in the base class modified src edu ucla sspace vector sparsehashvector java now extends abstractvector removed code already in the base class modified src edu ucla sspace vector vector java clarified the contracts for equals and hashcode,pull up
restructured project jsr implementation is now the main focus,inline
switchyard eliminate separate contexts for exchange message etc eliminated context on message and moved to scoped context on exchange i tried to strike a happy balance here between having a getcontext method attached to everything and doing magic with thread locals in a stand alone context object the current api will prevent context from bleeding across exchanges inadvertently like when you take a message from one exchange and send it with another,move
various further tidying up changes mostly to tests includes updated versions of test derby database and test data as formats are now stored in the template and not added and deleted with each test this is mandated by the move away from hibernate coupled with the way existing vs new profiles are handled in the existing code,move
rename add noop dispatcher cleanup,push down
ashish sharvani renamed api to changesubscription from changeschedule,rename
resolved issue dirmina make ioservice ioconnector and ioacceptor manage only one service ioservice ioacceptor and ioconnector now can handler only one service at once no more default settings merged ioserviceconfig implementations into the respective ioservice implementations as setters removed a few spring framework integration classes which is not necessary now binding and ioacceptorbeanfactory git svn id f bb ffa edef ,push down
remove awt references for android compatibility,pull up
big update moving emphasis to book and updaing gui,pull up
clean up the model classes,inline
reorganize abstract processor methods put some functions specific to bill processing in abstractbillprocessorand make all bill processors inherit that class,push down
bugfix jenkins enhancement jenkins bugfix jenkins including new feature ignore parent stream can now tell a project to ignore changes made in the basis stream of the actual stream being built this can signficantly reduce the time the plugin takes talking to the accurev server new feature get streams singly more of an accurev client workaround really the plugin used to call the server and get the streams which included absolutely everything under the sun and this turns into many megabytes of data every poll and every build this server setting says to get just the streams we care about our stream our parent stream etc albeit at the cost of potentially making more than one call to the server enhancement logging improved which should make debugging accurev client failures a little easier enhancement now weakly caches the xmlpullparserfactory refactor extracted out code that runs the accurev client command into its own class reducing duplicated code and making parsing of command output more consistent refactor split out many of accurevscm s inner classes into their own files in an attempt to make the main class more maintainable,move
created a fully working handlesetter for eclipse and refactored handlegetter a little mostly to stuff common code into pkg,extract
started refactoring roadmodels created spatialregistry to encapsulate all positional information related to road users,inline
refactor the command line framework for simplifying,push down
checkpoint more work on the new argument file index file changes arenow tracked unprocessed regions are collected and some aspects of theindex are implement eg extracting a file from the containing root file,extract
hv rename misnamed methods in valueextractordescriptor,rename
functionality moved to pluginxmltemplate new file package,move
removed end condition interfaces unnecessary complexity,pull up
count cache moved from eventsmanager to abstractcalendarengine,move
remove all auctionservermanager references to the entrylist so all auction references through it are done directly to the database not done yet it s still a bit dangerous git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,pull up
refactor object collections support new pagination api,pull up
some component refactorings including allowing this puppy to run without avalon optional according to cdi git svn id f bb ffa edef ,pull up
renamed this putstatic self putstatic renamed getstatic javafielddescriptor self getstatic beginnings of repl support for accessing fields,rename
started changing indexerconf indexer indexertest to match the new design does not work does not run but does compile just wanted to try the switch to the new svn repo location git svn id svn ssh dev outerthought org outerthought lilyproject projects lily trunk b d f e bd e a dc ,inline
implement the srt expansion table letters can be sorted as if they were two or more letters if this is the case then the sequence is stored in srt previously there was a hardwired and quite possibly inconsistent table in place add sorting rules for arabic git svn id d f ee a dfeeeb ,extract
cleanup attribute lore mess,inline
bunch of hooks re added network is more complete now lot of basemod cleanup moving stuff into the registry area,move
move flag groups from residencepermissions to flagpermissions for more organizational reasons,pull up
updated accurev plugin to remove non recommende advanced settings include reftree usage remove workspace usage use port and name for all calls add display of depots and streams clean up ui allow users to only build if changes in particular directories,extract
more refactoring didn t really get anywhere but everything still works git svn id baf d a c fc e d,push down
correction de la creation d objet mise en place du resize et du move git svn id svn ssh svn opcoach com srv d opcoach svn training trunk ab df a e b a a fef,pull up
added listener event system for show download notification allows us to set the new filenames in the table as the show information is downloaded also moved new file name creation to fileepisode and added status enum and field to keep track of each fileepisode s position in the timeline added downloaded renamed broken,move
added logging documentation string externalization code cleanup,inline
add safe jdk flag for safer jrockit support,extract
pull up to abstractrequestcontext,pull up
fixed converter message argument transfer introduced shared validator instance allowed getvalue to return just null if no backing bean is bound,inline
removinig spurious integer boolean return type inherited from thw webservices but that return always replacing them by void,inline
refactoring to removed duplicated code git svn id baf d a c fc e d,pull up
clearcase plugin refactoring pollaction and changelogaction into common historyaction git svn id c de d a be ed b c a,pull up
dcm che dcm chee arc light dcm che tool dcmldap utility to insert remove configuration entries for network aes into from ldap server,inline
refactoring of criterion hierarchy tests and implementation of outranking criterion,push down
resolved issue dirmina change mina to create heap buffers by default renamed bytebuffer usedirectbuffers to preferdirectbuffers bytebuffer allocate int now can fall back to direct buffer if the preferred buffer type is heap git svn id f bb ffa edef ,rename
javadocs renamed some methods no functional changes,rename
made dynamicaddress an independent class,extract
code review workoff for oauth refactoring mostly involving updating to use domainmapper instead of one off mappers,pull up
wagon add unit test for wagon ssh with an embedded ssh server refactor to be able to share test with scp external module git svn id f bb ffa edef ,pull up
moved gaugemodelevent to gaugemodel and stylemodelevent to stylemodel in addition i ve added a new radialrange with a range of degrees also postsvisible was renamed to knobsvisible,rename
update creation of resultset proxy use factory resultsetproxylogicfactory to create logic for resultset proxy rename existing proxy logic to repeatablereadresultsetproxylogic add simpleresultsetproxylogic add proxyconfig class to represent all proxy related configurations datasource name listeners proxy factory connection id manager proxydatasourcebuilder proxyresultset takes resultsetproxylogicfactory,rename
had to modify the image drawer to use the imageobserver class as swing uses that to resize components,inline
refs moved tests to appropriate location supose filter model implemented first methods in filter which can be used in scanning mode git svn id a f b ba a ce b,move
extract helper methods to separate classes refactored towards composed method,extract
sc add userservice find string rename userservice finduserentity long userservice find long,rename
pipeline stuff moved to separate repository,push down
push the listiterator code down into the concrete implementation of abstracturlpager so as to clear up a small design flaw where the abstract class knew about the concrete class git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,push down
rename resourcedao to dao in genericserviceimpl,rename
rename methods hold convention to number signed off by christian l√ºthold,rename
myrimatch renamed to myrimatch,rename
modularized resourceframes fixed sprite auto bbox with alpha channel fixed uris with spaces extracted an instantiableresourceframe from resourceframe gamesettingsframe and gameinformationframe now extend resourceframe resourceframe now registers frames for resource kinds using a new factories interface and map if auto bbox is checked and transparent pixel is turned off it now does an alpha channel bounds check this is a bit more intensive but the larger the bounding box the faster this algorithm returns uris were being doubly decoded in the recent files list leading to getting converted into space causing the uri to fail it expects the improved the way uris are displayed in the recent files list recent files list now supports non file uris todo modularize resnode names currently it s assumed they can be set at tree population time with the lgm string i n methods which is not a valid assumption for say plugin added resnodes git svn id f f bc e be cd ,push down
moved tab and section keys up to erd wpage reordered and documented erd wpage,pull up
cf clean up refactor,extract
lots more work hg rename src editor inspections quickfixes abstractquickfix java src editor inspections quickfixes luafix java rename src lang psi luavisitor java src lang psi luaelementvisitor java rename src lang psi impl luablockimpl java src lang psi impl statements luablockstatementimpl java rename src lang psi luablock java src lang psi statements luablockstatement java,push down
utilsfile got some methods renamed to make more sense and uses fileutils forcedeleteonexit instead of file deleteonexit,rename
hama refactor graph package git svn id f bb ffa edef ,move
ttale pushing all as one commit,push down
pull getgroundstate up into abstractnetworkwayseg w o,pull up
refactor to make use of java nio also we now buffer i o to improve performance,extract
simplified websocketclient by using blocking instead of nonblocking channels,inline
imap rename test to reflect the actual test case,rename
add old constructor and move useasyncsend to amazonawssqsconnectoryfactory level,push down
working on fixing the wizardsplitdockstation,extract
remove jaxb git svn id cbddccc e a eb be d e b d ,pull up
renamed mapping to mappingmode,rename
automated g rollback of changelist reason for rollback breaks moduledependencytestcase tests and other weird things original change description extract the main bindingimpl factory implementation of providermethod into an abstract base class this is a prefactoring for moving multibinders into the core all the multibinder factories will share a lot in common with providermethods they are providerinstancebindings the providers implement providerwithextensions the usersuppliedprovider is a bit of a misnomer so we provide a standard implementation this also removes the providerlookups from every providermethod which were pr created by moe moe migrated revid ,move
refactoring in preparation of hotspots for yellow count,move
inlined deprecated viewfetcher getcurrent methods in favour of viewfetcher getcurrentviews class,inline
refactored merged cifs telnet and cifs winrm support moved cifs code to abstract class cifsconnection and made cifstelnetconnection and cifswinrmconnection subclasses of that class moved winrm support to com xebialabs overthere cifs winrm package and subpackages introduced cifsconnectionbuilder and cifsconnectiontype so that one protocol cifs can be used together with cifsconnectiontype to make all cifs telnet and cifs winrm connections made connectionoptions get throw illegalargumentexception if a connection option has no value and introduced getoptional to be used when a connection option is optional some minor code cleanup here and there,move
new visitor interfaces some api changes and docs keeping classgen synchronized with method fields structure now,inline
pull request post fixes changed the hierarchy of checkoutaction in order to better accomodate incoming changes minor nitpick here and there,push down
rework compiler stack into top level program function basic block compilers and low level chunking strategies optimized compilers,push down
chore further improve gc performance in coreshader replace all uses of prefix argument concatenation in coreshader with corelogger and or coregl checkglerror calls corelogger optimizations add setloggingprefix getloggingprefix methods for automating a preset line prefix for a logger instance reduce varargs pollution by making use of varargs methods conditional the varargs log methods as well as checkglerror messages are now overloaded with non varargs methods so runtime intensive code like the setuniform methods in coreshader that doesn t need to use the argument processing can log messages directly instead this significantly reduces varargs pollution by eliminating needless creation of empty object objects by the jvm when making simple checkglerror or other log calls to coregl corelogger update coregl implementations to support overloaded checkglerror methods with no varargs see for related discussion on this issue,inline
hv removing remaining switches on java version,pull up
check method s parameters move compilationunit to containermanager,move
code clean renamed some package private methods git svn id f bb ffa edef ,push down
renamed updateasscommand assmetadatatemplate,rename
fixing so that untilpass can be renamed to until,rename
refactoring and specific retrieval for oracle indexes change id i c ab be cb ff ffb c e f signed off by st√©phane thibaudeau,inline
modelcontext getdefaultlanguage added,extract
comment and simplift the component painting function this let me add new features where they needed to go because the code became more comprehensible add a dotted square box around the thumbnail icon looks slick imo,extract
faces develop aui body component extend generated base class for consistency,pull up
make adding metadata fields in searchresult optional,extract
rm abstract class and move all code into the only implementing class,move
removed reduntant part of all s functions to class s function,pull up
o refactoring move method git svn id f bb ffa edef ,move
refactor query model git svn id media reference trunk f b f cced dd a afbefa e e,pull up
redesign bucketer system for multiple buckets per dimension this supports use cases like tags where a single cube input might have several tags associated with it in a single dimension you could get then get counts by looking up individual tags,pull up
sush ashish added integreation test for campaign message service also fixed request validators,push down
move sendpdulength receivepdulength maxopsinvoked maxopsperformed packpdv from applicationentity to connection replace connection dimsersptimeout by cstorersptimeout cfindrsptimeout cechorsptimeout neventreportrsptimeout ngetrsptimeout nsetrsptimeout nactionrsptimeout ncreatersptimeout ndeletersptimeout rename association nevent to neventreport,inline
sc qcadoo early detection for hooks inconsistency extracted view hooks class hierarchy to improve type safety remove unnecessary componentcustomevent class,push down
make sure blockwise change command edits all lines the changeoperation would try to detect if the invoking mode is blockwise visual by checking if a selection was passed in and the last selection was blockwise after db f ef cf d f this detection got broken but it s actually far simpler to remove this detection and make blockwise visual mode call the right operation in the first place fixes ,push down
saveaspage refactoring,push down
fixing a bunch of jms compliance issues,push down
initial version of granular uploads refactor for simplicity speed the interfaces involved have been duplicated so there is a standard and a granular version of each the nitro classes have then been moved across to the new granular interfaces as have the various controllers and other shared classes testing still needs improving,move
add continue support for server and client,extract
complete got rid of code generating code in ast classes all code moved to jscodegenerator,move
aesh settings is now an interface settingsbuilder should now be the default way of creating a settings object,push down
refactor hdmap configuration add shaders perspectives,push down
add webdav plugin changes,push down
bug fixes after merge new datastore tests changed reasoner to be a groundkernelstore that can do optimization and fixed admm,inline
move getentries to abstractvector git svn id f bb ffa edef ,pull up
simplifying the matlab controller only to work on the local machine the implementation works in the debug mode but not when deployed the problem seems to be the packaging for some reason my eclipse does not want ot build an unpacked plugin then in the jar file the hashmaputils m are not accessible moving the code from matlabclient to the respective nodes improving the sintleton implementation of the matlabcontroller now matlabconnector,inline
created planeroadmodel,push down
moved attributes to clearcase,pull up
refactor the cli module,push down
movemes from erdirecttoweb erd wfactory adding mycheckrules fixing bad eomodelgroup,move
cleanup expandablefield keep charge getreview charge setreview backwards compatible,extract
renamed comparator to matcher in cases where it s matching and not comparing,rename
inline meter tick nothing else uses it,inline
make touch methods up to date update tests move timeout to messageoptions,pull up
bunch of methods pulled up,pull up
nutch html redirections are not followed when using parse tika extract meta refresh redirects from dom tree normalized by tika add unit test to check whether meta refresh redirects are extracted and parse status holds the redirect target,extract
remove i prefix from interface names,push down
updated core tests that use datasourceprocessor to use datasourceattribute one of the changes required was to change createmappages to provide datasourceattribute as output instead of iterable,extract
big refactoring added ioprocessor a thin layer which is similar to the reactor pattern renamed abstractiofilterchain to defaultiofilterchain because of the abstract methods of abstractiofilterchain are now moved to ioprocessor interface moved common parts of various iofilterchain implementations to defaultiofilterchain removed other unnecessary iofilterchain implementations added iosession getprocessor so that defaultiofilterchain can access the associated ioprocessor extracted interface from serialsession and all the implementation goes to serialsessionimpl git svn id f bb ffa edef ,move
extracted majority of caching implementation to timedcache class which can be extended for different stores might be good to move the store part to use composition in future,pull up
move methods in test classes,push down
refactoring move to a helper method that has nothing to do with the report generation to a helper class git svn id f bb ffa edef ,move
rework test and rename it to testgetepisodetitle the old test testdownloadandrename didn t do any renaming so ironically it s being renamed what it does is lookup a show by its name and once that s done look up an episode by its season and episode numbers it also used to parse a filename to extract those pieces of information but that was redundant that s exactly what the method testparsefilename does and testparsefilename does it better so eliminate the redundancy instead of having it re parse the file name we now just use the values already provided for show name season and episode this allows us to eliminate the filename and the expected resolution from the input as they are irrelevant for this test,rename
jcbc add tracing to counter motivation this changeset adds tracing to the counter operation change id i ff e f d a ac d f e reviewed on tested by build bot reviewed by david nault,extract
nutch refactor linkdb and linkdbmerger to reuse code,move
issue abstrahierung des createsearchgeometrylistener fuer allgemeine geom suche,push down
revert unchecked changes added facility to configure the csv export the same way adding it at the v version of the module only difference reconstruction of the configuration file in cmscsvexportbean java is adjusted details added csv export configuration facility renamed cmscvsexportbean to cmscsvexportbean and adjusted calls refactored cmscsvexportbean this reverts commit a a e cfaaa d b dd d c d fb,inline
tfj retire extendeduser and userwithstatus git svn id b e d d ab bb d b,pull up
moved shares to transaction super class,pull up
renamed method around binding serialization for console strings,rename
improved even stacks optimized removed magic numbers for x crafting support account for damage values,inline
jvstm lf rename remote read write set to simple read write set,rename
surefire more refactoring and hopefully fix build on sonatype grid git svn id f bb ffa edef ,push down
big refactoring because of space is now dependent on ode system changed schema for space xml files updated ode system interface,push down
some refactorings in the translator moved duplicated code to super class,pull up
refactored how server requests were built now requests may contain other requests but the parameter mapping is only done in the main request and may optionally be ignored in sub requests,extract
rework into an autoclosable allow callers to simply use a try with resources around the measured code,inline
rework protocol assignments,inline
remove non filled bar chart style rename some methods,rename
use calendar for dates and remove unused account sid,inline
fixed resourcemenu lots of other minor fixes resnode added an icon field to allow listening for icon changes also means scaled image is cached added tree structure change listening code added a contains method to recursively look for a node with a given id mdiframe added a copyright notice colorselect added getter and setter for selected colour changed constructor for convenience gmmenu copied copyright notice from gmmenubar to here gmmenu was an inner class in an earlier revision gmtreegraphics moved to the top level of the components package it is in fact a component modified to use the icon field in resnode resourcemenu modified to update on changes resourcemenuitem listens on its individual node for text and icon changes menu listens for structure changes and rebuilds itself not the most efficient method jedit package dnc lgm externalised the frame title string listener modified to use the externalised title string argument modified to use colorselect for colour arguments sprite made subimages public removed unecessary methods removed a dependency on a non existant external image soundframe fixed the arguments to the constructor of indexbuttongroup checkstyle xml disabled the switch statement default clause check git svn id f f bc e be cd ,move
refactor scope updater to share common put methods with other executors,pull up
bdbje updates refactoring commons pom xml classpath update to bdb je bdbmodule java getstoredqueue added getstoredmap made more general opendatabase all databases now managed tempstoredsortedmap java disposablestoredsortedmap java renamed statisticstracker java report java use new name storedqueue java storedqueuetest java move to org archive bdb package bdbmultipleworkqueues java prefixfindertest java update for bdb je changes bdbfrontier java use getstoredqueue drop unneeded custom serialization support workqueuefrontier java drop unneeded custom serialization support,move
added bugfix nsmutablearray had limited testing so far someone please add the javadocs removed the list methods from erxmutabearray they are now in the superclass,pull up
keep parser in line with wycats handlebars emulate the refactor performed in this will help simplify porting future changes in wycats handlebars,extract
added push down predicates to the core api and supporting classes for those graph database that don t support this notion the vertex api has changed,push down
renamed method getlength in updatemessage to be getlengthofreplacedtext getlength is ambiguous and could be thought of as returning the length of insertion operations,rename
general bug hunt no point listing more work on having only one actionfactory dont need tool tips on top level menus finished making bookdatadisplay the central interface for viewing bookdata menubar tidy up unfinished moving of list blur delete options to be list buttons much clearer cancel button on progress bar from dms search make moses aaron do moses aaron search general tidyup,inline
added polygon d and polyline d shape objects booleanmask d added methods for merge operation add booleanmask d exclusiveadd booleanmask d intersect booleanmask d subtract booleanmask d roi added methods for merge operation mergewith roi op add roi exclusiveadd roi intersect roi subtract roi these methods allow faster merge operation of many roi by reducing the number of roi creation fixed default computenumberofpoints implementation roi darea added add exclusiveadd remove roi darea methods added add exclusiveadd remove booleanmask d methods some tweaks here and there roi dshape faster getbooleanmask d implementation help a lot for descriptor calculation roi dpath fixed contains and intersects implementation better merge roi implementation roi dpolyline now use the polyline d shape for a better and more accurate general implementation roi dpolygon now use the polygon d shape for a better and more accurate general implementation roiutil merge list op method should be faster now roi panel full implementation of the roi descriptor for customizable expandable roi information some fixes and improvements on default roi descriptors back to simple table presentation jxtreetable was not stable enough better columns selection setting separate columns selection for view and export improved table computation time fixed not boolean operation on d roi with fixed z t or c position loader fixed importer retrieval it was launching the plugin instead of just creating it saver removed interleaving data during save operation icybufferendimage fixed get setrawdata methods shapeutil added isclosed shape getopenpath shape getclosedpath shape methods merge list op should work better and faster union exclusiveunion intersection and subtraction operation should work better overlay add getattachedcanvas method to retrieve all canvas where the overlay is displayed array dutil added getinterleaveddata and deinterleave methods bytearrayconvert major rewrite fixed several bugs improved z t dimension swap operation fileutil added isdirectory string method pluginlauncher put create method in public as we may need it colorutil added mix color color ratio method minor fix in the way we handle layer removal operation many others fixes tweaks and cleanup,push down
simplify codegen and push filtering to caller,push down
fixed problem with vjournal popup,push down
removed the pointless user interface and fixed logging messages in controllerimpl,pull up
addition of ability to shutdown vms added to nimbus admin,extract
allow appkey for json requests to be provided with the input json string currently the appkey parameter is added to the json string when required by the requestexecutor this sometimes creates memory issues as it requires modifying the already generated large strings e g the json for the encoded image file of mb allow appkey parameter to be added by a service when creating the json string modify requestexecutor to add appkey when posting json requests only if the apply is not already present in the input json string move addappkeyvaluetojson method to the servicehelper to allow it be used by services,move
cleanup pushdown pullup and blackbox whitebox features and fix multipageeditor tab selections and navigation from content outline view,push down
moving away from hand coded components xml to those generated by plexus descriptor git svn id f bb ffa edef ,push down
fix import table with row and column annotations rename get set color to from to clipboard use display value when syncing colors,rename
added new server commands added command feedback for telnet the available commands are now ban stop restart kick save give unmute unban time setgroup setipgroup listips unwhitelist reload whitelist mute backup,extract
refactoring to separate big little endian stuff into classes instead of switches,push down
tidied up exceptions in candidate service api renamed candidateforbiddenexception as candidateexception and candidateprivilege as candidateexceptionreason also update the names of the various reasons to make them clearer and added in some javadoc,rename
refactored parameters,move
drop the configroot interface this was intended to make resolve typesafe only allowed on root objects however in practice it was not safe because it was too easy to create aroot by merging a non root object into a root object to fix it we dhave to prohibit that root objects can only merge with other roots but it seems simpler to just document that resolving on subtreeswill do the wrong thing and hopefully it won t be an issue in practice,inline
minor changes,push down
rename methods,rename
support for loading schema and dataset based on cql removed dependencies from hector in cql related classes,pull up
integrated alex s patch sent to brett per alex for the cvs logs renamed public printelementcontent to outputelementcontent for consistency added padtext property to avoid trimtext changing the quick brown fox into the quickbrownfox which allows you to output browser friendly html even when using trimtext misc doc fix,rename
refactor oauth workflow now pass the shared secret through to the rest soap classes from each of the interfaces add the new auth methods to the authinterface class and remove the old methods implemented flickr auth oauth checktoken and flickr auth oauth getaccesstoken oauth tested and working with existing application,extract
extract setup for materializepull out the setup method for doing a materialize on a pcollectionre using it for in memory mapside joins,extract
refactoring add partitioningscheme,extract
move date parsing to instanceresource,pull up
refactored beandiffer tests,inline
refactored stringtoopentypeconverter in order to reduce complexity,pull up
renamed getinstance to newinstance git svn id research chemet trunk e a e c eb c a a ee ,rename
renamed group method selfadj to adjassign,rename
tool framework updated improving htestclitool htestanalysis htestcommands and derivates zcalc and oncoz working on xml persistence git svn id b f a e b ddf ,push down
transfer sponsors for new active amendment modifies bill processor code to transfer sponsors when the active amendment changes sponsors are already copied when an amendment is first created but this was not enough in cases where new amendments were not immediately published or previous amendments were restored as active a unit test was added to test co multi sponsor processing in these cases additionally some refactoring was done on bill processors consolidate xml and bill action parsing code because they parse actions in the same format reorganize xml billstat processor in an attempt to have a cleaner easier to understand workflow fixes ,pull up
initial work for refactoring the cov build command for compile sources,pull up
replaced the delete rename add style of prototype trickery with prototype flattening trickery the previous mechanism was running into strange problems with duplicate entity names and it did not support multiple database types using the same set of prototypes i e eojdbcfrontbaseprototypes eojdbcpostgresprototypes in the same app in the new system any model that declares and eoprototypeentityname either explicitly with wonder properties or with entity modeler will have its prototyped attributes flattened at runtime you can disable this behavior by setting er extensions erxmodelgroup flattenprototypes to false if you do this though you will lose all support for explicitly setting prototype entities and it will fall back to the stock behavior,rename
extracted validation exception refactored protected resource registration endpoint to use this format,extract
refactored beandiffer tests,move
refactoring to support view subclasses change id if be e f aab fa e afc cc ,pull up
extract configure method so we can override it in the application,extract
added processing options for the java client,extract
add flags to the tsquery class to show stats summaries and the original query with results also modify it to use the new tsdbquery compilation method,extract
refactor extract classes inputtest scriptedinputtest modularinputtest inputcrudtest portinputtest,push down
faces develop alloy inputtextarea component extend generated base class for consistency,pull up
msurefire clean up surefire move test ng battery git svn id f bb ffa edef ,move
develop alloy commandbutton component extend generated base class for consistency,pull up
sneha ashish changing obd campaign message request parameters to post,inline
alex ian roy removed incomingpaymentprocessor and moved dao access from tabcontroller to plugincontroller,inline
inline private method,inline
add tls support,extract
merged revisions via svnmerge from snapshot r redsolo on apr line added new files for ucm activity based change log r redsolo on apr line moved command lsactivity to cleartool r redsolo ti maj line move cleartool executable string into hudsoncleartoollauncher r redsolo ti maj line removed cleartool executable string away from cleartool implementations r redsolo ti maj lines applied path for ucmactivity and ucmhistorybuilder from henrik added outputformat and cleartoolformathandler to help with the clear tool formatting r redsolo to maj line clearcase plugin add ucm parsing of changelog xml patch from henrik r redsolo to maj line clearcase plugin add test for writing ucm changelog xml r redsolo to maj line clearcase plugin added changlogaction from henrik r redsolo to maj line clearcase plugin lshistory now returns reader instead of change logs r redsolo l√∂ maj line clearcase plugin finished importing ucm changes from henrik r redsolo s√∂ maj line clearcase plugin added patch to remove the view from ucm activity from henrik lynggaard r redsolo s√∂ maj line clearcase plugin more test files r redsolo s√∂ maj line clearcase plugin corrected tests for ucmchangelogaction r redsolo s√∂ maj line clearcase plugin fixed failing tests for lshistory ct command r redsolo m√• maj line clearcase plugin fixed change log parsing for base and ucm scms r redsolo m√• maj line clearcase plugin fixed compile error and tests r redsolo m√• maj line clearcase plugin applied patch to remove the view from ucm activity r redsolo m√• maj line clearcase plugin applied patch to add sub activities to change log r lynggaard on maj line dummy change to test developer access r lynggaard on maj line clearcase plugin branch ucm changelog page converted to activity based changelog r lynggaard on maj line clearcase plugin branch preparations for ucm tagging support need to expose the mkbl cleartool command r redsolo to maj line clearcase plugin made get methods in ucm ucmactivity exported r lynggaard to maj line clearcase plugin branch build extended changelog changelog since last not failed build r lynggaard to maj line clearcase plugin branch lsactivity needs the viewname r lynggaard fr maj line clearcase plugin branch if the user writes stream as part of the stream name then strip it r lynggaard fr maj line clearcase plugin branch extra unittest to locate issue r lynggaard fr maj line clearcase plugin branch cleartool is particular about parameter ordering r lynggaard l√∂ maj line clearcase plugin branch add tostring method for easy debug r lynggaard l√∂ maj line clearcase plugin branch improve ucm specific changelog issue r lynggaard l√∂ maj line clearcase plugin branch ensure changelog action is reset for extended changelog r lynggaard l√∂ maj line clearcase plugin branch improve ucm changelog provide stream and user for sub activities r lynggaard l√∂ maj line clearcase plugin branch remove seconds from ucm changelog r lynggaard s√∂ maj line clearcase plugin branch fix tokenize issue on branch also r lynggaard s√∂ maj line clearcase plugin branch improve ucm changelog page r lynggaard s√∂ maj line clearcase plugin branch minor change to regexp generation r lynggaard s√∂ maj line clearcase plugin branch new ucm fake cleartool setup r lynggaard s√∂ maj line clearcase plugin branch re enable edittype icons in ucm r lynggaard s√∂ maj line clearcase plugin branch lsactivity should be run from within the view r redsolo m√• maj line clearcase plugin move vob path handling out from lshistory into clearcasescm class fixed so load rules remove the and before they are used in the lshistory command r redsolo ti maj line clearcase plugin no need to quote the command line args as argumentlistbuilder already does it r redsolo ti maj line clearcase plugin fixed problem that was introduced in my refactoring for vob paths r redsolo ti maj line clearcase plugin added tests for getbranchnames r lynggaard on maj line clearcase plugin branch remove full username from changelog as we now rely on hudson users to display that r lynggaard on maj lines clearcase plugin branch defensive code to handle lshistory with empty activity names it appears that most version entries with empty activity names are version or mkbranch items this code is only there to catch it in case some real version has no activity however that should ideally never happen r lynggaard to maj line clearcase plugin branch add additional mkview documentation r lynggaard to maj line clearcase plugin branch small javadoc update r lynggaard to maj line clearcase plugin branch remove old extended changelog code as this is not the way we want to do it r redsolo to maj line clearcase plugin fixed so the changelog actions are adding the c comments to the lshistory format r redsolo to maj line clearacse plugin removed unused class git svn id c de d a be ed b c a,pull up
initial commit of rewritten table support and associated refactorings,push down
add jrebirth thread to improve,extract
o rearranged try catch and renamed a method,rename
removed the useless inner invokedtask interface and renamed the invokedtaskimpl to invokedtask git svn id f bb ffa edef ,pull up
df qcadoomes fixed problem with autocompletition renamed some methods added some tests,rename
rename to filter from matching,rename
removed includecategories option fixes ,inline
added new statsdtelegrafwriter to support jmx attributes as tags,extract
completed method type property descriptors and refactored them under a common class that can filter by optional package prefixes matching test cases for same updated typemap to catch errors new test cases updated classutil with new functionality for the new descriptors and restored lost indentation formatting git svn id baf d a c fc e d,pull up
even more performance issues fixed i do not guarantee there are no bugs in this build status of what else needs to be done will be assessed later on what has changed if every protection is inside of the cache it is safe to assume that any block not in the cache is not in the database we leverage this fact heavily in this build to give a significant boost to performance caches cache all the computations numerous caches have been added in various places where specific points of bad performance was located at these caches generally only store computationally expensive calls overall this is also significant after the caches are nice and toasty modules before lwc s own module system would broadcast events to every registered module this added a overhead of about k nanoseconds per module if they didn t override the method this has been changed to detect at runtime what methods they have overrided and then only send events to modules that have them overridden we could have modules register what events they use but this would break backwards compatibility with plugins that hook into lwc this uses reflection but is all done on startup so the overhead is minimal the gains is fairly large and worthwhile there is still a potential to shave off even more precious cpu cycles but this will be assessed further once initial results are in for scope here is some example values for events timing is in nanoseconds event before after redstone k k interact k k,extract
remove unecessary context check in connectionbase startread as it will always be called from executeio that already does it and inline it in handleread directly,inline
remove boolean parameter to hllp mergetemplist simplify the code it is best to always resize the temp set if it is too small,inline
another method rename,rename
feat implement coreinputlwjgl chore minor coreinput spi refactoring add coreinputlwjgl corekeyeventlwjgl coremouseeventlwjgl lwjglmouseeventdriver classes for implementing lwjgl input backend remove several unnecessary methods from coreinputevent corekeyevent and coremouseevent interface move enable disable default dispatcher methods to absractcoreinput add logging to coreinputjogl ran auto format on several incorrectly formatted source files,pull up
introduced b modulesfileflagsprovider,inline
revert replace test inheritance by rule this reverts commit c c e d bbbdf f be dd f b efe this commit has been moved into features refactoring tests,move
refactoring fix cursor close use oplog replay move mongoclientoptions in mongodbriverdefinition close cursor and mongo when river is deleted or stopped use queryoption oplogreplay to improve performance,move
further refactor of selectorparser,pull up
fixes for issue modified proxymap to separate many map related methods from proxy collection,push down
computation of original route moved to director git svn id f bb ffa edef ,move
bug label and activity equals two objects bug support bpmnlabel di elements bug label feature package is not exposed bug bpmn modeler usability look feel saving work still need to update subprocess and choreography tasks added a new appearance section for all baseelements which allows changing colors and line styles etc attributes are saved as extension elements,inline
purge references to block ids from most of the code block ids are going away in minecraft each block should be referenced by its name why block ids will of course still be used internally in the save files and network packets but to the outside world they re gone in the future minecraft will use dynamic ids everywhere grass doens t have to be id it could as well be id at the moment all vanilla blocks still have a static id mods on the other hand already use dynamic ids forge takes care of that when registering a block in forge it is unknown to the modder which id the block will get up until this commit terrain control still used block ids everywhere in the code this maked it a hassle for users of terrain control to find out what the id was of a modded block from now on modded blocks can just be referenced by their name breakdown most instances of int id int data have been replaced by localmaterialdata material localmaterialdata holds both the block and its data localmaterialdata is immutable so it can be easily shared to other classes localmaterialdata has two methods to create a new instance with different block data withblockdata data to change the block data to something else and rotate to automatically rotate the block data rotate uses the blockhelper class to achieve this as the local in the name suggests localmaterialdata is implemented by the bukkit and forge versions of terrain control you can use terraincontrol readmaterial string or terraincontrol tolocalmaterialdata defaultmaterial int blockdata a new class called materialset has been added this class replaces the various block list implementations we have seen so far in terrain control all block lists now have consistent behaviour you can now for example use solid or all in the sourceblocks in the resources of the biomeconfigs and in the blockchecks in bo s previously this was only possible in spawnonblocktype in bo s materialset will get a few improvements soon to let it work better with block data some places in the code still use the byte id arrays i m not sure at the moment what should happen with them however the ids in those arrays are dynamic now old configs ids in old configs will still be read defaultmaterial getmaterial int id continues to provide a block id lookup for the vanilla blocks even when all ids become dynamic in minecraft defaultmaterial will still use the old static ids to make sure that old worlds still load properly references html final note could anybody help testing this this commit is huge and i would be surprised if it didn t break at least four things,inline
add support for sharing local list and added the disabled binding similar to what wotextfield is doing,extract
nxcm moving method level upinitially i thought i ll need release to be runin the staging scenario but i realized this is notthe case closed staging repo is just fine as everythingelse,pull up
some code clean up removal of deprecations introductions of deprecations so uses of deprecations can be removed later,pull up
surefire add forkcount parameter making the inconsitent forkmode parameter deprecated all defaulting works as in the previous versions with the exception of reuseforks introduced in the last release it s now true by default forkcount supports c notation as in t of maven core,extract
refactoring of some author synonym handling components including making writeablesynonymmap abstract adding two subclasses for the different syntax behaviors started as a fix for but ballooned in scope a bit,push down
motivation currently the messageconsumer end handler is called only when consumer is unregistered during an event bus close when the consumer is explicitly unregistered it is not called this handler is mainly used by rxjava and kotlin coroutines and it seems it would be best to call the end handler in all case to give an opportunity to end the treatment in rxjava it would call the complete handler and in kotlin it would close the underlying channel so a for each iteration on the channel would terminate and execute the code after change call the messageconsumer end handler when the messageconsumer is unregistered explictly,inline
udt and ipv improvments,push down
added class to store window size position and state between sessions using prefsstore made lgm frame use this class renamed methods in util to follow code conventions and added two more methods fixed a bug which would prevent lgm frame from getting maximized at startup git svn id f f bc e be cd ,rename
initial taxonomy movement,move
add a checkbox that hide show non numeric excel headers,extract
refactor services and fix tests,move
getdeclaringtype moved up to be reused git svn id baf d a c fc e d,pull up
scenario add info about drag drop to policy when considering availability of drag drop actions via policy provide key value hints about which action is being employed this permits external plug ins to modify their behavior in special cases where normal move copy link rules are insufficiently descriptive this is needed for the scenario distribution where move and not link should be available when dragging activity type objects between repositories,move
refactor resource loading into method in parent for re use,move
sc qcadoo prioritization and data access refactoring,pull up
lib refactor configuration heavy update maps support,inline
optimize code for coverage column and add refactore unit test for coverage column,move
improved handshake classes initiated by eab a and c fb ,push down
wellsfargo external ids add concept of link transformers to be able to transform the consumerdb notation of external links into parseable lily links,extract
added a proxy configuration processor,extract
its own module,move
o refactoring move adapter methods from the xml parser class to its own class git svn id f bb ffa edef ,move
remove most xml related items and the entire internal web server concept,inline
added spout notifications for battle and match end as well as monument captures and tweaked the flag capture ones turns out chatcolors work great ootb with genericlabel yay the war message feed at top left notifications look awesome,extract
change reports sidebar to a html component with grouped links this opens up a creativity space towards better user interface for showing possible reports generators etc,inline
superbuilder tobuilder renamed generated static helper method,rename
adding api action interfaces,extract
fixed up headersmoved some bits to internalreduced log codeextracted replayprefixonecharinputstreamextraced stty detailsextracted shutdown hook details,extract
 editable working set name other fixes import working set name is now text control and can be changed by the user create working set is automatically enabled when importing single multi module project and disabled in other cases signed off by igor fedorenko,inline
lots of refactoring support for having multiple connections,move
added bugfix nsmutablearray had limited testing so far someone please add the javadocs removed the list methods from erxmutabearray they are now in the superclass,pull up
removed migrationrunnerstrategy method signature receiving integer inline method refactoring to orderedmigrationrunnerstrategy class,inline
coded mdi functionality and lots of other gui code gmltextarea leading spaces are converted to tabs tab width is set on initialisation added gettextcompat to convert newlines and tabs back for resave see prefs tabwidth see util convertindents string gmmenu extracted from gmmenubar to allow subclassinggmmenubar added window menugmtreegraphics background nodes are now shown correctly in the treemdimanager implemented resizedesktop mdimenu the window menu it updates when frames are added and removed and offers some common commands subclasses gmmenumdipane modified to call resizedesktop in certain cases added functions to close all etc vtexticon fixed a generics warninglgm mdi is now an instance of mdipane modified createtree to add a jtogglebutton for the eventframe reordered some gui initialisation code to work with the extra toolbar button overloaded makebutton for other kinds of abstractbuttonresource modified the arguments to copy there are now two versions modified subclasses to use the new arguments resourceframe added javadoc comments to some fields to clarify their purpose modified resourcechanged in all subclasses to compare against resoriginalscriptframe modified to use gmltextarea gettextcompat eventframe added support for the toggle buttoncheckstyle xml todo comments are now ignored eclipse already has better functionality for thatabstractbitmap removed a fixme commentgit svn id f f bc e be cd ,extract
removed duplicate customparams for tiledwms layer,push down
merged revisions via svnmerge from r kohsuke fri oct line fixed hudson fixed a possible abstractmethoderror in r kohsuke fri oct line fixed hudson supported failsafe reports for the maven job type r kohsuke sat oct line added additional code to assist trouble shooting r kohsuke sat oct line performance optimization wrt the usage of buffer r kohsuke sat oct line fixed hudson hudson the incorrect use of weakhashmap resulted in two instances of pipewindows for the same oid r kohsuke sat oct line debug code accidentally crept in r kohsuke sat oct line maven release plugin prepare release hudson r kohsuke sat oct line maven release plugin prepare for next development iteration r kohsuke sat oct line updated changelog as a part of the release git svn id c de d a be ed b c a,inline
refactor alltries bench,push down
rename parsestring to formatcalendar rename create method to createworker,rename
fix a typo i assume in one of the failure messages from iterablesubject containsexactly it says contains only rather than contains exactly i ve done a bit of random tidy up while i was here for one thing the private method took a failverb parameter which always had the same value so i eliminated that and that method is more similar to containexactlyelementsin than it is to containsexactly so i renamed it which also means there s no confusion between the private two arg overload the the public varargs overload created by moe moe migrated revid ,rename
add support for dragging files into the viewer,extract
ended up reworking a lot of the group structures formation and party now extend actorgroup inventories are now objects of their own instead of just a hashmap now formations and parties have inventories inventories can be merged to make things easier when adding items after a battle is won battle parties now share the same inventory as their parent party no longer must i be referencing the engine s party instance to work with items you can no longer statically load a party from file you must first create a party instance then load from file into that instance,pull up
oozie create oozie application master for yarn asasvari pbacsko rkanter gezapeti,push down
improved loading of metadata packages listing of packages moved into xml file packages xml all metadata files moved into a subfolder in resources unit test for metadata package loading working with its own test package,move
continuing refactoring git svn id baf d a c fc e d,pull up
refactoring df j nio continued,pull up
replaced java serialization with streamable in nakack unicast flowcontrol locking extendeduuid siteuuid moved rpcdispatcher marshaller into its own interface marshaller now de serializes only rpc args and return values incl exceptions,move
rename,rename
fitellipsoid move removenulls to new class arrayhelper,move
refactor move appscript services to new appscriptservice in appscript package,move
reworked entitymatcher to provide separation of the metric calculation and comparisson this separation allows us to cache the calculated metric and should speed up the entity resolver,inline
only render id s for top level i think it used to do this and i forced it on for all of them a while ago to test extract style rendering buttons render style on the label span rather than the container,extract
refactoring the affinitymatrixcreator to be an interface and create a new similarityfunction interface additionally any class using the workqueue now all use the same singleton workqueue as opposed to their own the two affinity matrix edge selection methods are now different implementations of affinitymatrixcreator each affinitymatrixcreator takes in two similarityfunctions one for selecting edges and one for weighting edges any classes using affinitymatrixcreator have been updated to use the interface and take in a pre constructed affinitymatrixcreator as an argument the lpp based mains have been simplified to create affinitymatrixcreators every similarity method in similarity has a corresponding similarityfunction the kernel functions from affinitymatrixcreator also have a corresponding similarityfunction a bug fix in hashbimap is fixed that caused infinite puts minor spacing or javadoc fixes as needed workqueue is now a singleton class any threaded classes using the queue now access the same queue and submit runnable s to it so that no job queues are conflicting genericmain sets the initial size of the queue based on the t option,push down
moved extract flag to abstract class,pull up
renamed interface methods to make more consistent,rename
factory instantation of destination objects added the ability to create translation targets using a factory in particular this allows the substitution of subclasses or implementations of an interface within a translation this has particular merit with translation of parallel hierarchies although it also has value when defining classes with interface based properties and the like closes for now although i may soon want to do the same thing but for collection properties,push down
refactoring to separate oauthservice from network service api hub,inline
convert numbers to configint when possible then configlong and configdouble only when required had to overhaul and clean up equality of confignumber as part of this,pull up
wired up first sqs enabled test refactored non vendor specific logic from nevadomessage to abstractmessage added string serialization to be able to put entire nevadomessages into sqs body created send receive and delete functionality wired up simple message acknowledgement logic,pull up
o simplified reporter construction git svn id f bb ffa edef ,inline
renamed iosession getmanager to iosession getservice git svn id f bb ffa edef ,rename
changes to committee dao and api controller reworked committee caching moved some packages around,pull up
df qcadoomes some fixes in orders,push down
srl add a session factory for stateful servers,extract
closed task improve object process and state figures moved direct handling of direct text edit to external delegate set antialiasing to shapes improved location and size of internal label in all figures to minimize margins but still make it look nice,move
text editing rewritten,push down
enhance erxarrayutilities use interfaces as params where possible prefer methods defined in java interfaces instead of ns specific ones add vs addobject some performance enhancements give some methods shorter names fix javadocs add tests,inline
cleanup docs,inline
hacker s weekend on compiler plugin renamed deepstatementrewriter to deepblockrewriter and rewrote it to always process a whole block heavy refactoring of ast transform related code to make it easier to understand and more extensible added support for declaring a mock s interactions right when creating it mock list implemented specification with to declare conditions and interactions in the context of an object,inline
wip refactor of candidate services this now uses the new authentication filter and i ve converted the existing session token idea so that it works like an xsrf token needs testing and tidying next,pull up
moved time sensitive test to separate file,push down
fixed game refactored,push down
cleanup on snapshot api,pull up
closes connection not closed after database exception is now fixed also did some cleanup,inline
renamed dimension to world in block also made getdoublechest actually return the doublechest hu,rename
inlined deprecated viewfetcher getcurrent methods in favour of viewfetcher getcurrentviews class,inline
cleanup mavenupdaterequest api class added some javadoc and renamed parameters to better describe what they do events are fired by maven project import maven project import synchronously create project facades so background refresh is redundant removed force attribute and made related changes to dependencyresolutioncontext and projectregistryrefreshjob check for facade isstale in resource change listener instead signed off by igor fedorenko,rename
fixed hudson removing existing snapshot views often fails fixed hudson use cleartool setcs current instead of cleartool update better handling of job renaming deletion and behaviour regarding custom workspace plugin will be more resilient in case of existing view tag or view path in the way instead of failing it will remove the view tag and or rename the view path ucm view config spec should be more consistently sync ed with stream dev new unit tests to cover addition removal of load rules on an existing view git svn id c de d a be ed b c a,pull up
move transliteration routine to superclass so that we could use it for the latin option git svn id d f ee a dfeeeb ,pull up
o refactoring move adapter methods from the xml parser class to its own class git svn id f bb ffa edef ,move
minor refactoring and white space fixes also converted from space tabs to space tabs,inline
added list of imported theories in prolog output does not seem to work yet,extract
rename model field hasvisible to visible,rename
clean management of cancellation,inline
renamed some publishedport members and changed the documentation a bit,rename
 introduced mavenexecutioncontext threadlocal is used to associate maven execution context with the current thread the context encapsulates maven session configuration i e force update offline etc flags as well as repository session cache and data this ensures consistent use of this configuration and data structures by all maven calls performed by the thread specicially solves multiple cases where forceupdate was not honoured during project configuration update bug solves extremely slow performance when multiple projects reference the same missing dependency and forceupdates true bug see imavenexecutioncontext javadoc for new api details signed off by igor fedorenko,inline
refactored mouse clicks,extract
introduce liquibase clean up tests,inline
coded most timelineframe buttons actionperformed removed todo tag mostly done added fixme tag for mergemoments actions get deleted added some functions to timeline findmomentposition to run a binary search on moments shiftmoments has a todo tag to complete mergemoments appears to work but the ui side needs fixing added moment copy updated timeline copy to use moment copy removed outdated resourcecomparator references to argument editor affected gmobjectframe and timelineframe removed todo tags from gm filereader in accordance with ticket git svn id f f bc e be cd ,inline
pulled out common code in my optimization tests into abstractoptimizationtest refactored fipplefactor and naf optimization tests to use abstractoptimizationtest,pull up
improve performance correct and simplify formerly unused code in elementquadtree split boundary ways so that each part has max nodes fill elementquadtree with these boundary fragments the code still needs a lot of intersection tests but is typically much faster than before git svn id border d f ee a dfeeeb ,inline
refactoring introduce constants for elements move some methods to pomhelper,move
added text caching in element and partiallist so textual content is returned pronto and added in whitespace handling to element java,extract
example benchmarks fix minor fixes on benchmarks documentation updates fixed up coherence plugin query api change decoupled pid retrieval from started process and possibly did not mess up whole lot of other things added some missing configs fixed up coherence plugin moved pid management from serice to lifecycle fixed spark pid retrieval added some comments on example benchmarks minor fix on properties parsing added coherence plugin build documetation,move
rework of the actual archive creation in order to avoid multiple iterations over or random access to the resource collection performance gain for extracting tar archives pr plxcomp ,extract
rename setters and attributes,rename
extracted parameter directorynamebase,extract
move trx message base to the core message project,push down
abhishek dev moving audio file strings to seperate class extracting out node construction to builder,extract
complete refactoring of compiler system,pull up
renamed base class model into modelelement and its subclasses as fieldelement methodelement classelement,rename
renamed injectstatics to requeststaticinjection git svn id guice googlecode com svn trunk d f a b b b d aecad e,rename
major refactoring the jdbc package was in pretty bad shape and was extremely hard to modify some of the changes made to fix this were o refactored the jdbcmigrationcontext so that the source of connections is abstracted a basicdatasource that wraps a connection has been added to support environments without access to a data source o all database specific configuration options are now set on the jdbcmigrationcontext the patch path is set on the migration launcher o fixed the way that database connections were being closed the old way caused pooled datasources to hang o less connection passing every class can obtain its connection from the context o put the concept formerly known as dialect into it s own class databasetype o added support for oracle this turned out to be a pain since the oracle jdbc driver doesn t support multiple statements in a single statement execute call like postgres does o renaming many of the old names didn t make sense i tried to make the changes as backwards compatible as possible but i haven t tested this with an existing application you have been warned this whole thing needs to be repackaged under net sf autopatch at some point,inline
rename clear to close git svn id f bb ffa edef ,rename
reverted org gjt sp code jedit library back to shipping version is unmodified from jedit source tree added fileutilities class to do the observed move and changed uistarter accordingly,inline
lots of stuff added and lots of stuff changed take care,extract
code cleanup remove dead code remove unnecessary else blocks use stringbuilder in datepathwithroot add lastmodifieddateforfileinframework variant for localized resources,extract
move relatedlinks from content to described moves the relatedlinks field and related methods up the hierarchy to described from content so a person has can also have related links,pull up
adding generated parser of csharp merge,inline
refactor tracing feature into a base class,move
rename hd to highdefinition,rename
more optimizations to jit persistence scheme raw performance from object to memory is improved by about an order of magnitude ms object vs ms object the limiting factor now is file system performance,push down
clustering fixes and refactorization git svn id b f a e b ddf ,extract
use artifactrepositoryfactory to construct alternate local repository instead of directly invoke the defaultlocalrepostory constructor rename alternatelocalrepository to localrepositorydirectory for clarity and configuration naming convention git svn id f bb ffa edef ,rename
updated demo tests for exchange rates apis removed invalid temporary if true return statement corrected spelling mistake in getexchangerates method renamed testpostcurrency to testpostexchangerate increased the interval for get rates to get future rates if any ,rename
refactored last tests to use common base class,pull up
refactor math definereadonlyproperty and math definenonenumerableproperty for use in json,pull up
adding basic targeted pet functionality to spawnmonster,extract
profiles refactored shared elements in abstractprofile warc refers to date now set as long and correctly formated in getwarcheaders,pull up
moved getnamespaceuri down to foreignblock only will make apip easier later,push down
added the delete account buton sorted the listview load database on startup,extract
updated project to reflect the move of some classes to an external mlcl library,move
attached is a patch that does the following improves performance of commit rollback by reducing number of round trips to the server uses functionality for setting the transaction isolation level backs out a patch from days ago because that code failed to compile under jdk details the old code was doing the following for each commit commit begin set transaction isolation level xxx thus a call to commit was performing three round trips to the database the new code does this in one round trip as commit begin set transaction isolation level xxx in a simple test program that performs transactions where each transaction does one simple select inside that transaction has the following before and after timings client and server on same machine old new sec sec improvement client and server on different machines old new sec sec improvement all timings are an average of four different runs the driver was using set transaction isolation level xxx at the begining of each transaction instead of using the new syntax of set session characteristics as transaction isolation level xxx which only needs to be done once instead of for each transaction this is done conditionally i e if server is or older do the old behaviour else do the new behaviour to not break backward compatibility this also required the movement of some code to check test database version numbers from the databasemetadata object to the connection object finally while testing i discovered that the code that was checked in days ago actually didn t compile the code in the patch for connection setcatalog used properties setproperty which only exists in jdk or higher thus compiling the jdbc driver failed as this method doesn t exist thus i backed out that patch barry lind,inline
decommissioned reconfigureonchangefilter and replaced it with reconfigureonchangetask added scheduledexecutorservice to context,push down
create backend jvstm datagrid this backend adds support for running jvstm on top of a pluggable data grid it also includes an implementation for infinispan e g to use the infinispan data grid one should provide the following configuration config class pt ist fenixframework backend jvstm datagrid infinispan datagridconfig datagridclassname pt ist fenixframework backend jvstm datagrid infinispan infinispandatagrid and optionally datagridispnconfigfile,push down
redesigned fluentpipeline model,push down
extracted method setrightsonuserdoc,extract
moved parts of the compoundprologterm implementation into prologterm,pull up
use tvrenamer as configuration directory previously tvrenamer was an xml file containing preferences and tvrenameroverrides was an xml file containing title override information i m switching these to tvrenamer prefs xml and tvrenamer overrides xml respectively but to have a directory tvrenamer we need to move the file out of the way create the directory and then move the file into the directory the method initialize of userpreferences accomplishes this upon startup use java nio file path instead of java io file keep all of these hard coded items in constants java also eliminate hard coding of overrides in source code to try to provide that default functionality check in a default overrides file and copy it upon initialization if no other overrides file exists,rename
changed the way how exceptions was handled to have something more general cleaned some of the api that was sometimes inconsistent refactored ermaildelivery with the introduction of a new class ermaildeliverycomponentbased,pull up
refactor to isolate the proxy channel creation in a class so we can run without the proxy netty dependency and make it as optional,inline
added type conversion for constants optimized referencecache removed null check from containerimpl getinstance added container hasbindingfor to provide comparable functionality made key public git svn id guice googlecode com svn trunk d f a b b b d aecad e,pull up
combine two methods into getreplacementtext previously fileepisode had getnewfilename which would construct a new filename out of downloaded information if in fact that information was successfully obtained the method would return various other pieces of text in the case where we didn t yet have sufficient information then we had getnewfilepath which took the result of getnewfilename and if move was enabled prepended the destination directory getnewfilename was useful as a public function in two places when we first create the table item we assume we won t yet have have the file information so we called getnewfilename to get the placeholder text and then registered a listener to change it when we had the information in the fileepisodetest we want to validate the name without the destination directory getting in the way is solved by simply having the placeholder texts be returned by the combined method was already solved by always disabling move for those tests the returned text will never have the directory prepended as far as a name goes neither getnewfilename nor getnewfilepath were really accurate since it could very well return a different type of text so i m settling on getreplacementtext possibly that name could still be improved,inline
pushed bounding box code into line and polyline as it is not needed on points git svn id d f ee a dfeeeb ,push down
improve item display code cleanup,inline
 add mappers getmapperclass for getting the class of a mapper,extract
added messaging to duraservice at the serviceresource level refactored git svn id ed cd a f c be b fe bcb,pull up
refactored remaining services added apis updated code based on the refactoring check in review comments main changes include added apitype constructors changed account specific apitypes into generic ones renamed operation action serviceshelper changes replaced object with generic types this eliminates the need for casting as well as for suppressing warnings in service classes implemented other suggestions static map replaces if statements for type collections refactored all services to use apidefintion and servicehelper fixed test cases as needed added demotestintelligenceservice implemented wrappers for mambu api additions updated mavens pom to build mambu apis java bin jar using mambu models v jar mbu as a developer i d like to work with custom views a added getting custom views api wrapper b added filtering clients groups loans savings by custom view id mbu as a developer i d like to filter lists on centres via api updated wrappers to filter by centreid for clients groups loans savings services,rename
add the histogramdatapointrpc class so users can write histogram data to tsd over or telnet style socket with base encoding of the raw byte data still need to add maps for users coming from platforms other than java rename the histogram manager to histogramcodecmanager modify the histo methods to allow them to include or exclude the id depending on if we re serializing for storage or consumption signed off by chris larsen,rename
katta moved handling of successfulobd call details to kilkaricalldetailsservice,move
open task improve object process and state figures process programming issues issue figures which have a name now implement the opmnamedelementfigure interface and it is used in all operations refresh direct edit etc removed most functionality from opmthingeditpart passed it on to the children will later unify if needed,push down
toignore added to copydocumentservice,extract
cleanup consolidation expansion of utils classes ioutils java remove class that confusingly overlaps with commons ioutils move remaining methods to archiveutils or archive s fileutils archiveutils java fileutils java receive relocated methods eliminated deprecated or unused methods jsonutils java new class to collect common json actions iteratorable java wrap iterator as iterable for foreach usage many update to use alternate utils methods,move
inline finishandinjectsingularmethod into generatesingularmethod,inline
arq refactored test lifecycle handling using event based approach with chaining using precedence instead of single entry point,extract
some javadocs and other comments some minor refactoring change delimiter to for the sortable key,pull up
extract usage to createurldata to reduce the scope ofmutability and to allow future cache of urldatas,extract
update bill scrape check normalizations update the replacenonalpha method to capitalize all characters because we don t really care about case mismatches also rename to basicnormalize and rename stripnoncontent to ultranormalize,rename
added writerequestfilter that helps implementation of data transformation filters changed compressionfilter and requestresponsefilter to extend writerequestfilter note sslfilter and protocolcodecfilter is somewhat different from usual data transformation filters in that it can generate more than two messages git svn id f bb ffa edef ,pull up
surefire change header of the failsafe report,push down
add better support for keypath visibility properties convert no details eo s to id pk format instead of pk delegate attempt to load default rest delegate names restentitydelegate to make registration easier put request handler session fixes from ajax s jsonrequesthandler into restrequesthandler added some convenience registration methods to erxrestrequesthandler added some misc javadoc ified moved some generic rendering methods up higher to support generating alternative output formats,move
renamed test programs,rename
slight simplification of multimapsubject the private two arg containsexactly method was called from exactly one place an the failverb argument was always a fixed string literal so we might as well simplify things my inlining both the method and the argument created by moe ,inline
removed method valueiterator from class structsupport and added to all classes that extend this class replace string with key constants in many placed,pull up
added nlp and imgur modules rewrote major parts of the bot can t remember it all sorry,extract
refactored codegenerators to work with the new architecture added skeletal implementation of withtransaction to allow some basic testing,push down
refactoring test,pull up
getrequestparametermap moved from formvalidationservice to webutilsserivce,move
moved checkeventsequence to flushtest,push down
o moved code from artifactutils to projectinforeportutils git svn id f bb ffa edef ,move
moved references to slf j and classic into subclass when the concurrentserverrunner is moved to core it cannot reference directly the logger and loggercontext objects now the base class delegates its logging to a subclass,push down
refactor oauth tests and write test for eventbrite,pull up
cap refactoring admin controllers and views for annotation based controller usage also refactoring css includes and moving session initialization to an initialization service git svn id f dbab f eb b e eb,move
continuing refactoring for it is moved to new system and tests are passing no new tests have been created yet and it is still messy,move
optimizer additions added conjugategradeientipm added duality gap and thread count options to mosek,extract
surefire partial refactoring o need to refactor further to remove isolate the extra dummy accessors in each of the three mojos git svn id f bb ffa edef ,pull up
extract show and hide view wavetypes,extract
misc improvements to hbase lily solr test fw cleanuputils added a clone of hbaseadmin flush method because it was leaking connections chd u trunk is fixed lilylauncher protect resetlilystate method from concurrent execution clean hbase connection used by cleanuputil delete obsolete lilytestutility lilytestutilitytest hbaseconnectiondisposer removed lily hbase deleteconnections system property we can delete the connections associated with just one configuration object lilyproxy hbaseproxy solrproxy lilyserverproxy embedded mode improve temp dir creation assignment solrlauncherservice remove obsolete lily solrlauncher war property upgrade to newer kauri snapshot that stops the filesystemalterationmonitor otherwise we have an increasing number of these threads after repeatidly stopping starting kauriruntime in the same vm give names to some more threads especially those created by executors mainly used for netty and netty actually renames threads itself so does not do much right now though this behavior can be changed so left this in solrproxy lilyproxy make variant of start method without schemalocation arg uses default solr schema solrproxy close connection manager on stop solrproxy added method to change solr schema after startup writes schema restarts solr lilyserverproxy move methods to add index to there and manage lifecycle of indexermodel zookeeper lilyclient git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,move
abstracted and redesigned the joiner classes code now they are consolidated in one place the adaptive joiners are missing though overall project code cleanup and formatting,pull up
o fixed the documentation about the autostart tag o define some constant for autostart o removed one handler method o minor code refactoring git svn id f bb ffa edef ,inline
moved methods to read and write a cache from file ping discovery provided managed operations,move
renamed execute to initrepository in abstractgitmojo this allows a bit more fine grained access and doesn t suggest that abstractgitmojo itself does something when executing additionally abstractgitmojo gethead will now initialize the repository if not already done,rename
refactoring to support view subclasses change id if be e f aab fa e afc cc ,push down
removed unneeded nd handledatareceived method,inline
added directory popup feature git svn id baf d a c fc e d,extract
rename extractor serializer merge from removed extractor usage out of the service classes,rename
refactor extracted parts from generateroleslotmethodsmultstar to allow subclasses of code generator to wrap the multiple generated methods without replicating most of the code in the original code generator super class method also generate any interfaces declared in the dml files to the base classes,extract
finalized sync async gae implementation with query batch lots of code re organized finalized sync jdbc implementation with query batch lots of code re organized moved all static functions in static class containers jdbc async is not yet implemented some batch functions update are not yet implemented added lots of unit tests,inline
moved rendering examples into examples module these had been in a temporary package called dave they ve now been moved into qtiworks code examples and slightly tidied up,move
completablestage implementation moved to asyncresult,move
removing the use of constructor to inject property instaed using setter only in the amazonawssqsconnector class,push down
renamed keystorefactorybean passphrase to password this is for consistency with the jdk documentation and system properties,rename
major refactoring to remove deprecated jsonparser feature s altogether,move
renamed ciminstance to connectinstance in coverityenvbuildwrapper to be consistent with coverityviewresults,rename
changed indexing fixed some env dependent define features,push down
balajin moving provider alert requests to seperate class,move
refactoring of relay package extract android to own project tests not changed yet,pull up
 removed legacy cofigs from core ui updated showcase for new subtable toggler tag names fixed small mistake in showcase code,inline
sc view definition refactoring,pull up
refactored backward to changeaction,push down
fixing warning messages moving sesame jar to correct location updating guava repackaging bumping rev,move
fcrepo provide alternative to dbxml tidy up policy index config single index config for all impls push common xpath helper methods up to abstract classes tidy up xpath generation for all resources was dbxml specific syntax,pull up
added distortion experiments and refactored existing parts from before two level matrices,push down
added list providers for jbpm datainput and dataoutput itemsubjectref objects which include standard jbpm data types added target runtime plugin extension elements to tool enablements list java type selection dialog no longer includes class members and methods fixed a bug caused by cached model enablements in listanddetailcompositebase class deleted some unused propertysection classes reorganized class hierarchy for all propertysections so they subclass defaultpropertysection instead of abstractbpmn propertysection this was causing all kinds of confusion with property tab visibility,push down
autocomletion started start to extract new class globalenvironment,extract
refactor scope updater to share common put methods with other executors,pull up
artif converted sramptojcrsql queryvisitor into a service created modeshapequeryvisitor using the jcr ms query factory,push down
partial fix and refactoring for jira issue sgf enabling the nested element syntax to function properly,pull up
vishal moving provider performance related request handlers to new controller,move
recorddecoder move remaining result to record decode related code to recorddecoder remove unncessary scope collection code from readcontext small cleanup git svn id svn ssh dev outerthought org outerthought lilyproject branches scanners b d f e bd e a dc ,move
refactor and add missing test,move
fixing issue with backspace left arrow when cursor is past last column but not in next row due to weird wrapping behavior am and xn terms line of width chars in bottom row may have buggy cursor motion when trying to move at end of line on terminals that don t support scrolling or report incorrect height,inline
made more pure bean like by moving utility methods into a separate class,move
part of her rename textsource surtssource and make old surtssourcefile a facade for surtssource,rename
updated session handling code and adding and removing of listeners,inline
function rename,rename
refactor change build queue to be more general and move it to lib,push down
fcrepo fcrepo allow both parent child and child parent relationshipsrirelationshipresolver based on querying resource index child parent andparent child relationships specified in config melcoe pep xml test case addedto match hierarchical collection policy using range of relationships,push down
updated elastic mapping to include date field and make value a double field to work nice with kibana removed the alias and key constructor logic to provide all result and server fields as separate fields in the elastic mapping this makes it easier to filter and search for values,inline
finalized sync async gae implementation with query batch lots of code re organized finalized sync jdbc implementation with query batch lots of code re organized moved all static functions in static class containers jdbc async is not yet implemented some batch functions update are not yet implemented added lots of unit tests,move
further background package refactoring introduce checking for failed transactions and delayed removes handling false stale reads on the same key updated within a single transaction moved a part of logic into dedicated failureholder stressorrecordnotifier classes fixed faulty node indices renaming,move
extensive refactor of the entire upload codebase to assist with code cleanliness and pave the way for further work publisher specific code has been refactored extensively instead of single generator passing around publisher config factory each publisher has its own generators for each type of element this improves testability and separates concerns version and ondemand generation has been improved now all generators are generating versions ondemands based upon the ids produced by the respective idgenerator all configuration switching has been removed from the tvanytimefeedsmodule as this has no upload code so should be enabled all the time chunk size has been removed as it is not being used,push down
renamed certtype to keystoretype,rename
backwardparser fixed,push down
open hudson ucm implement scm new polling logic to support rebases better a bit of refactoring refining some edge cases no load rule git svn id c de d a be ed b c a,pull up
many refactorings always use dyn getprop for scope resolution extracted hasownproperty helper removing all the dynjs scope proprietary calls,extract
refactor copied code from cpdreport and pmdreport into a common base class oh the irony git svn id f bb ffa edef ,pull up
addition of on demand retrieval of service proxies via getremoteservicereferences targetid interface filter for bug ,extract
 asynchronous cache exec interceptor with caching support for streamed exchanges removed incomplete response checks as response integrity is enforced in the transport layer async cache re validation is currently broken in the classic and unsuppoted in the async implementations,pull up
remove the possibility for metermetric instances with arbitrary intervals,inline
api moved isnewobject to erxeocontrolutilities,move
refactored mouse clicks,move
extracted methods,extract
solved ticket and moved remaing date caster method in class caster to datecaster,move
the big clean up remove modular update copyright quality pass,push down
first batch of refactoring,pull up
refactor rename package,rename
split qtixmlreader up into a more general class and moved things around a bit,move
actor port and source hierarchy refactored,inline
rename ignore to ignorecheck based on post submission api review discussion created by moe moe migrated revid ,rename
improved handling of boolean options and defaults refactored tests touse the command line injection pushed down schedulelogicimplementation to defaultschedulelogic and refactored for more detailedlogging,push down
major refactoring of extension point api classes addresses these bugs bug and extension points do not allow use of formalexpression types bug add support for endpoint objects and define extensions bug define target runtimes extension point and preference page this is not yet complete but wanted to save my work,inline
revert rttm started changes to tm simulation on working branch this reverts commit dc fa e a d c efb b bf d d ,inline
o refactoring move the downloading of tickets from trac to its own class git svn id f bb ffa edef ,move
added nodes to nimbusadmin which shows which vm ids are running on which nodes moved helpconfig to rmiconfig,pull up
split out into erxajaxcontext so you can extend without getting all of erxwocontext,pull up
refactored pdpmodel such that it allows to be decorated,push down
extracted updaterepository method to avoid copy pastegit svn id f bb ffa edef ,extract
renamed mixins to supertypes for backwards compatibility the old mixin methods are kept on the java api but have been deprecated the rest api still accepts mixins on input but always returns supertypes on output this is the only api incompatibility the mixin system fields for use in the indexer are also still supported but log deprecation warnings,rename
refactored filtercontrols moving some logic in the superclass,pull up
renamed ssl to tls and moved and updated docs,rename
marynode renamed to treenode some changes to bstnode signed off by viktor tomkoviƒç,rename
refactored kinding of names and namenodes,pull up
add cardreader functionality and tests fix header appending to respect api key vs auth token not both ,push down
rename percents percentiles to percentiles percentilevalues rename total to totaltime do validation for the percentiles parameter at construction time use two decimal places for formatting percentiles,rename
implement itagpriority and extractlimit parameters,extract
add findmissingmoves,pull up
removed some dummy code which is no longer required renamed an unittest class,rename
removes unused code,inline
resolved issue dirmina reduce unnecessary thread creation and destruction caused by idlestatuschecker idlestatuschecker is not a singleton anymore one abstractioservice has one idlestatuschecker thread an idlestatuschecker thread starts automatically when a new service is created and stops when the service is disposed git svn id f bb ffa edef ,push down
minor fiddles remove warnings improve error messages etc,inline
extract method getmetatags,extract
hv moving createannotationproxy to configuredconstraint,move
some refactoring to move common functionality into our utility class,move
jenaconnects moved truncate implementation to jenaconnect since all were the same also now activates listeners,move
added an actionmapper the plan is to make all actions package protected,extract
added georecord and refactored external type package after well known encoder decoder pattern,push down
o code refactoring o changed error message to debug o improved error messages git svn id f bb ffa edef ,extract
all escaping is done in limpopo now also renamed a method to be more descriptive about what it s doing,rename
fix bugs related to still using the ojbconcreteclass property to deal with inheritance in the domain model projects that rely on that property and that need the old behavior i believe that s only the fenix web app should use the fenixdomainmodelwithocc class when generating the domain change it in the dml generate xml file,push down
removed unnecessary special chars that do not need special handling and fixed failing tests,inline
consolidate senatesitedumpid class previously there were several types of senatesitedumpid that id ed several different types of dump each of these was reflected in an implementation of senatesitedumpid for simplicity s sake we reduced this to one single type of dump the year session dump this commit simplifies the senatesitedumpid class and all of its uses to only handle this one case remove senatesitedumpsessionid add dumptime and year fields to senatesitedumpid modify json parsing classes to read the year field instead of session to reflect changes in dump code remove range abstract method this was primarily used to get updates ranges and to get a reference date time the end of the date range the updates ranges are no longer used and the reference date time can be determined by the dumptime field,pull up
extract the writeobject method from writeextras,extract
small refactoring of ode system tests,pull up
introduce querymap and encoded variant the existing version was very broken this standardizes behavior under two new annotations which define how they apply to the url properly,inline
change archiving plugins to use a shred archive configuration git svn id plugins f bb ffa edef ,inline
paxrunner rename options useoriginalurls to keeporiginalurls git svn id b a c ae a bc d a bd,rename
sgf added basic lookup factory bean refactored existing schema added namespace parsers added integration tests,pull up
tfj adding site streams example simplified userstream example,inline
newtools moved callgraph dump methods to common added target method callgraph dump option to wcet tool bugfixes for bytecode size calculation,move
rename vars and methods to match their meaning,rename
wcet move some utilities to miscutils fix minor bug in report generation,move
partially moved icalendar to separate package,pull up
renaming refactor on deserialization related code in abstractaction class method convertjsonstringtomapobject string jsontxt is now called parseresponsebody string responsebody in action interface and in several other classes renamed argument names containing json to responsebody,rename
trying to fix bug that is not showing locally,push down
refactor client into twilioclient and extend it for subdomains,pull up
refactor extract writenumberarray method,extract
added additionaljmxobjects interface removed protocol printstats moved a number of stats related attributes from tp to msgstats,move
indexerconf move the active behavior more specificaly the value eval method out of the indexerconf model and into a new class valueevaluator this way the indexermodel becomes pure configuration data and important indexer behavior like blob extraction is not burried deep down into some indexerconf class this also enables but not done yet to separate out the indexerconf from the indexer and make it usuable by the indexermodel tools to validate the correctness of the indexerconf git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,move
cleaned up runmanager and generationmanager,inline
remove sync check in the local listeners postponed to next cellar release git svn id f bb ffa edef ,push down
a few small refactors in rdfgenerator moving a couple common methods into bean reflect util in an effort to make rdfgenerator a little more manageable,move
removed cruft from basicpanel turned of incremental layout and lazy images by default issue number obtained from submitted by reviewed by,pull up
created ajaxseleniumproxy for obtaining ajaxselenium thread local context moved unsupported selenium api methods from typedselenium to unsupportedtypedselenium,push down
 rename lombok integration test classes,rename
refactored command to add abstractcommand completed gatewaycommand with appropriate tests,pull up
refactor joglrenderervbo and vbodata joglrenderervbo is now abstract with two implementations joglrenderervbofixedfunction and joglrenderervboshader same for vbodata,push down
change configuration format to get rid of settings on outputwriters instead be explicit about settings for each output writer this should allow to simplify quite a bit the code related to settings have outputwriter self document their options well you still have to look at the code while the code compiles and should be iso functional this refactoring is not completed yet only baseoutputwriter has been refactored with impacts on others classes more work needs to be performed the refactoring is backward compatible this introduces a bit too much work in the constructor which is not terribly readable partly that s the price to pay for backward compatibility partly this could be cleaned up and abstracted away,push down
rf changes plugin lifecycle,inline
nodegroup refactoring almost complete,push down
separated out the base mavenrepository class to enable subtyping git svn id svn anonsvn hudson labs org trunk hudson backend update center f fa df aa b e d,push down
delaymean and delayvar were moved to the abstract protocol,move
renamed condition to supplier,rename
biserver database tables data source in modeler need ability to add same column twice rename each with different names and set different aggregations modified the availablefields object to contain iphysicalcolumns rather than logicalcolumns now the conversion to logicalcolumn happens when measures levels or fields are added to the model or when the workspace is populated from a domain object,rename
rename to filter type,rename
renamed getter according to class name,rename
solder add ability to get only writable properties to propertyquery,extract
update creation of resultset proxy use factory resultsetproxylogicfactory to create logic for resultset proxy rename existing proxy logic to repeatablereadresultsetproxylogic add simpleresultsetproxylogic add proxyconfig class to represent all proxy related configurations datasource name listeners proxy factory connection id manager proxydatasourcebuilder proxyresultset takes resultsetproxylogicfactory,push down
resolved issue dirmina make iofuture and its subclasses interfaces changed iofuture and its subclasses into interfaces extracted their implementations to common support defaultxxxfuture iofilter writerequest unused future directly implements writefuture now this change broke streamwriterfiltertest i fixed it too git svn id f bb ffa edef ,push down
refactor to support id types other than objectid that implicitly map to string,inline
move javax usb and native stuff into their own packages the libusb wrapper of usb java is now considered to be the central main part of usb java and the usb java project itself only contains the java code of this library the javax usb stuff is moved into the usb java javax project and the native jni code is moved into the libusb java project binary files are no longer present as java resources instead they are hopefully automatically generated and published as separate jar files and maven dependencies so they can be easily and selectively included into a project,move
 moved filtering into helper class propertiesfilterer with test,move
refactoring commandline interface,inline
removing redundant functions in extgraph duplicated by sesame s graphutil movign implementations of util methods to graphs extgraph now an interface extgraphimpl the implementation calls are jsut delegated to graphs adding two new graph extensions which extgraph implements iograph for rio util methods and functionalgraph for supporting guava functional classes renaming statementfunctions to statements adding additional functional utility methods on there adding testgraphs for testing the main graphs funcionality generally cleaning up extgraph extgraphimpl,push down
in order to develop invenio refactored aqp to be abstract,push down
renamed util method name to better match the intent git svn id f bb ffa edef ,rename
decoderecordpayload to decodepayload renamed handover test,rename
katta removed i prefix for interfaces not a java convention,push down
reuse tostring method between oauth and oauth and move getlocalefromstring helper method,pull up
changed tests to use the modified channeltestbase,inline
fixed issue dirmina mark and autoexpand made sure mark is preserved after expansion refactored bytebuffer implementation most base implementation has been extracted into basebytebuffer to remove code duplication added bytebuffer capacity git svn id f bb ffa edef ,pull up
wcet ipet use presolver good speedup add support for solving the relaxed problem,extract
rename test file to be more general,rename
rename matches to querytask,rename
moving the module configuration to the modules themselves git svn id c b a b b d e ,inline
add uniqueid uidtolong and longtouid helper methods for converting uids moved addid from tsdbquery to uniqueid addidtoregexp as i need it elsewhere renamed uniqueid gettagpairsfromtsuid to gettagsfromtsuid since that s what the method actually did it didn t return pairs rather individual uids also removed the uid widths from gettagsfromtsuid since they re now statically accessible from the tsdb class modified all callers as well add uniqueid gettagpairsfromtsuid with string and byte parameters that does what it s supposed to returns pairs of tag uids from a tsuid signed off by chris larsen,rename
added a first version of namespace browser really basic but already does remote consulting of clojure environment corrected label for add remove clojure nature corrected add remove clojure nature code that broke when installing clojure lib hg rename src clojuredev test clj src clojuredev debug test clj extra convert revision svn a d ee d e a c c fdd ec c clojuredev trunk ,rename
b refactoring categories added prefixcolumnmap delimiter ascategoryset parameters to jdbcfeedsource jdbcfeedpublisher to we can configure our categories through spring moved category refactoring code into atom hopper project no more cloudfeeds atomhopper,move
code reorganized wip doesn t compile timerservice separated as a package all lock free queues and unsafe moved to kilim concurrent,pull up
added function executions element to gfe data namespace plus more cleanup,extract
b categories refactoring this pr maintains backward compatibility for the jdbc adapter added abstractjdbcsource abstractjdbcpublisher to enable extending the basic jdbc adapter functions updated searchtosqlconverter to allow mapping specific category prefixes to specific sql columns in the datastore,pull up
cleaned up nexus and newick output writers,inline
rename password to remotepassword and username to remoteusername to more closely match rest api names,rename
hv moved assertsize to testutil,move
more refactoring git svn id baf d a c fc e d,pull up
add optional parameter source to get table cell value keyword when source is set to model text extractor won t try to get text from cell s component firsts and will get it directly from table model when source is set to auto default old strategy is used i e extractor will first try to extract text from cell s component and then if this fails it will get it from table model,extract
encapsulate matcher create in factory method and implement the matcher logic in a matcherimpl subclass,push down
renamed startat and endat to startsat and endsat in project java engine ,rename
numerous bugfixes improved xpath rule creation validation specified default user specified priority names renamed remaining msgkey prefixed string keys new reset to default values in rule properties menu single item for now new pmd name column in marker prefs table new column tooltips for same commented out original pmd preferences view from main preference tree repositioned language min max priority fields updated to latest pmd core git svn id baf d a c fc e d,rename
rename extended to extension a previous commit changed most references extended to extension since the message pack spec calls them extension type this converts a few missed references to extension,rename
adding intforkeywithdefault,extract
some tests were incorrectly setup,inline
 added several new shell commands moved the command output writer into the commands no more using system out moved the brms code into a shell command,move
xhr transport refactoring and buffer alloc optimization,pull up
luka added smoke test to change password and verify all validation cases,extract
jcbc rename subdoc builder doxxx methods to execute motivation the original rfc method name for execution of a builder is do this is incompatible eg with java being a keyword most other sdks where this is also incompatible elected to name the method execute instead since it is expected that the rfc be amended towards renaming execute the java naming of domutate and dolookup can be harmonized with the other sdks modifications domutate and dolookup are now all renamed execute results the execution methods of the builders are the same across sdks where do cannot be a method name change id ic efa dd a c b ea aea a reviewed on tested by simon basl√© reviewed by michael nitschinger,rename
first stab at refactoring maven archiver to provide file directory permissions in a more general way in the api this is necessary to make mng easier o moved unixstat a package higher in the tree it was not only used by ziparchiver but also by tararchiver now it s used in abstractarchiver o moved the ziparchiver default file dir permissions constants to abstractarchiver o deprecated some methods in ziparchiver that are now in abstractarchiver different name backwards compatible ofcourse o updated tararchiver to synchronize taroptions dir file mode with the abstractarchiver s versions made them deprecated o added junit tests for ziparchiver and tararchiver to test various permissions o fixed coding style on some modified parts o removed some unused imports fields local vars o fixed some potential bugs most notably no exceptions thrown if new exception add throw and a case where the wrong key was used tested against m bootstrap,move
move changeactiontest dotest to vimtestcase this method is convenient in other tests as well,pull up
more refactoring of symbol table getting nicer all the time and more tests too git svn id baf d a c fc e d,push down
move the last import information directly in the repository helper those method are generic enough so the implementation of mercurial or bazaar import method should be easier the save method could also be pushed into the helper only the file location could be specific to the repository type,push down
work moved to point where reflex tests are created,move
wip adding caret movement history to sourcecodeview,move
fixed several issues in html report forced showing iterations using linechart deviationrenderer for tests with iterations and barchart statisticalrenderer for the ones without,push down
clean up code a little git svn id f bb ffa edef ,inline
removed util ,pull up
rename reportasviolationfromcomposingconstraint to reportasviolationfromcompositeconstraint git svn id b cb b d ca fae ebed b ,rename
sc qcadoo add views for pdf,extract
sweeping cleanups to reduce tangles and improve the code,inline
removing messagingtargetinterceptor and adding new mechanism for initializing interceptors and contributors,pull up
refactored tests to make them more readable,inline
upgrade to jackson and rename duplicate method names,rename
some refactors git svn id b e d d ab bb d b,push down
added datagramserviceconfig moved ioserviceconfig sessionrecycler to datagramserviceconfig git svn id f bb ffa edef ,move
tweaked how the bill cache stores and evicts elements reworked the elastic bill search layer,push down
move video info to mediaentity from extendedmediaentity for extended tweet entities media and entities on dms,pull up
fix javacast use new log method for jdk some methods of abstractlog are removed in jdk fix javacast jdk plus to use new log methods added from jdk ,push down
refactoring community server operations,pull up
mods to reflect client account chooser protocol and refactoring,push down
nxcm create the documentroutingengineservice add test,extract
this should be the last big refactoring before guice final restored bob s binding interfaces linkedbinding instancebinding etc moved binding implementation classes to internal so the implementations could be shared by both injector bindings and module bindings added hasdependencies interface implemented it for providermethods cleaned up our internal model of scopes to use the scoping class which is like scope annotation instance eager lazy git svn id d f a b b b d aecad e,move
refactored userinfo serializer,move
move copypoms property from abstractfromdependenciesmojo to copydependenciesmojogit svn id f bb ffa edef ,push down
introduced generic abstractproperty engine existing property now extends abstractproperty with generic type string,pull up
rename set method,rename
added selectpipe and renamed objectfilter step to discard,rename
command rename execute to createrequest for consistency the method previously called execute has been renamed to createrequest since in fact it just returns the openstackrequest to be executed signed off by federico simoncelli,rename
renamed static method name to parse drops sets,rename
support nested list and longs to eval with pipeline add binary eval commands to pipeline apply nested list and longs to eval evalsha with pipeline add binary eval evalsha commands to pipeline define interfaces to have binary eval commands binaryscriptingcommandspipeline scriptingcommandspipeline add unit tests for binary eval evalsha with pipeline fix some warnings from scriptingcommandstest,push down
refactor query and creation fetcher,pull up
small refactoring,inline
added a revertablemdiframe which is now extended by resourceframe gamesettingsframe gameinformationframe actionframe and codeframe although the latter two are updatable only revert is discard gamesettings and gameinformation now use property enumerations like every other resource which allows them to be fully revertable updated references everywhere including a few strings tested ui behavior but not file behavior as long as i didn t make any typos this should not have broken that git svn id f f bc e be cd ,pull up
changing reference lookup and moving it to the first position,pull up
move people field from item to description in simple model,pull up
rewrite substitution resolver use explicit immutable resolvesource the immediate motivation here was to fix which this does but in this commit a couple of existing test cases are broken in a way which seems to relate to order of resolution and resolve memoization so we need to layer on to this commit better solutions for caching and cycle detection to get rid of yet more mutable state the previous setup used a side effect based lookup table of replacement values to conceptually modify the tree without actually modifying it unfortunately that setup was hacky and hard to reason about and apparently broken in cases such as this new setup actually creates a modified tree and passes it around explicitly instead of inside resolvecontext in this commit resolvecontext still unfortunately has a mutable cache and a mutable table of cycle markers both of those in theory could also be replaced by simply modifying the tree the main downside to this commit and to cleaning up the remaining mutable state is that we re using java collections which have to be copied wholesale for every mutation they are not persistent functional data structures this will have an unknown performance impact though in a sane world config resolve is not a bottleneck in anyone s production app some other details of this commit resolve concerns removed from peekpath in abstractconfigobject and relocated into resolvesource recursive resolution removed from lookupsubst and moved to configreference new hasdescendant method used only in debug tracing it is grossly inefficient to ever call this full tree traversal new replacechild method is inefficient due to java collections but could in theory be made efficient most complexity relates to always knowing the parent of a node that we might have to replace so we can walk up replacing it in its ancestor chain todo in subsequent commits fix failing test cases we cannot replacechild if we are a descendant of configconcatenation but we probably need to be able to consider fix this instead of memoizing resolve results in a hash table just continuously modify the resolvesource to have the most recent results instead of using the cycle markers table change the configreference to a cycle detector value,extract
minor cleanup,extract
renamed ioid to idpro,rename
docs and reorg for bean utilities javadoc refdoc rename classes to accurately reflect purpose move injectable method to reflection flesh out the builders package info,move
extended service to have debug methods create ideligateworkbench part to reduce duplication of methods,inline
reworked access tag handling should now do the right thing for combinations of access tags also removed built in handling of footway cycleway etc and now relies on style file adding appropriate tags git svn id d f ee a dfeeeb ,extract
faces develop jsf jsf compatibility layer moved methods from compatimpl to baseimpl since they were jsf x related,pull up
renamed isoccupied point point to hasroaduseron point point,rename
new preference panel updates revised rule columns new compact colour coded regex filter column reworked property tab resizing refactored editors into separate package git svn id baf d a c fc e d,push down
fixes for ispn this commit adds support for the new timeout api added in infinispan and adds error handling for exceptions thrown from mapreducecapable executemapreducetask,extract
rename setchecked setcheckstate in controltree,rename
additions and changes for addressing bug ,push down
api change rename command execute to command perform fix ,rename
allow use of bulkdata with additinal data types fix jsonwriter creates invalid json datafragment element fix dicominputstream change attributes treated as bulkdata by default fix ,push down
unit test refactoring,pull up
refactor jwt code and add taskroutercapability,pull up
rearranged some file related methods extracted little endian methods from gmstreamencoder to streamencoder i chose not to do this for gsdecoder due to the obfuscation table maybe once we add more gm support we ll revise this model gse now extends se and holds some resource specific methods moved some lower level methods from gmfilewriter to gse likewise for gmfilereader and gsdecoder improved read and readd to use byte arrays rather than individual reads git svn id f f bc e be cd ,extract
simplify the serilizer interface,inline
redesigned scopes to enable custom implementations renamed dependencyexception to configurationexception cleaned up container s interface it now returns a factory instead of a direct instance so clients don t have to keep passing in the paramters resulting in a map lookup added support for injecting factory where t is any bound type git svn id guice googlecode com svn trunk d f a b b b d aecad e,rename
refactorings extract methods for movetreedocafter,extract
working on analysis examples intogen biomart source configuration fixed git svn id b f a e b ddf ,push down
removal of suspend resume stopprocess and startprocess publicly exposed methods with preference to use turnoff and turnon the latter are safer to use as they better control the proper order in which the former methods are executed,inline
extract persister for triggers and jobs also move most of locking to locksdao,move
renamed pad to rightjustify,rename
its own module,move
added namenextelement feature,extract
moved priority and lifetime fields to recording java,push down
pmtable renamed getselectedrow to getcurrentrowpm the name does better match for the related master details context,rename
do rename test with just basename use getrenamedbasename for testing make expectation be solely basename without suffix don t check suffix just basename in fileepisodetest change the expected replacement to not include the filename suffix e g instead of expecting the filename to be modern family s e under pressure mp expect the basename to be modern family s e under pressure and change the framework to return the basename to match,rename
loader dialog added z and t range selection added channel selection added resolution level selection improved preview loading saver dialog removed z and t range selection better to do adjust range before added saveroptionpanel for easier setting definition setting are now preserved in xml preferences display warning if output format can loss information conversion is now automatically done loader added checkopening method to check we have enough resource to open an image added methods to load only sub part z t and c and sub resolution of the image fixed issues while using importer on non image files many changes in general new methods refactoring bio format importer added multi thread support added tile loading for large image and sub resolution loading better thumbnail loading saver added many new methods to check compatibility image writing compatiblity reverted channel combination for channels image saving in tif format better for rgb image preview methods doing z t range saving operation are now deprecated better to do it before added method getcompatiblesequenceforwriter to automatically convert a sequence so it can be save by a given writer possible data loss roi d added add exclusiveadd intersects and subtract operations roiutil added split roi line d to cut split a roi from a given line d gui reorganized file roi tools menu added open region command to load a specific region of an image at a given resolution level added roi d to d stack conversion added roi shape to mask conversion added roi mask to shape conversion added roi component separation tool added roi line cutter tool sequence added position x y z information metadata added origin resolution xy region z range t range channel information when loading sub part of an image added getoutputbasename getoutputextension and getoutputfilename to obtain wanted output filename given origin informations trying to load too large array of data throw a toolargearrayexception exception sequencepersistent added isvalidxmlpersitence methods sequenceutil sequence merging operation is now possible with sequence of different type fixed possible memory leak issues with some methods better colormap metadata preservation added getoriginpoint convertpoint for point position conversion operation added getoriginrectangle convertrectangle for rectangle position conversion operation abstractimageprovider pluginsequencefileimporter pluginsequenceidimporter improved default getthumbnail implementation added getimagebytile method to load an image by tile useful for large image icybufferedimage trying to load too large array of data throw a toolargearrayexception exception added copydata array method to copy data from an array icybufferedimageutil added fast downscaleby methods to quickly downscale image by a factor of systemutil reworked a bit memory methods they should return more accurate values getjavafreememory return the total amount of free memory available to the jvm getjavamaxmemory return the maximum amount of memory the jvm will attempt to use getjavaallocatedmemory return the memory currently allocated by the jvm getjavausedmemory return an estimation of the memory currently used by the jvm getjavatotalmemory is deprecated replaced by getjavaallocatedmemory roidescriptor added getdescriptor descriptors descriptorid method metadatautil replaced omexmlmetadataimpl class by omexmlmetadata more generic check if that bring issue imagejutil added converttoicybufferedimage method to convert a single image from an imageplus to an icybufferedimage polygon d polygon d polyline d fixed adding new point on an empty polygon polyline improved memory usage estimation in memory monitor defaultsequenceedit default undo operation on sequence also preserve roi and overlays now reference only added rectangle dutil and line dutil classes many bug fixes several tweaks and optimizations some code cleanup,inline
a bug fix which caused improper termination fixed datasourcecomponents do not anymore need to have schema information all of these are moved to sql generator part,move
refactor to use interfaces and abstract classes where possible,push down
some cleanup and renamed keystore to truststore,rename
removed duplicate method implementations,pull up
add better support for keypath visibility properties convert no details eo s to id pk format instead of pk delegate attempt to load default rest delegate names restentitydelegate to make registration easier put request handler session fixes from ajax s jsonrequesthandler into restrequesthandler added some convenience registration methods to erxrestrequesthandler added some misc javadoc ified moved some generic rendering methods up higher to support generating alternative output formats,pull up
added move copy operation for requirement mappings,pull up
minor message handling cleanup,push down
added thread pool to jetty server,extract
simplification of jmx support resourcedmbean fluent methods are now also supported jira ,inline
fixes for inheritance related bugs refactoring,push down
update to probably gonna move to github permanently now,move
refactoring for idea plugin extract interface from compilelog so that it can be used as error and warning callback interface git p depot paths coremedia jangaroo change ,push down
minstall add installatend option for multimodule projects git svn id f bb ffa edef ,extract
profiles refactored shared elements in abstractprofile warc refers to date now set as long and correctly formated in getwarcheaders,pull up
more fixes some tests simply moved to java module,move
dheeru pulling up common functionality open close container from pre treatment in treatment controllers to base class,pull up
exojcr clean up tests,pull up
mega cleanup patch remove obsolete classes and packages move new classes to the more appropriate packages change the bin nutch script appropriately change the protocol api in preparation for patches implementing flexible re fetch schedules please report any errors if any git svn id f bb ffa edef ,move
renamed throwing to matches,rename
permissionentity refactoring moved all regexp crap into separate class,move
make configfunction code easier to use instance state and the init method previously there was all kinds of complex state in the configfunction instance now all required arguments are provided in the constructor of a configfunction the init method is gone error handling previously if the init method threw an invalidconfigexception the instance would be kept now such invalid instances are no longer kept an instance of erroredfunction is used instead the geterror and isvalid methods have been removed reflection code there s still some relfection code involved as we need a way to go from for example plantgen class to a plantgen instance if we would use java we could use the newer plantgen new syntax to get a reference to the constructor of plantgen makestring the configfunction makestring method has been renamed to the more conventional tostring the configfunction write wrapper method has been removed getholdertype this method has been removed checking for the holder type now happens by checking for which constructors exist,rename
emailplt move caching to service layer redo dao interface,move
renamed characterparser is to characterparser of for consistency,rename
extracted archivebucketendpoint out of bucketarchiverrest bucketarchiverrest is too large henceth extraction has begun,extract
geom renames codec classes methods so abbreviations are in camelcase,rename
refactor deprecated mavenpluginactivator getplexuscontainer signed off by igor fedorenko,extract
fixed layout in gmobjectframe and timelineframe using grouplayout manager and extracted actionlist and related code to separate classes see also r and r git svn id f f bc e be cd ,extract
hv moving group conversion check into groupconversionhelper,move
refactoring pep impls to support fesl pep,pull up
increased stability in the assertcurrentactivity methods as well as in pressspinneritem also moved waitforactivity to the waiter class and some other minor refactoring,move
add tests for proxies hook feature and cleanup some code,inline
fixed message id in topics added method inheritance test refactored out nevadoqueueconnection and nevadotopicconnection,inline
massive rework to add more tests and cleaner implementation,inline
tou function rename,rename
karaf refactore of the config layer karaf remove property filtering git svn id f bb ffa edef ,inline
typed gremlinpipeline and accorded changes from pipes,inline
renamed token variable to requesttoken,rename
cache templates code doc restructuring some code,inline
major refactoring simplified ant parser generalized folding logic to work with tag def initions from php sources implemented native tag filter function index ing on a project basis,inline
add executemoverunnertest sub method,extract
issue use an other solution with the reflection api instead of the createcopy method and rename the method getdisplayclass to getdisplay,rename
proceed to create the new layout for the toolbargroupdodckstation new version reorganization of the hierachy of the classes begin to implement the toolbargroupdockstation class,push down
the way ierxrestdelegates are implemented is totally crazy get rid of that and move to a model where the delegate is always looked up introduce an erxrestcontext that can go all the way down to the json formatters so you can configure date formats per request write some test cases it s used by several apps now and really should have coverage fix a bunch of weird edge cases that have come up,move
 moving joda code from the oracle extension to the oracle joda time extension,move
improve resources management,push down
v vandana removed a few validators and moved the logic to the requests and utils,move
add gcm buffer incl test,extract
setof was misinterpreted renamed as distinctall ,rename
backlog rename cleanup model annotation properties,push down
bpmn export added mechanism to extend every element in schema valid way e g see signavio extension elements export of linked models added call element classes git svn id core components googlecode com svn trunk ed a d a a b bb ,pull up
moved the flatten method from abstractbranchformula to formula,inline
add a check to the tests for hg actually being available on some environments it s possible to have hg configured properly in the path for command line use but not in graphical applications such as most ides mac os x is an example of one such environment in these cases the test should now fail with a more informative message rather than with a generic no such file or directory message that doesn t explain what the problem is,extract
scribble further refactoring to simplify api,inline
removed guava library replaced cache with simple domain specific implementation,inline
unify and rename execute and query methods,rename
massive speedup in the syntax hilighter needs testing to be sure we havent missed any cases remove the write action from the folding builder doesnt seem to be needed,push down
allow the reloading of bookmetadata with new method reload renamed filter and filterfactory to sourcefilter and sourcefilterfactory to allow them to be used in the same context as o c c util filter modified swordabstractinstaller to convert mods d tar gz to mods d zip,rename
first pass at major config refactoring,push down
refactoring,extract
made signal height and alignment configurable per channel also moved some properties to the uimanager for easier configuration of them,move
added apache commons net lib for laos tftp laos tftp support untested added libinfo class with version and driver information added moved junit tests old and stupid from visicut added getdrivername method to lasercutter interface changed epilogcutter splittet into epilogzing and epiloghelix,push down
clarification of the matrix assignment package remove methods getnumberofworkersrows and getnumberofworkerscolumns of the matrixassignment interface they were only present for printing and they made no sense in that a partition can have distinct number of workers on different rows for example in modification to allow the printing of a matrixassignment the method tostring has been overloaded in both optimalpartition and equimatrixassignment the method verifyvalidity in partition has been rename to valid to be java friendly the parameter of the method getregions has been changed from issrelation to dimension to be consistent with the implemented interface some comments have been added to the matrixmapping package,rename
move methods in test classes,pull up
core workspace and project management work some imatrix modifications some names refactoring git svn id b f a e b ddf ,push down
bval rename constraint related classes to make them more readable check the spec applied to the ri as well git svn id b cb b d ca fae ebed b ,rename
inlined the weakreference to ease following the test,inline
add support for explicit accesstype on types,extract
renamed copyfromtempfile copyfromtempfile,rename
fix npe in xclassregexrule and added configuration celements validation xclassregex ignoreinvalidkey,extract
first step towards a new settings system summary got rid of the settings enum and replaced it by contants this allows for type safety settings are now responsible for reading and writing their values instead of tons of overloaded methods in configfile added a few tests the setting class each setting type now extends setting the type parameter t is the type of the value of the setting like string integer boolean list or even surfacegenerator each setting implements the methods t read string and string write t there s also a method called t getdefaultvalue configfile changes there are now two method left that read settings t readsettings setting setting and another one that allows to override the default value from setting getdefaultvalue t readsettings settings setting t defaultvalue this is used by biomeconfigs there is only one method left that writes settings void writevalue setting setting t value it simply calls the write method on the setting and writes the result to a file the settings factory class settings acts as a factory for creating settings worldstandardvalues biomestandardvalues etc now extend this class instead of implementing multitypedsetting that has been removed the classes are no longer an enum enums force all values to have the same type now the settings type are much more explicit the reason for creating factory methods instead of calling the constructor is that we may want to keep track of all settings in the future the old settings enum provided this functionality and the factory methods allow us to do so too variable names constants are now uppercase like this variables are now camelcase in the settings file you will still see settingslikethis this can be done now that variable names and setting names have been split value enums like terrainmode haven t been split yet so they keep their variable names likethis for now next steps move the file reading writing logic out of configfile so that settings can be read from different sources like mojang s new settings format used in the customized world type remove all unused settings this includes all structure settings of bo support removed in tc replaced with bo structures in tc and the two color settings from the worldconfig support removed in tc now handled by biomes,move
include rentals eomodel in eogen configuration refactor eos from the rentals model to use superclass methods where possible add ercoreuserinterface implementation to user entity and use this instead of the newly added appuser entity remove appuser entity from the movies model and delete the related migration,pull up
refactoring propper support for variables and function calls variable function path libs are now in seporate package refactored moving to context step by step,push down
rf add method for define pagesize in report,extract
refactoring for a fesl auth module,push down
jcbc drop the named prefix in primary index management motivation method to deal with named primary indexes in previous jcbc change had the named prefix eg createnamedprimaryindex which is redundant and can be dropped these methods then becoming simple overloads of the existing xxxprimaryindex methods modification renamed createnamedprimaryindex methods to createprimaryindex overload and dropnamedprimaryindex to dropprimaryindex results dealing with default named or custom named primary indexes is now just done through overloaded methods simplifying the api change id i d a ed d d a b a a ed aa reviewed on tested by simon basl√© reviewed by michael nitschinger,rename
fix visitor the jjtaccept methods have to be in theconcrete subclasses,push down
rename,rename
generalize ruleviolation treatment add abstract base class and language specific rule violation implementations to be consistent with other pmd code renamed iruleviolation to ruleviolation i never liked this hungarian notation crap in java code anyway extracted the ruleviolationcomparator as a standalone class and fixed it s implementation was seriously broken so the ruleviolation comparison is very well defined changed report to use a list of violations internally instead of a set since the change to the ruleviolationcomparator was causing truly duplicate ruleviolations to be dropped git svn id baf d a c fc e d,push down
split asdoc and coverage reports into their own package and introduced some code reuse,push down
rename methods in jsset,rename
added decoder exception moved from primitive to object primitive for geo record,move
add implementation of security role hierarchy in both remote and local security,extract
refactor heatmapcoloredlabelsdrawer and header paint selected and lead after cell painting in a single place fix matrixlayers sort order on load from file some sort improvements,extract
removing params and body from get and delete requests,push down
postcomponent rewritten as a widget,inline
nextfreedocnamecommand refactored into nextfreedocservice and improved performance,move
refactored all graph related classes into rinde sim core graph package removed pathfinder class moved functionality to graphs class,move
accumulo checkstyle cleanup and enforcement for the accumulo binding again a lot of whitespace changes and the normal checkstyle type errors items of note deprecated queueelement since it is not used moved some of the exception handling to common locations to remove empty catch blocks,move
refactored all graph related classes into rinde sim core graph package removed pathfinder class moved functionality to graphs class,move
integrate the fieldscopelogic classes with the new prototruthmessagedifferencer does not yet integrate these with the actual subject code relnotes n a created by moe moe migrated revid ,push down
refactoring git svn id baf d a c fc e d,inline
adds mysql wkt wkb codec test cases refactors the codec unit tests,pull up
cleanup locking key paths now work as expected,inline
ensure that player s are properly removed when they log out,pull up
mant ant clean should not delete build xml o updated solution after dicussion on irc o added its git svn id f bb ffa edef ,inline
push array equality checking up into subject the main results assertthat array isequalto otherarray now compares array contents not array identity even when the input isn t statically known to be an array the failure messages for arrays now look more like the standard failure messages failure messages for all types include the index of the first mismatch this also incidentally fixes a tiny bug l most of the new code in subject is copied from primitivebytearraysubject base primitivedoublearraysubject doublearrayasstring primitivefloatarraysubject floatarrayasstring objectarraysubject stringableiterable stringify checkarrayequalsrecursive with minor modifications to use the double byte methodsbut there are some changes actualequals is now describedifference which returns a string rather than a boolean i use that string to display the index at which arrays differ and to include both the and formats for byte arrays i ve added formatactualorexpected which is like actualcustomstringrepresentation but is applied to the expected value as well as the actual i ve added actualcustomstringrepresentationforpackagememberstocall which i ve just realized our the float double subjects iterablesubjectwithinheritedtostring can call instead of reimplementing it fixes made assertthat array isequalto otherarray compare arrays contents not array identity even when the input wasn t statically known to be an array tweaked the format of array failure messages created by moe ,pull up
paxrunner filter duplicates in bundles to be provisioned also rename provision bundlereference to scannedbundle as the name conflicts with platform bundlereference git svn id b a c ae a bc d a bd,rename
sync optimize reverts back to using syncconfigparser for params to ensure that all defaults get set correctly squashed commits squashed commits d f sync optimize captures transfer rate in the synctestevent and provides a tostring to print status squashed commits squashed commits cf e sync optimize adds test for synctester,extract
o moved towards a single wrapper for all properties wrapping needs,move
add support for all minecraft items lore fireworks written books custom names etc move composites yml to the database,move
extracted method to find next downstream traffic light,extract
synchronised check for adding submission to submissions being processed set,extract
mcheckstyle refactoring to prevent duplicate codes git svn id f bb ffa edef ,inline
childrennumbercomparator extracted from domdifferenceengine,extract
misc logging cleanup refactoring crawlerjournal java improve exception logging combine writeline methods to use varargs frontierjournal java improve exception logging archiveutils java replace ignored count parameter with meaingful boolean one crawluri java use updated archiveutils method,inline
some refactoring of router classes,pull up
moved screen capture code to separate class created adapter for to deal with status codes,move
simplify all get methods,inline
simplified creation of temporary files merged per file temporary directory holder logic with the connection temporary directory logic shortened the names of the generated temporary files,inline
removing property duplicationmethodproperty and fieldproperty have a common superclass but had duplicated code between them this commit reduces that duplication and pushes common code into the superclass while at the same time adding some additional tests for the functionality,pull up
rf add unique copyable enforcements some clean up in fieldtype hierarchy,inline
more refactoring of simulation specification classes,move
added getindexedscript action refactored indexedscript actions to use a common abstract class refactored indexedscript action integration tests to use es client for prepare and confirm actions,pull up
removed the beanshell provide recompilable support for tabbed or splitpane layout of requests and responses use preferences rather than properties remember the preferred size and position of the frame,inline
merging select changes from trunk into branch avoiding all work around wagon manager r git svn id x f bb ffa edef ,push down
refactoring move private method linescuteachother from multipolygonrelation into utils no functional change git svn id d f ee a dfeeeb ,move
removed duplicate code by extracting a method for the parsing of the event line e,extract
make class more extendable added additional docs,extract
cleanup and thread view updates,pull up
 renamed packageoffer to packageexportdescription,rename
sgf refactor function annotation configuration to be smarter in resolving apache geode objects on startup renames onmember onmembers onregion onserver and onservers executionbeandefinitionbuilder classes to functionexecutionbeandefinitionbuilder,rename
lots of refactoring moved unit tests around added support for object expansion additional code clean up,pull up
add full image support to channels refactor persistence of temporal fields move persistence methods from channel channelgrouptranslators to the temporaltitle imagetranslator clean up imports on several tests,move
eliminated deprecated class predef turned static methods into instance methods and moved them into class specification,move
extract setup of default into public static methodgit svn id f bb ffa edef ,extract
rearranged some file related methods extracted little endian methods from gmstreamencoder to streamencoder i chose not to do this for gsdecoder due to the obfuscation table maybe once we add more gm support we ll revise this model gse now extends se and holds some resource specific methods moved some lower level methods from gmfilewriter to gse likewise for gmfilereader and gsdecoder improved read and readd to use byte arrays rather than individual reads git svn id f f bc e be cd ,move
rhbz move method to parent class,pull up
major refactoring of crs package,push down
renamed anonymous address to local address fixed infinite loop a lock object is created inside the vmpipesessionimpl now git svn id f bb ffa edef ,rename
hv re establish constraintdefaccessor in order to keep constraintdef s fluent api clean by avoiding getter methods,push down
pr midea created separate goals for project module and workspace removed the unit test as it is deprecated with the current form of the plugin i ll be creating a new more improved set of unit tests anyway git svn id f bb ffa edef ,pull up
 moved following methods from user java to userwithstatus java getprofilebackgroundcolor getprofiletextcolor getprofilelinkcolor getprofilesidebarfillcolor getprofilesidebarbordercolor getfriendscount getfollowerscount getfavouritescount getstatusescount added some test cases git svn id b e d d ab bb d b,push down
rf move panels to cdk,move
moved resultoption handling to operationmetric,inline
rename registration messageconsumer signed off by julien viet,rename
simplified the expression hierarchy a bit,inline
continued front end refactoring,push down
made connection timeout and number of retries when creating a unique file name configurable cleaned up temporary file creation code by moving all the common logic to new baseoverthereconnection class this also means that localoverthereconnection no longer uses the overthere logic for temporary files but uses the standard java logic,push down
extract method finishandinjectmethod,extract
removed the aliasreplacingbeandefinitionparser class from the region bean definition parsing hierarchy moving the remaining methods getbeanclass getregionfactoryclass and issubregion to the abstractregionparser class modified clientregionparser to extends abstractregionparser directly and provide an supported doparseregion method since clientregionparser overrides doparse directly modified abstractregionparser class to extend org springframework beans factory xml abstractsinglebeandefinitionparser directly changing the overridden doparseinternal method from aliasreplacingbeandefinitionparser to the overridden to doparse method from abstractsinglebeandefintionparser,move
refactor to run the tests with when it makes sense fix related bugs in,push down
renamed methods,rename
hv removing some references to methodvalidator,inline
project global refactoring,push down
moved some code out of discardablenodecleaner and into various node classes git svn id baf d a c fc e d,push down
refactor await conditions into standalone objects this brings conditions from await into fluentwebelement and fluentlist objects and provides automated negation implementation using not keyword on those conditions objects,push down
refactor wait package to support message generation throw messageproxy,move
hv moving retrieval of annotation based constraint meta data from beanmetadataimpl to provider,move
renamed methods in featuremodelinfo interface and implenting classes added some javadoc for private methods,rename
the way ierxrestdelegates are implemented is totally crazy get rid of that and move to a model where the delegate is always looked up introduce an erxrestcontext that can go all the way down to the json formatters so you can configure date formats per request write some test cases it s used by several apps now and really should have coverage fix a bunch of weird edge cases that have come up,move
o refactoring move shared code to helper class git svn id f bb ffa edef ,move
moved children from function to node class,pull up
nxp formant rename,rename
efactored the derived artifact logic it has been pushed into the persistence manager now callers like the atom layer no longer need to do the derived artifact logic this allows derivers to participate in the same jcr session as the source artifact it also more easily allows derivers to modify the source artifact meta data from content e g setting the wsdl targetnamespace attribute,push down
ngrinder add user login plugin module fix plugin support error,extract
new files or files moved from other locations,inline
add vault support changed economyinterface to actually be a interface rather then abstract class removed economy system config option residence now will auto scan for economy systems on run prefering vault if found update version number to ,push down
nxp add abstractactivitypageprovider to be extended by pageprovider handling activities migrate json generation of mini messages into minimessagehelper,pull up
refactored modifiers to base protocoldecl and revised api gen to specify mpst explicitendpoint in initial state channel public constructor,pull up
refactor unsupported op exception to util class,move
make mongosplitter an abstract class move splitter implementations into subclasses,push down
plfeng call git commands directly from the mojo without scripts change the loop to be able able to commit per language rename startdr param to workingdir set default value for workingdir to target exoproject don t call mvm clean or redefine it in your settings our command line create workingdir if doesn t exist,rename
renamed mockdetector methods added spec,rename
fixes checks on empty or bad lines and actually removes keys on removekey thanks to nijiko for the update,inline
initial commit of inline content refactoring,inline
rename invocationarguments to preparedarguments,rename
faces move constants and most methods from com liferay faces util render rendererutil to liferay faces alloy jar,move
remove extendednegotiator and basicextendednegotiator move queryoption and storageoptions to org dcm che net,inline
split into extendedmediaentity,push down
renamed room properties to the more generic resources,rename
refactoring to support remote rsa manager change id ia fe f ecd cc fe a f ab d,move
refactor threadlocalcleanup and extract warningthreadlocalcleanup subclass ,extract
refactor cachekey make cachestorage generic add simplecachekey,push down
removing primitivevaluetype and merging its functionality with the valuetype the multivalue and hierarchy flags are removed and listvaluetype and pathvaluetype are created instead to the listvaluetype and pathvaluetype it is possible to give as extra typeparams the valuetype that should be put in the list or path git svn id svn ssh dev outerthought org outerthought lilyproject branches complextypes b d f e bd e a dc ,extract
coded mdi functionality and lots of other gui code gmltextarea leading spaces are converted to tabs tab width is set on initialisation added gettextcompat to convert newlines and tabs back for resave see prefs tabwidth see util convertindents string gmmenu extracted from gmmenubar to allow subclassinggmmenubar added window menugmtreegraphics background nodes are now shown correctly in the treemdimanager implemented resizedesktop mdimenu the window menu it updates when frames are added and removed and offers some common commands subclasses gmmenumdipane modified to call resizedesktop in certain cases added functions to close all etc vtexticon fixed a generics warninglgm mdi is now an instance of mdipane modified createtree to add a jtogglebutton for the eventframe reordered some gui initialisation code to work with the extra toolbar button overloaded makebutton for other kinds of abstractbuttonresource modified the arguments to copy there are now two versions modified subclasses to use the new arguments resourceframe added javadoc comments to some fields to clarify their purpose modified resourcechanged in all subclasses to compare against resoriginalscriptframe modified to use gmltextarea gettextcompat eventframe added support for the toggle buttoncheckstyle xml todo comments are now ignored eclipse already has better functionality for thatabstractbitmap removed a fixme commentgit svn id f f bc e be cd ,extract
the viewer layer now has the correct bounds previously zooming in too far would stop showing the canvas this came because of incorrect bounds now we set the bounds of the viewer layer to the bounds of the grob we have a special case for non grob objects the viewer layer is now set using setoffset instead of moved to the center in the drawing this can be further be optimized by not repainting the entire viewer but just the viewer layer however for that to work the handles also need to be drawn inside of the bounds of the grob which is not the case,move
solved ticket application cfc in webroot we also removed support for gateways in server admin,push down
extract base class move test classes,extract
lily introducing smart population of the mq so that each indexer only receives events about relevant records this makes it more efficient to have multiple indexes especially when each index handles a different subset of the records to do this more selective mq feeding messagequeuefeeder is replaced by a new indexawaremessagequeuefeeder in case the information based on which a record is included in some index changes the old index es of which the record was part still need to receive the event in order to delete the record from their index thus indexawaremessagequeuefeeder needs both the old new values of this information and this is made available in the recordevent by the indexselectionrecordupdatehook which plugs in in the critical path of the crud operations there is a new kauri module called indexer integration which registers the indexawaremessagequeuefeeder and indexselectionrecordupdatehook which needs to be done before the repository starts in the indexerconf the simple list is replaced by indexrecordfilter the indexerconf xml section syntax changed it is now replaced by a but the old syntax stays supported all this is still work in progress the major components are in place and there is a basic testcase but lots of things left to do,push down
add buttons to set whether or not a fingering pattern includes a closable end ensure tuning wizard supports closable end fingering patterns move tests of what a fingeringpattern or tuning contains from whistletuningpanel into fingeringpattern,move
newtools added wcettool class moved some code into it,move
renamed iremotefilesystemdirectoryevent to iremotefilesystembrowseevent,rename
more clean up source comments and simplification of remoteserviceadmin class,inline
extract method resolvetemplatepath,extract
candsession launch now handles bad assessments aomansvc now stores nulls if the item test procmap can t be initialised candsessionstarter sets new exploded property on candsession if session can t be initialized added support for rendering an exploded session,extract
update to probably gonna move to github permanently now,pull up
name,pull up
renamed engine model element added constant model in dtd,rename
refactored pdproadmodel system,pull up
major indexing changes and updates implementation of a different pojo indexing strategy see javadoc and code comments for more details added autocomplete indexer that indexes searched phrases and takes their search frequencies into account the most searched ones are then displayed first both pojo and linkedin full indexing is set to run periodically configured by the spring task scheduler,inline
added support for perspectives in common for toolbars added tutorial as well,extract
finished adding support for quantifiable results for multiselect,extract
fix ,push down
merged lucas orientgraph transcationalgraph implementation renamed method signatures to be identical with interface style commented out unused methods that are not part of blueprints core,inline
mcheckstyle add a complete set of control options for processing resources git svn id f bb ffa edef ,extract
wcet added uppaaltranslation executable added exechelper for reusable parts in analyzer executables initial import uppaal translation wcet uppaal translation initial import uppaal xml model wcet uppaal model add getiterationbranchedges to loopcoloring move some utilities from controlflowgraph to loopcoloring create graphutils flowgraph directed graph with entry and exit and move flowgraph cfg,move
introduce new super class for shortestpath chthis will help us design a better common test for these algorithmsand an upcoming bidirectional version,push down
renamed textsplitter weight to towords,rename
updated to new ioos milestone template for timeseries test cleanup adjustment updated template code cleanup commenting adding new updated version of sensorml for describe sensor just for timeseries right now attempting to fix observation insertion issue updated describe sensor output for stations adding base describer to allow for hook in writing missing invalid values reports added support for a reporting mechanism to report missing invalid values fixed issues caused by new describe platform output added support for trajectory profile and timeseriesprofile data in the new describe sensor output bug fix various fixes and updates to integrate into tds,extract
rename getprotocol to getmechanism in testclient,rename
refactored lazy creation of securities during import,move
changes implementing enhancement and code review ,push down
msurefire refactor pojo only methods into pojo test set and create testngxmltestsuite git svn id testng f bb ffa edef ,push down
moved splitstep to splitstep package abstracted predicatesplitstep and created uniform splitter,pull up
rename getter function to hopefully be a bit more descriptive,rename
o refactoring of the creator to use request response another step in the round trip test works o pushed many default values to the archetype creation request to make things work in a fully embedded mode git svn id f bb ffa edef ,inline
minor refactoring,push down
move aassociaterq useridentity to aassociaterqac useridentityrq move aassociateac useridentity to aassociaterqac useridentityac,pull up
fixed message id in topics added method inheritance test refactored out nevadoqueueconnection and nevadotopicconnection,push down
we might be able to axe state inheritingstate these were mostly for my sanity to constrain where injectorimpl gets its data we can always have more test cases,inline
implemented subqueries and refactored model,pull up
o pushing the forking code into the booter itselfgit svn id f bb ffa edef ,push down
deprecated mavenruntimemanager and friends at very least this api was misplaced it should have been exposed from o e m e launch bundle not from the core more realistically all maven launch support should be moved to o e m e launch implementation and exposed as api when we get at least few real consumers change id i d c d a ca dbdc e c b signed off by igor fedorenko,move
lifecycle related changes renamed the stages startcluster servicestart kill stop and updates properties according to that renamed start stop start stop added lifecycle listeners registered on slavestate,rename
remove phases from bindingprocessor refactor so that two different classes do the two different bits with an abstract superclass managing the shared pieces git svn id guice googlecode com svn trunk d f a b b b d aecad e,pull up
balajin reflecting contract object renames from contrib s adherence module,rename
various pagination fixes fix fixed positioning,push down
 apply abp to vhractionnotice use m classes instead of x use cached get instead of new fix wrong comments refactor duplicated code git svn id f ce d ac b f ,extract
rename requestpathmapping getactionmethodmetadata,rename
huge refactoring to make prestoresolver,extract
moved more painting code into the renderers issue number obtained from submitted by reviewed by,push down
added uri parameters beyond those expected by the extension will be added to the bindings ,extract
refactor tracing feature into a base class,pull up
cleanup publishing of blob information to zookeeper move everything to class blobmanagersetup git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,move
misc rm redundant cast rename method git svn id baf d a c fc e d,rename
rttm rename rollback to more accurate retry where appropriate,rename
reduced dependency on classic blocking i o apis in cacheexec,inline
jmxutils finally broken down scheduling classes are mostly isolated started to work on breaking cyclic dependencies but not finished yet sofar the refactoring is stable but i m going to start to move everything around so better already commit this intermediate state,move
twitterupdate Î¶¨ÌéôÌÜ†ÎßÅ move method git svn id svn okjsp pe kr okjsp trunk okjsp e ab cc c daca c f ,move
finished the specified jira tickets with the following limitations joo this is now guessed by exclusion every identifier that is not declared in any scope is assumed to be an inherited member since this situation might also be a missing declaration a warning is issued which you can get rid of by writing this explicitly be sure to import everything window is no longer in scope write window explicitly window is predefined and does not need to be declared joo type casts are now left out is a function is assumed to be a type since you can also import package namespaced functions not supported by jangaroo but could be native javascript there is a heuristic that uppercase imports declare types joo automatic binding only works for methods declared in the same file for other situations i plan to add a bound annotation git p depot paths coremedia jangaroo change ,inline
added authentication for the java client library refactored builders and added unit tests,pull up
vectors add javadoc look for more optimisations,extract
added service provider ols or bioportal as a comment on the ontologyterm renamed method setontologysourceaccession to setontologytermaccession removed code that extracted everything before a from the ontology term accession removed method removeredundantsearchresults from the ontologyselectiontool wasn t eliminating duplicates if accession numbers were different for the same term now we show the service provider,rename
lily close solr cloudserver when closing the cloudsolrshardmanager renamed solrshardmanagerimpl to classicsolrshardmanager for symmetry with cloudsolrshardmanager,rename
move languages certificates and year from film to contentpull up the languages certificates and year fields from film to contentalong with accessors and mutators in both simple and internal model this is primarily for the lovefilm csv ingest,pull up
some refactorings in the translator moved duplicated code to super class,move
xsd generation has been moved to an extra mojo allow to also skip the test compilation not recommended,move
logtool create a new producer annotation and allow a function or bifunction to create the exception that will be returned,extract
refactoring of value and attribute,pull up
first set of changes towards a massive refactoring of the auctionserver class to be more specific more testable and more sane git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,push down
lib add attributes getmodfied other and attributes getremovedormodified,extract
shruthi dev moved treatment card specific views to treatmentcardcontroller,move
merged big refactoring back to this dev branch,push down
eliminate ravenutils from raven and add logging to clientexample ravenutils is no longer needed by the new raven client all logic has been moved to either the client or the new utils class logging has been added to the clientexample so you can see what s going on in the background,move
added push down predicates to the core api and supporting classes for those graph database that don t support this notion the vertex api has changed,push down
her ensure retired status for queues is operator controllable her changing queue totalbudget not retiring queue as expected crawluri java includesretiredirective internalize to crawluri abstractfrontier java allow re enqueuing of untried uri with retire driective clean up terminology method names workqueue java workqueuefrontier java bdbfrontier java adjust budget sessionbalance handling to always count up always consult latest values always refresh values from latest uri processfinish reorganize to reduce redundancy dispositionprocessor java offer forceretire setting quotaenforcer java set failed status or forceretire not both her h adding sheetassociations mid crawl won t affect already queued crawluris sheet liveness sheetsoverlaymanager java applyoverlaysto rename unify reapply whenever called to ensure liveness candidatesprocessor java adjust to rename,rename
removing json generated visual objects and replace them with nodes removes timenode and scene node adds the metatype too all nodes now,push down
renamed statements format to xdi display added support for from graph and to graph,rename
applying laurent s patch for correct handling of multiply typed individuals when lazy loading them into a collection fix ,push down
hv moving retrieval of class level constraints to annotation meta data provider,move
adding domainroot causes split in core plus additional refactorings in this commit many files got moved around see below for details on some decisions and features already ported to the new version of the framework abstract support for backend each back end must implement the pt ist fenixframework core backend interface and typically to provide a subclass of config that supports setting it up appropriately closes closes it was a design decision that the domainroot dr should be a part of the fenix framework core core given that the dr must be modelled in dml then the core must run the dml compiler thus the dml compiler must be moved out of the core because of how maven dependencies work this is accomplished in a new module fenix framework dml compiler dml compiler this module also gets the domainobject do the abstractdomainobject ado and the default pojocodegenerator pcj any code generator should generate domain classes that inherit directly or not from ado any concretization of a domain model requires the implementation of the getexternalid and getoid methods from do and ado respectively now the core depends on the dml maven plugin which implies that code used by the plugin must be moved out of the core namely the project and dmlfile classes this led to the creation of the fenix framework project module on which the dml maven plugin now depends besides depending on the dml compiler of course additionally because the core also contains the atomic annotation this was also extracted and moved to the dml compiler actually it makes sense for the dml compiler to be able to post process domain classes inject special constructor and process atomic annotations closes the persistent root module was later renamed to domain root and even later it was decided to include the dr in the core the well known id of the root object is hardcoded and hidden in each back end through the implementation of getdomainroot the core provides a default configuration with a default in memory only back end thus it must provide a concrete implementation of getexternalid and getoid for the dos it uses a corecoregenerator ccg that simply extends the pcj to set the domain class root to be the pt ist fenixframework core coredomainobject class because the ccg is used by the dml maven plugin which in turn runs before the main compilation phase the ccg must be made available in another module this is done in fenix framework core code generator regarding issue the ant task is now on dml compiler but still needs to be moved out of there to a separate module closes the transactional interface is not finished but when the need for more changes arises a new issue should be created moreover jcarvalho is looking into this in issue summary of dependencies between fenix framework modules fenix framework dml compiler none fenix framework project none dml maven plugin fenix framework core code generator fenix framework core not yet but will be added later via the plugin,move
initial commit of inline content refactoring,inline
proceed to create the new layout for the toolbargroupdodckstation new version in this purpose the preparedrop method which generates a dropinfo class and the drop methods which use it are now defined in the subclasses an no more abstracttoolbardockstation class itself,push down
improved visual representation of spec elements and their spec relations,push down
refactored out the g dglcanvas so it has a simple implementation of just rendering as a canvas not an entire jcomponent hierarchy,pull up
fix for the bug in instance generator when using super interfaces and getting abstract method error adding a simple test case for the issue fixes ,extract
lbclassic not not all patternlayout instances need to have a throwableinformationconverter added at the end of the converter chain by the postcompileprocessing method with this commit post compile processing code has been moved to an interface by default patternlayouts that ship with logback have a default post compile processor however it is now very easy to set processor to null we now test smtpappender using greenmail problem described in lbclassic is reproduced in tests but not yet fixed,move
remove phases from bindingprocessor refactor so that two different classes do the two different bits with an abstract superclass managing the shared pieces git svn id d f a b b b d aecad e,move
simplify contextimpl and its implementations,push down
redesigned packer and unpacker interfaces,push down
refactor towards composed method and renamed to show intent extract error message format to const move duplicated code to separate method group public methods in front of class,rename
o added some missing javadoc o moved the getprocessor method back in the super class o added a constructor to initialize this ioprocessor member o minor refactoring git svn id f bb ffa edef ,pull up
fixed looping items in an inventory again humanoid mobs can now be equipped with armour weapons made skript update changes display all versions in a row instead of each one separately skript now automatically generates the config the aliases files and the example scripts when it s first loaded updated mcstats invalid format strings now produce an error message created a maven repository at,push down
move clustered tests to clusteredeventbustestbase,push down
lispsubroutine evaluate refactored all tests pass now,extract
refactored rdfrelation into a basic executionplan structure,move
moved getfacets method from jestresult to searchresult fixes ,push down
first bit of minor refactoring of base types vals,push down
removing inheritance between simplereducer and simplecombiner it simplify the code,inline
header refactoring readerprofile validation ifileimportstep,pull up
rename setattributetypes method,rename
this update is the first incremental check in for it primarily refactors and cleans up the duplicationservice in preparation for adding reporting and error re queuing git svn id ed cd a f c be b fe bcb,push down
duracloud moved common code from individual services into baseamazonmapreduceservice git svn id ed cd a f c be b fe bcb,pull up
base classes refactored acynchronouscall extracted,pull up
faces remove inputdatetimeutil and move methods to inputdatetime,move
method rename,rename
perf remove expensive finalize method from statement finalize method on statement is moved to a separate class that is lazily created if user sets autocloseunclosedconnections true this dramatically improves performance of statement instantiation and reduces garbage collection overhead on several wildly used jmvs the added jmh benchmark validates the performance of statement creation benchmark autoclosestatements mode cnt score error units finalizestatement createstatement true avgt ns op finalizestatement createstatement gc alloc rate norm true avgt b op finalizestatement createstatement false avgt ns op finalizestatement createstatement gc alloc rate norm false avgt b op,move
statistics reporting all stats now account either to tests these provide operations statistics can include more iterations timeline information about events property values during whole benchmark execution operations are generic any call to trait s method may be an operation reporting moved to separate modules providing default reporter module with csv and html reporters displaying histograms is todo operations for mapreduce and distexec are todo minor fixes in other parts,pull up
paxwicket start extraction by moving injection factories into own namespace signed off by andreas pieber,move
rename method,rename
don t create rename string if we re not renaming rearrange things slightly to avoid doing unnecessary work document variable baseforrename,rename
refactored to improve quality,pull up
rename deallocationrule to expiration,rename
remove inputstream references added decode to buffer with type reference signed off by paulo lopes,inline
fix f dc a broke xml variant of scripting console response and will produce incompatible structure extra nesting with scriptexec element moved scriptexecution code to scriptmodel which is now a bean not map xmlmarshaller is extended to support simple javabeans to xml marshalling borrowing annotation classes from javax xml,move
fixed hudson removing existing snapshot views often fails fixed hudson use cleartool setcs current instead of cleartool update better handling of job renaming deletion and behaviour regarding custom workspace plugin will be more resilient in case of existing view tag or view path in the way instead of failing it will remove the view tag and or rename the view path ucm view config spec should be more consistently sync ed with stream dev new unit tests to cover addition removal of load rules on an existing view git svn id c de d a be ed b c a,pull up
rename h cupgrade option,rename
minor rename,rename
 handle the file rename problem with a workspace synchronizer,rename
merge of latest version of passerelle from google labs repository,inline
version checking release notes moved into appcast description added the old nodebox icon as the application logo for dialogs also added a notification if you have the latest version when explicitly checking,move
really simplified starters removed starterset just an inferface for compatibility a lot of useless method removed,push down
added support for hazelcastworkmanagedcontext working on task re balancing not done just switching machines starting a refactor using the new managedcontext to allow me to simplify the internal api,pull up
added accessor for building shard dir,extract
updated get settlement accounts api implementation updated to return jsonloanaccountresponse object containing loanaccount and a list of settlement savings accounts note apiloanaccount is still used internally only to deserialize the response the jsonloanaccountresponse container doesnt exactly match the mambus response format renamed to getloanaccountwithsettlementaccounts,rename
initial remove support,inline
aesh added separator char and boolean flag to enable disable appending a char at the end of a completion refactored and added some tests,pull up
method rename,rename
explicit imports renamed method from getplay arguments to getplay systempropertiesarguments,rename
code cleanup of vjsobject,pull up
refactor extract method objtojsonobject and objtojsonarray,extract
 add atom support,extract
refactor generic rest attribute code removed the property setter getter annotations from generic methods renamed base methods so that name collisions won t happen core ,rename
annotations for generation plus simplify readstream writestream stuff,push down
rename two argument remove methods in multihashmap and multiidentityhashmap for java in java there is a method of the same name but different signature on map so these classes don t compile on java renamed as removemapping which is the same name used by apache collections which faced a similar problem note that the resulting map tiles are different when using java and java at least some of this appears to be due to different iteration order in maps but there may be more serious problems i don t know git svn id d f ee a dfeeeb ,rename
optimized user search and user read restructured the user in both the database and the code optimized user search and user read by reducing their load on the database created a new database query that should be more efficient than the multiple queries being performed before closes closes squashed commit of the following commit b ec e e fd ac b f d author john jenkins date fri mar moved userpersonal into userinformation userpersonal recorded the personal information about a user which was intimately tied to how users exist in our system for that reason userpersonal is defined in userinformation instead of being its own class the overall structure has not changed commit e a f e c b fefa f c author john jenkins date fri mar reworked and optimized user search and user read restructured the code to correspond with the changes to the user and user personal tables then created a new way to query the information from the database finally reworked how user search and user read validate and aggregate their data to reduce the database load,move
applied refactoring of discoverableserver and activator to head,extract
started to separate queryhandler stuff from actual fastpath query planning and execution the latter part moved into the new fastpath package,move
hv handling value unwrapping via valueextractor replacing value handlers for javafx and optional with valueextractor implementations not supporting implicit unwrapping for the time being,extract
added support for class tag in persistence xml,extract
refactor to add simplejavatypenode based class for typenode interface extracted an accessnode interface and added base classes simplejavaaccessnode and simplejavaaccesstypenode will need this later one as i expand scope of type resolution note for now please do not change usages of accessnode to be usages of simplejavaaccessnode so that class hierarchy compatibility is preserved we can do that post git svn id baf d a c fc e d,pull up
ngrinder remove the unncessary local agent db query,pull up
api breakage resource bundles may now override the default time format timeunit decoupled from timeformat,push down
major refactoring for propertydescriptors changes include genericization of propertydesciptors which facilitates the dry principle split multi valued propertydesciptors into separate classes to take full advantage of generics remove simple string property accessors from the rule interface only propertydescriptor are supported now properties are defined via rule definepropertydescriptor propertydescriptor interface normally called in a constructors ruleset xml enhanced to support propertydescriptor defining rulesetfactory and rulesetwriter account for the more robust property definitions all ruleset xmls corrected to move definitions to java classes where needed and to including necessary type information where missing git svn id baf d a c fc e d,inline
quameterproteingroup object to be stored in the database to track how the protein group definition changed over time,inline
extended functionparser to work for boolean and double data types and renamed multiplexer model packages,pull up
beginning work on incorporating the triplesource interface from corleone into the main api moving all the datasource specific bits into it s own package re also removing the proxy objects flags since it was obsoleted and deprecated in the previous version re ,move
cleanups moved some stuff,move
katta moved handling of successful obd call details to obd module,move
renamed update gettopicaftersave,rename
getclauseproviders also moved from prologimplementor to theorymanager,move
remove simulator interface,pull up
vishal v refactoring treatmentupdateorchestrator moved dose interruption calculation to patient,move
extracted toescapenotation,extract
argument parsing is now done with jcommander syntax is more compact and easier to evolve than commons cli introduced executorservices to execute queries and to process results still to do registration and unregistration of mbeans is still pretty ugly,push down
refactoring to create abstract super class for creating users menu,pull up
updated previewpanel improved open computer dialog added schemaeditordialog for future improvement of addeditarchdialog,extract
added writerequest getoriginalrequest renamed writerequestwrapper getwriterequest to getparentrequest simplified writeexception git svn id f bb ffa edef ,rename
 moved core ui code to a separate bundle signed off by igor fedorenko,pull up
add methods to events that accept an existing jsonobject,extract
remove name from base class fix typeo,push down
fixed cleaned up some classes,pull up
adding a stub interface marker to signify empire specific guice modules adding this interface to each of the current module plugins fixing a bug in the empirepersistenceprovider moved some of the util methods throughout the code to the new util class named graph stuff tests on whether a bean is empire compatible created an empireutil class to keep all of our utility methods changing the contains methods in entitymanager to search for the object it its named graph rather than globally removing todos in code that i made issues for tweaking rdfgenerator to use the describe utility function and removing old method from all data source implementations changing empire init so the default module is always auto added users no longer have to auto specify it adding a describe utility function which will do the describe on the named graph the bean is supposed to belong removing describe method from datasources,move
remove unused public methods,inline
extract method and clean up code,extract
removed the obsolete invenio search handler,pull up
exojcr rename dbcreator to dbscriptexecutor,rename
refactoring for part moving mixin solving into separate class,move
rename resolveinvoker resolvecommand and make create,rename
hv adding some javadoc aligning constructor signatures pulling type and name fields up to abstractconstraintmetadata,pull up
biserver intitial refactor of editor classes to support block out periods,pull up
refactor extract write and send method,extract
refactoring tests,move
refactor batch test tools add simple constructor support model transformer,pull up
updated event system to use less resources common events don t create objects anymore for the custom objects this was quite resource intensive as an event is fired for each custom object if you had a plant bo that spawned times in a chunk and an ore that spawned times you would end up with event objects fixed netherfortressenabled netherfortressesenabled conversion renamed the get functions to read functions in configfunction to avoid confusion between the getblockid function in resource,rename
refactored test driver,pull up
remove remaining bukkit references,inline
refactor rename,rename
revert jwamp back to a strictly implementation of wamp specification suppression of binary message callmoreresult subscribe arguments change back specification of publish messages,inline
refactored clientfactory and opensamplehandler separated interceptor chain within clientfactory into a clientpersister and the plain xmlserialization removed factory method for progressmonitorinputstream in clientfactory used alternative constructor instead added tags to ignore non translated strings moved tokenreplacingreader to name abuchen portfolio util package added paragraph to about html with tokenreplacingreader added mwhesse to contributors in aboutdialog formatted translation files with resource bundle editor issue ,move
added second line of defense for invalid index,extract
simplified permissions code for reward sources and settings,inline
adding more methods needed by the hudson translation plugin,extract
renamed putobject and retrieve update methods in cache facade also some order in unit tests,rename
renamed flag to prepareflag,rename
her springify restletify offer web interface to view edit beans in running crawl beanbrowseresource java offers browsing and limited editting of simple values of beans in built crawl jobrelatedresource java reportgenresource java refactor for reuse by other job sub resources jobresource java link to job beans and job script descriptorupdater java helper for marking up propertydescriptors to aid ui bean access crawljob java don t auto instantiate context on request engineapplication java add uri routes fetch bdbcookiestorage java longwrapper java workqueuefrontier java bdburiuniqfilter java improve display when browsed esp before launch,pull up
ismavatar commit alpha complete recode of gm file resource handling script window code added scriptframe window viewing code modified in preparation for windows namedocument added for window name textfields checks input updated formatted a few dependancies for gm file renamed includefile to include git svn id f f bc e be cd ,rename
refactored several programs related to template builder and added reflection based beans template builder,push down
added more constructor methods in protocolcodecfilter all methods in protocolcodecfactory and message en de coderfactory now can throw any exceptions renamed newencoder to getencoder renamed newdecoder to getdecoder git svn id f bb ffa edef ,rename
move group communication down to jvstm ispn onlythis commit complements cc fe which first added support for groupcommunication in all jvstm based backends it is considered best for now tokeep this backend specific so in this commit we move such functionalityto the only backend that currently extends jvstm common jvsmt ispn,push down
redo substitution resolving to better handle complex cases the main idea of this patch is to introduce partial resolution which means resolving only the minimum branch of the object tree to get to a desired value by using partial resolution whenever possible more interdependencies between substitutions are permitted configdelayedmergeobject was a big problem because a lot of the code in abstractconfigobject really didn t work on it because it assumed a resolved object much of that code now moves down to simpleconfigobject,push down
updates the media streaming tasks in s storageprovider to do the work previously done by the media streamer service the enable streaming task now along with the creation of the distribution also sets the necessary s bucket policy and adds a space property to expose the streaming url for the space the disable streaming and delete streaming tasks now remove the bucket policy and the space property value,push down
sc qcadoo refactor component definition,move
rename resolve to find in abstractconfigobject since resolve is being used for substitution resolution,rename
istvan s refactoring suggestion was done,pull up
her make default warc size comply with spec adjust default pool size for fewer odd sized w arcs archivefileconstants java remove superfluous constant writerpool java default max active writerpoolmember java update constant use remove deprecated unused methods writerpoolprocessor java pull storepaths up from subclasses but set default via subclass method set defaultmaxsize via subclass method warcwriterprocessor java arcwriterprocessor java getdefaultmaxfilesize getdefaultstorepaths as appropriate,pull up
main change custom parser for expressions created package ch njol lang and moved some relevant files into it renamed variable to simplevariable and literal to simpleliteral and created the interfaces variable and literal instead created a class exprparser which is responsible for parsing expressions of all sort other changes expressions can now only accept single variables i e variables which will only ever return one value at most and improved added getters events now init with literals instead of data arrays improved fixed expression to string with different cases debug with without event the expression itself and the value of the expression improved error handling errors are now buffered in sessions before they are printed to console or a command sender this still needs some work though other small fixes improvements i don t remember,move
rename service getsearches service getsavedsearches,rename
o pulled up analyzemojo functionality into abstractanalyzemojo to allow different plexus annotations to be specified on subclasseso changed analyzemojo to execute phase test compile for standalone functionalityo added analyzeattachedmojo to phase verify for participating in the build lifecycleo improved javadocgit svn id f bb ffa edef ,pull up
first huge step at refactoring jbidwatcher to use guice instead of a wildly connected set of singletons,move
changed effect to effect and renamed e to f,rename
vtkjoglpanel tweaks and cleanups icyvtkpanel improved translation operation added d axis orientation display support to avoid the multiple renderer bug of vtk with opengl some tweaks here and there switched vtk to opengl rendering no more texturemapper vtkcanvas minors changes to adapt to new icyvtkpanel,push down
hv added documentation and moved message groups and payload into the constraintdef base class git svn id b cb b d ca fae ebed b ,pull up
refactor build management and fix xcode scan build to work alongside release configurations,extract
refactor reloading to be implementation abstract this also should fix reloading on spigot and reduce the amount of implementation specific code,push down
heavy refactoring of fi smaa jsmaa model move measurements out from criteria to impactmatrix changed listeners to be smaa specific and not from beans,pull up
support hbase hive impala refactor service dependency issues,inline
refactoring of variable name collection,move
various bug fixes and test additions,extract
renamed protocolcontext to protocoltools to better reflect its purpose fixed remaining test failures by moving validation from the projection rules where the model may not yet be complete enough to a validation rule that is triggered on the projected local model,rename
general improvements attempt at fuzzytree java,push down
common renamed signature to memberid some performance tweaks for hashes and tostring,rename
another day another design change oh and m parser,pull up
vehicledto is now a true value object it is made final made neccesary changes in central system,inline
clean up from code review,inline
created a generic experiment extended by scalabilityexperiment andother minor refactoring,push down
refactored for improved modularity and extensibility general cleanup updated unit test correspondingly,pull up
rename getjsonstore method,rename
pull up brandsummary field from simple item to descriptionsince series can have parent brands move the field which contains apiece of contents brand summary from item to description thesuperclass of item and playlist,pull up
refactored statistics to be used both by backgroundstats and stresstest,push down
toby extracting an abstract cachingiterator from predicatediterator filterediterator and subsequenceiterator and removing the iterator helper classes as a result,pull up
renamed keystore and truststore methods,rename
propogating rename of authorizationrequest to oauth request,rename
renamed api methods for intermediary result matcher,rename
refactor namespace support for xpath so that it works like other parts of the xmlunit api i e make the api consistent,inline
refactored customizable classes added simple attributes that work like patient attributes added base classes for all attributes classes updated instance attribute classes to use base classes added simple attribute resources added base classes for all attribute resources updated instance attribute resources to use base classes refactored instance attribute generic type definitions to be simpler,pull up
overlay added xml persistence sequence overlays can now be saved in xml persistence if the overlay persitence property is set false by default roi moved basic updatefocus updateselect and updatedrag handling in roi class was in roi d moved basic mousemove and mousepressed handling in roi class was in roi d roi dshape added support for focus select state with vtk roi dstack fixed minors issues roi darea added support for focus select state with vtk roipanel fixed refresh issue on property change for mutilple roi as opacity change vtk fixed picking operation broken due to opengl vtk backend added vtkcanvas getpickedobject to retrieve picked object on last mouse press event added vtkcanvas pickonmousemove property to allow object picking on mouse move event moved volume shading switch to the setting panel vtkcanvas getmouseimagepos always returns null now minors fixes and cleanup tweaks and cleanup,move
added iremoteenvironmentinfo service and removed concat service,extract
weldx rename methods on beanbuilder,rename
updated dialog to edit account transactions this change adds a dialog that can edit deposits removals interest taxes tax refunds fees and dividends issue ,pull up
rename method hold convention signed off by christian l√ºthold,rename
the springbox layout is now usable as a base class the old graphstream springbox graph layout is now a cut into a barneshutlayout class that serves as base for several force based layout algorithms and a new layout implementations package contains a springbox class that inherit barneshutlayout nothing changed in the layout in itself excepted it is now possible to create new force based layouts more easily using barneshutlayout as a base,push down
easier dynamic post processing of static assets by moving inner class serve method up to abstractresourcehandler serve so it can be overridden more easily,move
 moved cli workspace resolver to a separate git repo signed off by igor fedorenko,move
provide a better support of the revision labels and a details history between them this is a squashed merge of a refactoring done for respecting the attached files added by the user at the same time numerous speed improvement was done to enable a faster importation by doing less interaction with the starteam server if built from the fake starteam speed is increased by a lot it should be on par if you did build against the starteamsdk provide a means to get the file from history by view version create a fake revision labeladded revision labels to the mix of required changes create test data for testing revision labels import get rid of meaning less todo extract the creation of a commit entry from the recursive file populationthis way we can get a detailed history of the individual files to extract andrecreated a much better history properly create the file based on the view versionpotential issue where the viewversion contentversion create a commit strategy to experiment alternative to file populationthe current limitation of readability of the code for creating commits ingitimporter class is at its limits the filepopulationstrategy aim toextract the history creation of the view since the last configuration thiswill permits some simplification on the configuration of gitimporter classand provide a wider range of technique to extract the history from astarteam view implement the getviewversion for potential future use provide a version of a file based on a label id properly return null if the item is not attach to the label move deletion composition and rename finding into basepopulationstrategy moved the rename the filepopulationstrategy retab some old modified functions remove some dead code add verbosity to the base strategy properly build the path and fix other bug found making the tests re enable cleanup of repository after an execution of import add a test for the base file populationthis is to make sure that there isn t any regression added for the creationof the list of commits make sure the shareto is executed before the update make sure we don t ever get cached objects added a means of querying the last files the strategy has seen clarify the condition and reformat for understandability optimize the overuse of pathname and improve testing of ischild increase test to be closer to real potential use rename class to have a better logic to it added the base integration of the commit strategy cache the tostring return value for increased performance finalize rename of classes and use contentversion instead of viewversion correct the misleading property names starteamsdk documentation isn t consistent with itself which lead to thesekind of errors added revision strategy which is only a base strategy for now correct a bad assumption regarding history orderthe history shall be from the newest version to the oldest inform the commit strategy about the current labeland at the same time get check if we need to make a tag associated with thislabel properly initialize the strategy for change request correct the move operation and name the commit accordingly use the commit strategy in the git importerand fix the test regarding the new behavior correct a move operation badly detected correct problem where openjdk oraclejdk use char sequence instead of string directly replace the join with a more primitive version prevent back and forth for information we already knowand at the same time remove some dead code do not enforce the missing build date tokenfallback to the label revision time instead if user only want a set ofbuild label he will need to apply a proper filter to not select someoperationnal label provide a better explanaison of the reason we are selecting those fields extract the method which process a single file this is to actually override it label in the revisionpopulationstrategy some other strategy may be better to select all the files but the simplestfor now is to simply iterate recursively through all files and only selectthose that are attached to the requested labels correct bad logic regarding deleted files added basic test for revision labels strategy promote debug logs to verbose implement support from specific revision label support create the view with the right time move set of the earliest time from gitimporter to the base strategy simplify more the changerequest commit filter correct the computation of the time of the commit correction add some more test for the implementation of the revision labels implement the revision labels management and importation comment log relating a label with only some files implement a label exclusion to rule out some misleading revisions use proper javadoc syntax add missing header in new files cache all change request prior to starting the import put the initial version in its own variable such modification will enable to retreive all the files version from thestarteam repository but with a good chance of weird effect it is betterto keep for now as the renames or move operations won t be correctlyreflected make sure to only poke getviewversion onceit does seem to make a round trip to the server which slow down theconversion process add somekind of progress bar provide a retry mechanism for fetching items versions if somebody does a commit at the same time we do make fetching of the versionsof a files we may end up crashing we try to protect from this crash asfrom the server add missing import add more resiliance when no change request availables correct comment and casing of the members disconnect once we are finished with the import make less interaction with the starteam server,inline
massive refactoring to use spring most things are automatically injected warning this change requires you to rename the config file to nl topicus onderwijs dashboard config settings json,rename
convert force from class to interface comment methods in force remove override add unimplemented methods and remove empty constructors,push down
changed jsonldserializers to rdfparsers to better represent their purpose added helper utils for rdfparsers to use for generating the internal rdf format renamed existing serializers to rdfparsers and implemented them as per the new requirements,rename
moved accessors from tcp tcp nio to basictcp,pull up
huge refactoring to make prestoresolver,move
refactoring,pull up
add filesystem support to libvirt functionality allow mapping of kvm host filesystem into the guest domain refactor various libvirt xml functions,extract
refactor customobjects and resources there are now customobjects and all bo are a customobject useworld and usebiome are also customobjects even all trees are now a customobject all resources now inherit resource all settings don t have to be stored in a generic resource object but they are stored in the resource itself this allow for more flexibility plugin developers can now add their own customobjects and resources,push down
dheeru refactored invalid input handling logic,inline
willie thean s laf changes added ability to specify proxy for download changed default logging to info,extract
refactor much better way to handle exceptions not through getcaps handler formatter actually test things for each individual dataset grids now query the correct lat lon variables from the coordinatesystem rather than just assuming they are lat and lon srsly massive cleanup more improvements to the testing structure removed the kvp static var that was mangling between requests ran optimize imports because it was looking at me strangely,push down
first work on introducing lily record scanners similar to hbase scanners but then to run over lily records the lily record scanners connect directly to hbase thus also from within lilyclient scanning thus bypasses the lily server process and hence also the avro interface changes include moved code for decoding hbase result objects into records to a class recorddecoder publish hbase props to zk as lily hbaseconfig as client needs it will replace blob hbase access with that too the pure hbase remote repository implementations don t rely on zookeeper git svn id svn ssh dev outerthought org outerthought lilyproject branches scanners b d f e bd e a dc ,move
pushed a little tesselating code up into the common class,pull up
removed setpiped boolean from producer and added ispiped on commandcontext,pull up
rename attribute to attributes,rename
complete disk store refactoring and added region attributes,pull up
remove circular dependency between documentloader and jsonutils the public api for documentloader is unchanged but the protected static api for documentloader has been modified to move all of the implementation methods and fields into jsonutils,inline
refactor pageinitializer in pageinjector page is now deprecated in favor of javax inject inject jsr createpage is nowdeprecated in favor of newinstance any class now supports inject and newinstance it only requires a compatible constructor webelement or webelement webdriver list now supports inject if t extends fluentwebelement it will inject a fluentlist if t doesn t extends fluentwebelement it will create an arraylist close ,pull up
changed the way how exceptions was handled to have something more general cleaned some of the api that was sometimes inconsistent refactored ermaildelivery with the introduction of a new class ermaildeliverycomponentbased,inline
first pass for pushing data into s ramp from a maven deploy currentlyit s very targetted the maven build can attach a xsd file to the build using the build helper plugin that file will get uploaded to s rampwith gav information configured as custom s ramp properties,push down
moved measured inflow into abstract,pull up
refactor backends to use permissiondata architecture use lists instead of arrays in a lot of places,pull up
rename parameter of jsonview,rename
her bloomfilter bit bit length bug prevents full bitfield from being used premature saturation bloomfilter bit java include the split to subarrays for larger bitfields and round up to power of for performance options previously in largely redundant classes fit a number of problems with int long overflow and bitwise ops add methods for reporting testing bloomfilter java add methods for reporting testing bloomfiltertest java bloomfilter bittest java more extensive tests including two lengthy tests of default oversized blooms usually disabled by renaming bloomfilter bit java bloomfilter bitsplit java bloomfilter bp java bloomfilter bp split java deleted as buggy or redundant benchmarkblooms java move to test source dir bloomuriuniqfilter java change to accept filter instance rather than parameters for added configuration flexibility fix comments bloomuriuniqfiltertest java supply filter not paramters,pull up
improvements to the changes feed,inline
refactor odt textstyling to extract a pluggable interface for styles generation,inline
expose the resolved command in order to get access to the pipeline meta information move the baseshellcommand to the java lang package,push down
moved common code between cascading merging daos to an abstract class git svn id directory trunk f dbab f eb b e eb,pull up
renamed vars and methods in digest,rename
renamed a method to handlexporb,rename
 moved core ui code to a separate bundle signed off by igor fedorenko,move
renamed transformer s java class attribute to the more intuitive target class split up the exampletransform to make it easier to test the new logic added a test to ensure transformation to pojos is working correctly,rename
refactoring moving some common functionality to jgitcommon,move
switchyard add notion of parent to configuration model hierarchies,extract
minor rename getsni issni option,rename
removed request id req id from request removed header rsp expected,inline
yet more rsa refactoring,inline
refactored search result extraction code and added easy accessor for highlights in search hits resolves ,extract
made viewid mandatory in view removed implementation of cloneable clone replaced with copy,inline
refactored composite into abstractcomposite composite and dynamiccomposite to disambiguate usage,pull up
started on refactoring roadmodels to allow compatibility between pdproadmodel and graphroadmodel,push down
move group communication down to jvstm ispn only this commit complements cc fe which first added support for group communication in all jvstm based backends it is considered best for now to keep this backend specific so in this commit we move such functionality to the only backend that currently extends jvstm common jvsmt ispn,push down
minor refactoring shortened method in newfolderwindow by extracting button creation code prevented null pointer when no mode is specified by defaulting to mode normal,extract
renamed nioserver nioservertest and nioclient nioclienttest added initial interfaces for server and receiver changed release version to removed connectionmap unneeded interface parameterized abstractconnectionmap simplified tcpconnectionmap constructors added setters renamed abstractconnectionmap connectionmap changed byteman scripts as well removed connectionmap lock using synchronized instead less code moved getconnection into super class renamed connectionmap baseserver moved all attributes from tcpconnectionmap baseserver renamed tcpconnectionmap tcpserver moved tcpconnection into its own class added util createserversocketchannel created tcp nio changed setters and getters created nioserver and nioconnection renamed nioservertest nioserverperftest added nioserver register wakes up selector to allow register to proceed send and receive now work added buffers and bufferstest added mocksocketchannel use of buffers in nioconnection connection reaping now also works in nioconnection only a single tcp connection is used between members nioconnection receive now delivers a message outside the lock scope added documentation on tcp nio to manual moved remaining tests from tcpservertest serverunittest eof is now handled in nioconnection receive added writebuffers and unit test added tcp nio max send buffers nioconnection now uses writebuffers added reading of messages in batches tcp nio max read batch size,inline
updates for refactoring to style classes calculatedstyle now has lookup methods to cover all general cases so propertybyname is private which means the backing classes for styling were able to be replaced,push down
collection item expressions added more support for translation of items with collections by renamed existing itemtranslation to itemclass on collectionproperty added new itemexpression attribute on collectionproperty added initial support for translation to value types starting with java lang string added support for item expressions on geteachtranslation used sourceproperty to apply the item expression so it can be used with or without mvel tests for collection translation using itemclass and itemclass itemexpression closes ,rename
refactor insertmode to behave more like commandbasedmode so it s easier to define keymappings this also allows me to use the provider state for executing eclipse operations,inline
dirmina changed statemachinefactory to make it simpler to specify the transition annotation to use removed iohandlerstatemachinefactory and iofilterstatemachinefactory git svn id f bb ffa edef ,inline
refactor downsampler to avoid the mutabledatapoint class and reduce methodcalls signed off by chris larsen,inline
added implementation for pluralattribute,extract
nick o refactored the mailer added a cookies utility class fixed a bug with string formats in the baseexception provided the synthetic so anyone can capture views into string,push down
refactor maven config params and push pullcommands allow all mojos to run without maven project ie pom xml switch to requiresonline annotation to disable mojos when offline change projectconfig param from string to file extract common options and some common code from push pullmojo and push pullcommand add module related params to pushpullmojo,pull up
refactoring delete unnecessary methods and clean up code,inline
faces bridge generates urls that can be incompatible with liferay friendly urls fixed jsr test failures regarding portletmode windowstate and resourceid,push down
 plugin framework for java pf j remove atlassian plugin and append plugin framework for java pf j plugin framework for java override find factory manager add class sso filter interface,inline
bug clientstate checkforactivity does not attach callback to imqtttoken before it is placed on event queue created clientcomms checkforactivity imqttactionlistener pingcallback to pass the callbacks through to clientstate checkforactivity which then attaches them to the token before it is added to the tokenstore also modified alarmpingsender onreceive to create the callbacks before requesting the token from clientcomms checkforactivity signed off by james sutton change id i a a e cfe bd e e d a e d ce,extract
scenario move stale listener to superclass move the stale listener used to refresh timeline views with incoming changes up to the superclass shared with scenario view such that both scenario and timeline update with the same strategy this allows for instance the cost graph shown in the scenario view to stay up to date with changes to individual timelines this supports resolution of remaining instances of nasa mct plugins ,move
add delayed option to insert,extract
discard redundant changes,inline
create generic insertion operation and unit tests,extract
wcet uppaal refactoring of the uppaal tool additionally added experimental translation using one template per supergraph,push down
refactor to avoid duplicate code,extract
splitting up building the hits list,extract
refactoring cyclicbuffertracker and appenderbuffertracker into the more generic componenttracker,pull up
nxcm moving method level up initially i thought i ll need release to be run in the staging scenario but i realized this is not the case closed staging repo is just fine as everything else,pull up
complete refactoring of the mock device,move
removing billcleaner moving functionality to relevant classes,move
participants now handle merging too added test for jgrp mergetest changed util waituntilallchannelshavesameview it is correct now removed mergestresstest same as largemergetest moved code of merger into merger removed merger and gms use merger tp increased thread pool max threads to from default merger now uses participants as merge leaders if there are no coordinators found in all subviews,pull up
refactored note bind tests to better support near future geometry bind tests,pull up
last piece of refactoring wrt ,pull up
performed total rename to directmemory,rename
refactoring and cleanup f the index deligate code,pull up
o update pax logging dependencies version to o clean up pax wicket service dependencies scope declaration o add paxwicketintegrationtest this is the base class for pax wicket user to do integration test o update lifecycle test case accordingly git svn id b a c ae a bc d a bd,pull up
many changes improvement on image loader grouped importer stitching abstractimageprovider replaced getimagebytile by getpixelsbytile and the method now support region loading array dutil added copyrect method for easier rectangular copy classutil added getjarpath class method icycolormap minor fix on copyfrom method icyexceptionhandler error report now use the webinterface method imageutil added gettilelist rectangle region method loader reworked getsequencefileimporters methods to be more generic moved file grouping in separate class reworked sequence loading building from multiple file minor tweak on preview panel lociimporterplugin added automatic stitching if needed added metadata level selection using flags in open method reverted groupfiles property back to true by default implemented getpixelsbytile method with region loading support added region loading support to getimagebytile method added sub resolution support to getimage iformatreader method added sub resolution support to getpixelsinternal iformatreader methods added sub resolution support to getimageinternal iformatreader methods sequence tweaked getoverlays class method added getselectedroiset class method added getselectedrois class roiclass sorted wantreadonly method seriesselectiondialog now use sequenceidimporter instead of sequencefileimporter importer systemutil getjavaversionasnumber now returns java version as major numbers xx xx xx xx lut minor fix on setalphatoopaque method omeutil added getnonnegativeinteger int method plugindescriptor better information recovering for bundled plugin documentation fixes,inline
move common code to abstractdatacomposer,pull up
removed evaluation process package,push down
refactored postfix expression evaluation using reflection for operators,move
removed unused event source code moved parts to pb,move
removed example and renamed aeshexample to example renamed some commandinvocation methods,rename
move public test params to basestripetest add customertest and refactor chargetest,pull up
exojcr refactoring jcr org service,inline
renamed protocolcontext to protocoltools to better reflect its purpose fixed remaining test failures by moving validation from the projection rules where the model may not yet be complete enough to a validation rule that is triggered on the projected local model,move
luka sri merged treatment complete into reason for closure and renamed it to treatment outcome,rename
removed assertstructureequals from doc,pull up
added processingqueue made processingqueue process protected should not be called from outside the class added punch hole and close hole events serializing state requests at the state provider added hole punching to barrier correctly setting tcpping initial hosts in unit tests added support for get current view after a state transfer has completed called by the state requester jchannel getstate now throws an exception if there s a timeout added tests for blocked threads to barriertest punching hole for state requester provider handling exception on close barrier discarding messages when barrier is closed storing only last message re delivering those messages when barrier is closed not skipping blocked or waiting threads timeout on close barrier if threads cannot be flushed statetransfertest now tests all state transfer protocols fixed another bug in blockinginputstream also backported to barrier lets messages unicast or multicast with a skip barrier flag pass added skip barrier flag to message removed barrier closed this is handled by barrier directly,inline
rename querycount attributes,rename
rf panel menu rename icon attributes,rename
add refreshall to addepisodelistener the only class that currently implements addepisodelistener is resultstable and it already had a refresh method but rename the method to be a bit more generic make it public and make it part of the addepisodelistener interface,rename
faces move faces config processing from liferay faces bridge impl to liferay faces util,move
refactored tradecalendar split into tradecalendar and tradecalendarmanager remove country specific calendars and replace by trade calendar display holidays of the current year on the preference page issue ,move
work for her add multiple queues per host parallelqueues capabilities to queueassignmentpolicies longtointconsistenthash java test consistent hashing utility class uriauthoritybasedqueueassignmentpolicy java shared superclass for the hostname and surtauthority qaps setting for defertoprevious avoid changing assignments setting for parallelqueues when consistent hash uris across that many separate queues with numerical suffix surtauthorityqueueassignmentpolicy java hostnamequeueassignmentpolicy java refactor to derive from uriauthoritybasedqueueassignmentpolicy queueassignmentpolicy java add apache license hop java add string representation for convenience,pull up
moved transfer location logic to thawlocationprovider the tests wanted me to move the transfer location logic away from the thawbuckettransferer so i did and it s much better in addition the location to transfer to is guaranteed to be non existing ,move
massive list of modifications moved utility methods checked for no configuration added warnings to misspelled presets added the ability to specify multiple presets in options,move
revising the dsr script jdbcfetch rename and comments,rename
code cleanups reordering and refactoring,extract
add marshallingexception,extract
finally added the ability to project new documents into the lsa lsi documentspace lots and lots of other minor fixes and adjustments to make this workand or debuggable modified src main java edu ucla sspace basis basismapping java fixed javadoc typomodified src main java edu ucla sspace common generictermdocumentvectorspace java sped up the token counting with a counter classmodified src main java edu ucla sspace common similarity java added a new version of spearman s rho that accounts for ties as reported inthe nonparametric statistics handbook however this new version doesn t seemto agree with existing results despite matching the examples in the book modified src main java edu ucla sspace common statistics java added support for getting the mode of a sequencemodified src main java edu ucla sspace graph abstractgraph java added support for pre allocating the number of vertices and edges in a graphto avoid having to rehash large graphsmodified src main java edu ucla sspace graph chinesewhispersclustering java fixed some bugs probably pushed primitive shuffle to primitivecollectionsnew file src main java edu ucla sspace graph compactsparsetypededgeset java alternate implementation of edge sets that is vertex pivoted instead oftype pivoted not sure how to expose this as a configurable paramater yet modified src main java edu ucla sspace graph sparsetypededgeset java reworked to be type pivotedmodified src main java edu ucla sspace graph sparseundirectededgeset java added support for preallocating space for new edgesmodified src main java edu ucla sspace graph sparseundirectedgraph java added support for preallocating space based on the expected size of the graphnew file src main java edu ucla sspace graph io pajekwriter java added minimal support for writing in pajek formatmodified src main java edu ucla sspace lsa latentsemanticanalysis java lots of fun to tweaks to support new document projection tightened the class constructor to only allow svd dimensionality reductions since this is lsa proper modified src main java edu ucla sspace mains lsamain java reworked to use the new singularvaluedecomposition interfacemodified src main java edu ucla sspace mains plsamain java note this code is now broken we probably need to have a new middleabstract class between generictermdocumentspace and lsa plsamodified src main java edu ucla sspace matrix abstractmatrix java added a useful tostring fixed equals which was broken but for still unexplained reasons modified src main java edu ucla sspace matrix arraymatrix javamodified src main java edu ucla sspace matrix diagonalmatrix javamodified src main java edu ucla sspace matrix growingsparsematrix javamodified src main java edu ucla sspace matrix rowmaskedmatrix javamodified src main java edu ucla sspace matrix transposedmatrix java now extends abstractmatrixmodified src main java edu ucla sspace matrix basetransform javamodified src main java edu ucla sspace matrix correlationtransform javamodified src main java edu ucla sspace matrix globaltransform javamodified src main java edu ucla sspace matrix logentropytransform javamodified src main java edu ucla sspace matrix loglikelihoodtransform javamodified src main java edu ucla sspace matrix pointwisemutualinformationtransform javamodified src main java edu ucla sspace matrix rowmagnitudetransform javamodified src main java edu ucla sspace matrix tfidfdocstripedtransform javamodified src main java edu ucla sspace matrix tfidftransform javamodified src main java edu ucla sspace matrix transform java now supports applying the transform to new documents column vectors thatweren t in the original datamodified src main java edu ucla sspace matrix notransform java now properly supports globaltransform so it can be used in lsamodified src main java edu ucla sspace matrix matrices java better error messagemodified src main java edu ucla sspace matrix svd java updated to use the new singularvaluedecomposition interfacesmodified src main java edu ucla sspace matrix factorization abstractsvd javanew file src main java edu ucla sspace matrix factorization singularvaluedecomposition javamodified src main java edu ucla sspace matrix factorization singularvaluedecompositionlibc javamodified src main java edu ucla sspace matrix factorization singularvaluedecompositionlibj javamodified src main java edu ucla sspace matrix factorization singularvaluedecompositionmatlab javamodified src main java edu ucla sspace matrix factorization singularvaluedecompositionoctave java added new interface for the svd which supports returning the u s and vdecomposed matrixes and not their premultiplied formmodified src main java edu ucla sspace text worditerator java removed private protection on the current line so subclass could inspect itmodified src main java edu ucla sspace tools iterativebigramextractor java fixed typo in command line optionsmodified src main java edu ucla sspace util krippendorffsalpha java added support for computing alpha using the interval level of measuremntmodified src main java edu ucla sspace util objectcounter java fixed bug in min max new file src main java edu ucla sspace util triple java yet another tuple objectnew file src main java edu ucla sspace util primitive doublepair java primimite pair to match intpairmodified src main java edu ucla sspace util primitive intpair java fixed formattingmodified src main java edu ucla sspace util primitive primitivecollections java added the ability to shuffle an int modified src main java edu ucla sspace vector sparsehashdoublevector java now extends abstractdoublevectormodified src main java edu ucla sspace vector sparsehashintegervector java fixed performance bug where the magnitude was not cachedmodified src test java edu ucla sspace common similaritytest java added more unit tests for spearman s rhonew file src test java edu ucla sspace graph compactsparsetypededgesettests java new unit testsmodified src test java edu ucla sspace graph sparsetypededgesettests java more unit testsnew file src test java edu ucla sspace lsa latentsemanticanalysistest java tested project based on worked example on websitemodified src test java edu ucla sspace matrix arraymatrixtests java added test for matrix equalitymodified src test java edu ucla sspace matrix filetransformutil java added test for new transform behaviormodified src test java edu ucla sspace matrix rowmaskedmatrixtest java added weird debug to try to figure out what was going with arraymatrix equal new file src test java edu ucla sspace util krippendorffsalphatest java added unit tests for some of alpha s possible computationsmodified src test java edu ucla sspace util objectcountertest java verified min max new file src test java edu ucla sspace vector abstractdoublevectortest java added test for equals,extract
method rename,rename
rename mapsubreport to imagessubreport,rename
replaced channel with jchannel moved jchannel myprobehandler into separate class jchannelprobehandler,move
refactor routines package to provide localized pattern support provide currency and percent support for all numeric types and improve junit test cases git svn id f bb ffa edef ,push down
clean up some overly complex code by extracting usefully named methods parse is still super complex,extract
inlined the weakreference to ease following the test,inline
minor rename,rename
redesign of classic blocking connection management apis git svn id f bb ffa edef ,pull up
added test in functional tests for using a single stage group now uses unique uuids as ids to avoid tests interfering extracted classes linearpipelinebuilder and stagebuilder,extract
refactoring the symbol table a bit added some interfaces moved the astclassbodydeclaration into basicscopefactory git svn id baf d a c fc e d,push down
remove factions update logic,inline
 move methodretrievalprocessor allenclosingelementsincludesuper to executables getallenclosingexecutableelements and replace any elements getallmembers calls with it to create a fixed order of property mappings,move
ashish sush added csv builder renamed controller method refactored callback request to retrn enum value of operator instead of string,inline
roi added cansetposition and setposition d methods added cansetbounds and setbounds d methods added contains roi and intersects roi methods added roi darea and roi darea icycanvas and canvas d implements the new d support from roi overlay reworked the roi panel for better d support not yet completed sequencedataiterator and imagedataiterator implements the new d support from roi booleanmaskd added contains booleanmaskd and intersects booleanmaskd methods roi are now implemented as plugin roi classes moved fill sequence operation now use the roi properties to get the region to fill rectangled fixed union and intersection operation with infinite dimension added dimensiond classes,move
rename getlastlocation getcurrentchunk,rename
df qcadoomes moved filling quantities to beforerender from listener,move
refactor extract class portinput add getport accessor extend tests,push down
renamed getcolor to getprefix in player,rename
jcbc api for prepared statements motivation in n ql dp prepared statements are a bit different from parametrized statements executing a prepared statement requires two steps obtain the query plan then later on execute the query plan modifications added classes to represent a prepare statement the one for step that allows to obtain an execution plan and the queryplan itself preparedquery now uses the queryplan and can value parameters added methods on async bucket to obtain a queryplan from a preparestatement step is just using a preparedquery in the existing method refactored the various query classes with a common base abstractquery fixed the unit tests in queryton qltest added an integration test for queries work in progress result users can now obtain a queryplan from a statement and execute said plan change id i b cba adeeaf d a b b d d ec e f cc reviewed on tested by simon basl√© reviewed by michael nitschinger,pull up
removed items deprecated in x series git svn id f bb ffa edef ,inline
renamed static function,rename
test framework make templatedir restore also work when starting embedded lily related to this moved basecli readversion to version util class in hbaseproxy solrproxy and lilyserverproxy don t clear data on startup when cleardata flag is set this should only be done on shutdown otherwise the templatedir serves no purpose git svn id svn ssh dev outerthought org outerthought lilyproject trunk b d f e bd e a dc ,move
changes to the pdxdiskstoreawarebeanfactorypostprocessor class based on code review by david turnaski in pr for jira issue sgf ,inline
added new class writer that is cleaner,extract
fixed up the intention templates added tail recursion gutter marker improved the automated error reportign a bit more try to make the kahlua runner open its own window remove the default underline formatting for tail calls improve robustness of the parser under error conditions,extract
fix error in interval test do all road checks again when a house was moved from one road to another code for optimization of segment lengths not yet enabled git svn id d f ee a dfeeeb ,move
improve,push down
extend functionality of resourcemanager to be able to handle ipv and ipv multicast addresses,push down
preparations for new biomemode a new biome mode will soon be added to simulate the old pre biomegroup behaviour a little bit of refactoring is useful for this to avoid code duplication an abstract layeredbiomegenerator class has been added normalbiomegenerator and fromimagebiomegenerator now inherit from this biomemode fromimage is no longer handled by special cases in the biome code the layer creation code has been moded to a new class layerfactory,pull up
karaf added a basic implementation of remote services dosgi git svn id f bb ffa edef ,extract
pulled out lucene specific code into lucene parent class,pull up
another step in updates the bit integrity handler to retrieve the space manifest and perform a comparison to the generated item listing also moves some constant values to execconstants git svn id ed cd a f c be b fe bcb,move
weldx rename managedproducer to unwraps,rename
refactored removed old unused author synonym filters moved the author synonym dumping into batch finished test for it removed writeability from the author collector,move
splashscreen now dynamically fetch image files fixed minors issues in the lut gui event metadatautil time interval field is automatically calculated from timestamp when possible added getpositionx y z and gettimeposition methods vtkcanvas better channel initialization fix some crashes,extract
resolve browse beans issue after built pre launch jobrelatedresource catch invalidpropertyexception render as red error message rather than fouling entire trace of beans to web ui statisticstracker rename getsnapshots to listsnapshots to prevent interpretation as invalid bean property,rename
fix embpd ,push down
renamed method on the elementqualifier interface,rename
hopefully the last of the big exceptions refactorings i went through all of the places we re adding context to our errors object and made sure we re never doubling up specifing the same injection point or key multiple times the new errors have nice at lines for parameters fields and linked bindings hopefully this makes it easier to follow the stacktraces additional context such as the binding s origin in a module could be added later if desired currently we have module specific sources in creationexceptions and plain old binding sources elsewhere the end result is messages that can look like this com google inject provisionexception guice provision errors error injecting constructor java lang unsupportedoperationexception at com google inject provisionexceptiontest reald provisionexceptiontest java at binding for com google inject provisionexceptiontest reald class provisionexceptiontest java at binding for com google inject provisionexceptiontest d class provisionexceptiontest java error git svn id d f a b b b d aecad e,move
added getguilayout as a full method higher up the infrastructure removing a lot of redundant code further down git svn id bcaee e b e be a d c f fc ,pull up
hv moving tests related to handling of illegal method parameter constraints to separate test class,move
refactored arrayssolverdebugger to also support multi vehicle solvers,move
add cachedthreadstatesgaugeset,extract
introduced parsesettings for tag and attribute name case options,push down
moved createserversocket from connectionmap util using new method in connectionmap and fd sock,move
rf classes and icons are renamed,rename
add initial support for mom to e many of the values are not currently supported but the basics are now complete for e mom support including the proper serialization of those attribtutes of hlafederate and hlafederation that are supported new test additions have been included as have refactorings of the major mom data providers to deliver values in format that is properly encoded depending on the version of the interface being used this has also triggered some changes through the tests to match this fix ,inline
rename ipsec psk generation to reflect the fact that it is a psk,rename
renamed test,rename
her make extractors interrogate for charset fetch charset instances rather than string names,extract
o upadated surefire snapshot to build with removed all dead code that had to be left in there because surefire cannot currently be isolated from itself git svn id f bb ffa edef ,push down
start to create new layout for the toolbargroupdodckstation new version in this purpose the main panel of an abstracttoolbardockstation is defined in the subclasses an no more abstracttoolbardockstation class itself,push down
extracted jump method useful to force jump on platformerentity forexample as response on collision with enemy,extract
some minor cleanup to territoryaccess source code,extract
renamed a method united classrawdata and adjacencynode temporarily to allow for easier changes preparing for the implementation of double filerawdata in order to implement the incremental acd correctly and also hotspot modification notifications,rename
 separate quick fix for workspace mapping cleanup signed off by igor fedorenko,pull up
refactored some date to jdk time methods out of sqlbasedao added preliminary law processor code optimized imports,pull up
move test method testdownloadandrename the testdownloadandrename doesn t really rename anything it actually is a test download episode title test as such it s primarily testing the program s ability to look up shows and listings this is all dependent on the provider so it really much more belongs in thetvdbprovidertest rather than tvrenamertest the method does also test tvrenamer parsefilename but that s redundant that s exactly what the method testparsefilename does and testparsefilename does it better as a first step i m simply copying all the test data and moving the test method from tvrenamertest into thetvdbprovidertest this will be refined in future commits,move
if number of substitutions of candidate type is zero then this type is not removed as it seems to be a root type fixes conversion to plural form now features better property customisation check fixed broken argument processing xml marshaller in unit tests is now schema enabled added more xmls added case for xsd anytype improved line and branch coverage updates readme with respect to future release,extract
fixes clean ups and getting tests that were moved here to run eclipse launch working tests pass and app exits,move
jcbc improve writability of integration tests motivation when writing an integration test case that has special requirements like a dedicated bucket avoid the flush phase use a different bucket name it has become very difficult to rely on inheritance of clusterdependenttest base class as junit doesn t behave very well with abstract parent classes there was a need for a different more flexible approach modifications most of the code mutualized in clusterdependenttest has been moved into a couchbasttestcontext class this context holds the references to the cluster bucket bucketmanager etc it also provides utility methods to perfom assertions on the context eg is n ql available and lifecycle management cluster disconnect such a context should be created in a beforeclass method on each test case instead of it extending clusterdependenttest by using the couchbasetestcontext builder builder clusterdependenttest has been made deprecated and is mirroring the old behavior by relying on couchbasetestcontext internally thanks to that tests that were previously ignored have been reactivated results using the couchbasetestcontext with the associated builder allows for far more flexible integration tests for example it is possible to set a specific bucket name then to have it being created in an adhoc way by appending a timestamp to the given name so that it can be destroyed after the testcase change id ibf a ec d fa f ca bf cd bc reviewed on tested by simon basl√© reviewed by michael nitschinger,move
rename xxx xxxinseconds minutes etc,rename
refactoring and cleanup f the index deligate code,push down
refactored dictionaries portlet to use wrappers instead of model,move
refactor and fix pst processing,push down
useless method inlined,inline
rename snapshot to checkpoint,rename
refactored rule base classes around rule interface instead of around ast visitor interfaces long term goal is to support additional languages beyond java organized like so pmd abstractrule core rule implementation pmd xpathrule core xpath rule implementation pmd java abstractjavarule java specific rule implementation pmd jsp abstractjsprule jsp specific rule implementation pmd xxx abstractxxxrule language xxx specific rule implementation this is a start there s a much larger reorganizing effort to get things in sync additional work is needed on generalizing xpathrule git svn id baf d a c fc e d,pull up
jcbc index management experimental api second iteration motivation after the first experimental api implementation in jcbc an sdk rfc was created and a few elements received feedback hence this second iteration modifications new specific exceptions have been added for case where index creation is attempted on already existing index and where drop of an index that doesn t exist is attempted the watchindex method has been removed in favor of just using the more generic watchindexes with a single parameter change id i cf f b d a b a bafb a c reviewed on reviewed by sergey avseyev tested by simon basl√©,inline
improved overall code quality and added further tests,extract
bug aspects deadlock when using equinox aspects and spring dm extender parsing of aspect definitions moved to bundle resolve event,move
added pgp enhancements,extract
update notification preferences ui under construction b change getpersonmodelview to be oauth friendly and clean d ,inline
rename joinpoint binding,rename
hv create an interface for constraintvalidatormanager,push down
check method s parameters move compilationunit to containermanager,move
renamed test case to match machine name,rename
major refactor to start process of eventually moving content manager classes into separate module for now they are moved to a different subpackage but remain in the kenyaemr module until all dependencies on kenyaemr are removed,pull up
renamed method,rename
one more refactoring to minimize dependencies,push down
added liking refactored bulk activities mapper,inline
refactoring propper support for variables and function calls variable function path libs are now in seporate package refactored moving to context step by step,move
reworked report builders so that they can display descriptions and tags are defined on the reports themselves rather than the base classes,push down
added documentation to subroutines refactored buffer local variables a bit refactored subroutines handling strategy,extract
rhbz rhbz squashed commit for zanata init command commit ab cefde b a cc ecd e b df author patrick huang date thu aug rhbz handle not exist src dir commit dea e c d bd c db a d e eea author patrick huang date thu aug rhbz check server is compatible to init command commit fe f e c c f f author patrick huang date tue aug messages change commit b a bd c fc b a a d b c d a e author patrick huang date tue aug change message template to match prompt commit dd bc a c a author patrick huang date tue aug fix exception type and tests commit cc b d c e fc b c c ff e author patrick huang date tue jul change copyright year and a few messages commit ec adde e dbec d aa f c d author patrick huang date tue jul improve message commit f bd ab f d e de fee cbd author patrick huang date tue jul remove unique from project id prompt commit b d cbddc dbc e f d a a cbf f author patrick huang date tue jul rhbz handle when there is no server url in user config commit cec f a a ff ba bb a a d f e author patrick huang date tue jul refactoring commit c f f d fa df a d d author patrick huang date tue jul rhbz rename method and static import commit f e f d fb de dd bdc f a ebc b d c author patrick huang date tue jul rhbz refactoring commit e ad fa e a b b b a author patrick huang date mon jul rhbz extract methods in userconfighandler commit baa eab dc d ebbf db author patrick huang date mon jul rhbz refactor project source and trans prompt commit cdf efc baeac c d d d author patrick huang date mon jul add copyright to files commit d ed d ab bca baa da c bf author patrick huang date mon jul rhbz extract methods in projectconfighandler commit a ddda afaee f e a ea author patrick huang date mon jul rhbz extract methods in initcommand commit c dbf b ef ab b d c c cc author patrick huang date mon jul remove updatechecker from production code pending story and rfe commit fa af e a ad bd ccbf c b a c f b author patrick huang date mon jul rhbz missing resource key will log an error commit e a f f f f f ec author patrick huang date mon jul rhbz rename methods in optionmismatchchecker commit c ebebd bc deb b ee author patrick huang date mon jul rhbz rename class mode to displaymode commit ac cb bff c c b be f e c author patrick huang date mon jul rhbz rename class commit bb c bfc f da df bae cb author patrick huang date mon jul rhbz refactor initcommand extract method etc commit a f f e e cb f e eb e a ef author patrick huang date mon jul rhbz refactor class that expects user input commit db a f dcb e de b e d ade a author patrick huang date thu jul rhbz add color output and change some messages commit f c a f fc c b ee author patrick huang date wed jul rhbz able to filter project in long list commit a fa fee a e b acd aa d f author patrick huang date fri jul rhbz check key availability in resource bundle commit a a ffe b de author patrick huang date wed jul rhbz check if there is newer version of client available commit fe e a e cb fc e fa cf b c daf author patrick huang date thu jul rhbz externalize strings to properties file commit e a e b ebfebc e b a eb d author patrick huang date tue jul rhbz add init to zanataclient commit c c d b c b fa b c add dcc f author patrick huang date tue jul rhbz fix minor issues and print what s next suggestion to user commit e a f f b f cba f f author patrick huang date tue jul rhbz refactor and clean up code commit f f d c ced b d a author patrick huang date tue jul rhbz refactor to extract project and version prompt to separate classes commit caf c f b a e ff d bdf ce author patrick huang date tue jul rhbz refactor extract project config handling to separate class commit d f be a b f eb ed c f fede edc author patrick huang date mon jun rhbz refactor extract to separate class commit f d f d dc e cca author patrick huang date mon jun rhbz refactor test and mock server commit c d b a d ec e fc bdc author patrick huang date fri jun rhbz add init mojo as maven goal commit f cc b ef f ba c ded c c author patrick huang date fri jun rhbz prompt user for trans dir commit a a a a c da d c e author patrick huang date fri jun rhbz use index number to select project and version commit cb b dfc baf d d e b ae dc author patrick huang date fri jun rhbz src dir includes and excludes prompt commit f e a cb e f ff a ac c fd author patrick huang date fri jun rhbz refactor zanataproxyfactory to allow not eager rest version call commit ec dd f e ddbc f c author patrick huang date thu jun rhbz add includes and excludes to zanata config commit c a da cc d a ec c b author patrick huang date thu jun rhbz pull up includes and excludes to project configuration commit d a b bd b b b ca a a a author patrick huang date thu jun rhbz rhbz add src dir and trans dir to zanata config commit e ef e b a c a f ac author patrick huang date thu jun check for potential wrong src dir in podir project commit e a d a edeb f a d be d cff author patrick huang date mon jun rhbz create init command commit c ebac da fd fc f c bbecdc e author patrick huang date wed jun add friendlier message to inform user server is not up,move
her jdk u breaks gzippedinputstream w arcreaders with different gzip handling gzipmembersinputstream new workaround class that offers choice of pre post jdk u behavior and new accessors for finding member boundary offsets gzipmembersinputstreamtest test for above archiveutils arcwriter move static compress utilities to archiveutils archivereader w arcreaderfactory w arcwritertest adapt to use gzipmembersinputstream gzippedinputstream test deleted,move
updates to support caching around extraction of sub files from rootfiles,extract
change strategy of range annotation processing all structure will be pass to new file but no content inside them it protects xml structure but nothing will be printed,inline
more demo cleanup,pull up
refactoring commandline,pull up
canvas mouse canvas position moved in base icycanvas class d mouse image position moved in icycanvas d class icytextfield removed the consumecharkeypressevent property icyframe added getinputmap and getactionmap methods roi general performance improvement on draw and mouse events removed useless mouse position information fixed shift combination shortcuts accidently enabled on text fields better headless support fixed wrong null sequence report limited maximum memory to mb for bits jvm to reduce the cannot create native thread error minors others fixes,inline
changed johm persistence paradigm to jpa like from inheritance like to make api use annotation driven and minimally invasive conflicts readme md src main java redis clients johm collectionsortedset java src main java redis clients johm johm java src main java redis clients johm model java src main java redis clients johm nest java src main java redis clients johm collections redislist java src main java redis clients johm collections redismap java src main java redis clients johm collections redisset java src main java redis clients johm collections redissortedset java src test java redis clients johm collectionstest java src test java redis clients johm searchtest java src test java redis clients johm models item java src test java redis clients johm models user java,inline
additional unit tests,extract
refactored builders for supporting multi inputs and named outputs seamlessly,move
 let match find match child match children and similar methods be namespace unaware ignoring namespaces add fastfilter joox matchtag string regex boolean ignorenamespace as a utility to search for tags ignoring namespaces,rename
tp moved version checking from handlesinglemessage and handlemessagebatch into receive tp implements both receive inputstream and receive byte baseserver discards length bytes if no receiver callback has been installed tcpconnection now doesn t create intermediate buffer but passes the input stream directly to the receive callback gossiprouter routerstub now implement both receive callbacks pubclient pubserver now implement both receive callbacks roundtrip receive never used correct offsets to read data,extract
add timing metrics just around the htable flush this is the corresponding patch to the tighter hbase timing branch which added the same functionality to the stable release,extract
add support for ssl tls upgrade of an existing netsocket,extract
move copypoms property from abstractfromdependenciesmojo to copydependenciesmojo git svn id f bb ffa edef ,push down
searchbar integration search in plugin protocol and kernel command beta version has some bugs need a bit of refactoring new roi panel can change size and position depending the roi type added subtraction boolean operation added surface volume information added pixel intensity information roi added getvolume method return volume in number of pixel added getperimeter method return perimeter in number of pixel added getdimension method return number of dimension booleanmask d added getpoints method return points composing the mask added getcomponents method return independent mask object added getedgepoints method return mask contour points added getcomponentspoints method point d d d uses the same form as java point d with new integer type do not longer extends vecmaths objects no more compatible rectangle d d d uses the same form as java rectangle d with new integer type centralized all kernels menu commands to actions fileactions all file commands preferencesactions launch preferences panel commands sequenceoperationactions sequence manipulation commands windowactions window arrangement opening commands generalactions all others commands canvas d added image displacement on keypad keys added void translate method icyabstractaction now supports background action execution with progressbar added getrichtooltip method to retrieve the action richtooltip icycommandxxxbutton now support icyabstractaction improved histogram display can now directly open an image in the serie selector by double clicking on it sequence operation frame are now modal dialog added abstractsequencemodel class for easy sequencemodel implementation added pluginsearchprovider interface a plugin implementing this interface provides results for the global search bar added icyframe getvisiblerect method added methods to lookandfeelutil added swimmingobjectchooser component to select specific object type from the swimming pool added weakwindowfocuslistener class added pluginrichtooltip class lot of others minors changes and improvements bug fixes clean up and refactoring,push down
rename openimage openstream for consistency with swift,rename
v koti aravind moved creation of care doc from kilkari campaign service to help option handler,move
her refactor parameterizable policies out of frontier defaults xml update bundled profile for new chains refactoring crawlcontroller java move to three processor chains rather than one frontier java loadseeds removed toethread java delegate most processing loop to fetchchain and dispositionchain abstractfrontier java workqueuefrontier java move policies calculation out to processors candidatesprocessor java new processor for dispositionchain that runs every outlink through candidatechain crawlstateupdater java dispositionprocessor java rename expand to prep crawluri for frontier frontierscheduler java deleted use candidatesprocessor candidatechain linksscoper java deprecated use candidatesprocessor candidatechain candidatescoper only temporarily retained for ease of comparison candidatescoper java simple single uri scope testing for candidatechain frontierpreparer java precalculate all frontier policies in candidatechain before scheduling preconditionenforcer java processoruri crawluri take on some prerequisite preparation previously deferred to elsewhere processorsreport java update for chains of processors sheetoverlaysmanager java applyoverridesto moved here for broader use candidatechain java fetchchain java dispositionchain java role specific subclasses of processorchain suitable for type based autowiring crawluri java new fields accessors of use to new chains frontier postprocessor java deleted skip to postprocessing is now skip to end of chain processorchain java take on control loop formerly in toethread processresult java absorb processstatus eliminate problematic stuck result,move
merged and simplified attribute extraction from class definition,extract
added setpattern,extract
finished draft of ensemble refactor,move
toby moving slice helper methods into a private innter slicehelper class so that it is clear they are only used by slice,move
jcopter common wca renamed invokenode getimplementingmethod added methods to wcetprocessormodel to get cache miss costs for invoke sites and returns new method cache analysis refactored execcountanalysis added some helper methods to common,rename
added navigation history across iview instances fixed some glitches with editor focus ownership and caret movement but still way to go,move
rename via to pia preparing to create a pia interface and one or more parallel io device implementations,rename
factor out more netty configuration specifics into the config builders this change mainly adds control over number of boss and worker threads for the netty channel factories used by the netty client and server thread pools it also renames nettyconfigbuilder to nettyserverconfigbuilder to contrast with nettyclientconfigbuilder and turns the config builders into actual builders they were just used directly before,rename
renamed stringcontains to containsstring,rename
fix lbcore htmllayoutbase now takes into custom conversion words moved stringlistappender to c q l classic testutil package,push down
rename watchtree to simulationtree and remove some old code,rename
extract generic octal formatting method to simplify code and eliminate array copieschange leading padding to zeroes as that is more compatible and required for posix git svn id f bb ffa edef ,extract
extracting the amf reader from the writer providing a jackson json provider git svn id c b a b b d e ,extract
refactoring graphbuilderutils,push down
refactored to more pure mvp,push down
env pom xml updated csvtordf moved to demo global arglist and string constructors are private arglist constructor is protected use argparser s parse string instead public library constructors created where missing bad input checks added where missing diff collapsed two library constructors into one demopsmerge use new diff constructor jdbcfetch constructor init method cleanup nihfetch pubmedfetch pubmed nlmjournalfetch moved into separate fetch nih package to allow sane use of protected access modifier nihfetch constructor cleanup qualify constructor cleanup and use stringutils isblank rather than messy null and empty checks glozetranslator constructor cleanup use xmlschema lolz how long has this been broken sparqltranslator deprecated due to being completely non functional but some work done to get this working csvtojdbc removed init method in favor of calling a real constructor fileaide add gettextcontent methods and a commented out getcontent byte array method argparser use addargument method rather than directly adding to options list in constructor for uniform method of adding args jenaconnect truncate now uses critical section locks recordhandler began adding infrastructure for recordhandler tool jenaingestworkflowprocessor workflowontology starting harvester integration work pubmed translatetest used proper constructors testing of arg parsing should be performed in the arg parsing tests,inline
need to refactor a global projection barrier,inline
added a trim that also trims nbsp,extract
patch to improve the performance a little by reducing the number of calls to size primarily and to reformat the code somewhat to match the rest of jdom always using brackets space indents thanks to brad for putting it together jh,inline
wcet big refactoring of the method cache analysis now the methodcache model and the methodcacheanalysis are cleanly seperated,push down
add possibility to add none cfml source file to a archive ,extract
merged revisions via svnmerge from r redsolo on apr line added new files for ucm activity based change log r redsolo on apr line moved command lsactivity to cleartool r redsolo ti maj line move cleartool executable string into hudsoncleartoollauncher r redsolo ti maj line removed cleartool executable string away from cleartool implementations r redsolo ti maj lines applied path for ucmactivity and ucmhistorybuilder from henrik added outputformat and cleartoolformathandler to help with the clear tool formatting r redsolo to maj line clearcase plugin add ucm parsing of changelog xml patch from henrik r redsolo to maj line clearcase plugin add test for writing ucm changelog xml r redsolo to maj line clearcase plugin added changlogaction from henrik r redsolo to maj line clearcase plugin lshistory now returns reader instead of change logs r redsolo l√∂ maj line clearcase plugin finished importing ucm changes from henrik r redsolo s√∂ maj line clearcase plugin added patch to remove the view from ucm activity from henrik lynggaard r redsolo s√∂ maj line clearcase plugin more test files r redsolo s√∂ maj line clearcase plugin corrected tests for ucmchangelogaction r redsolo s√∂ maj line clearcase plugin fixed failing tests for lshistory ct command r redsolo m√• maj line clearcase plugin fixed change log parsing for base and ucm scms r redsolo m√• maj line clearcase plugin fixed compile error and tests r redsolo m√• maj line clearcase plugin applied patch to remove the view from ucm activity r redsolo m√• maj line clearcase plugin applied patch to add sub activities to change log r lynggaard on maj line dummy change to test developer access r lynggaard on maj line clearcase plugin branch ucm changelog page converted to activity based changelog r lynggaard on maj line clearcase plugin branch preparations for ucm tagging support need to expose the mkbl cleartool command r redsolo to maj line clearcase plugin made get methods in ucm ucmactivity exported r lynggaard to maj line clearcase plugin branch build extended changelog changelog since last not failed build r lynggaard to maj line clearcase plugin branch lsactivity needs the viewname r lynggaard fr maj line clearcase plugin branch if the user writes stream as part of the stream name then strip it r lynggaard fr maj line clearcase plugin branch extra unittest to locate issue r lynggaard fr maj line clearcase plugin branch cleartool is particular about parameter ordering r lynggaard l√∂ maj line clearcase plugin branch add tostring method for easy debug r lynggaard l√∂ maj line clearcase plugin branch improve ucm specific changelog issue r lynggaard l√∂ maj line clearcase plugin branch ensure changelog action is reset for extended changelog r lynggaard l√∂ maj line clearcase plugin branch improve ucm changelog provide stream and user for sub activities r lynggaard l√∂ maj line clearcase plugin branch remove seconds from ucm changelog r lynggaard s√∂ maj line clearcase plugin branch fix tokenize issue on branch also r lynggaard s√∂ maj line clearcase plugin branch improve ucm changelog page r lynggaard s√∂ maj line clearcase plugin branch minor change to regexp generation r lynggaard s√∂ maj line clearcase plugin branch new ucm fake cleartool setup r lynggaard s√∂ maj line clearcase plugin branch re enable edittype icons in ucm r lynggaard s√∂ maj line clearcase plugin branch lsactivity should be run from within the view r redsolo m√• maj line clearcase plugin move vob path handling out from lshistory into clearcasescm class fixed so load rules remove the and before they are used in the lshistory command r redsolo ti maj line clearcase plugin no need to quote the command line args as argumentlistbuilder already does it r redsolo ti maj line clearcase plugin fixed problem that was introduced in my refactoring for vob paths r redsolo ti maj line clearcase plugin added tests for getbranchnames r lynggaard on maj line clearcase plugin branch remove full username from changelog as we now rely on hudson users to display that r lynggaard on maj lines clearcase plugin branch defensive code to handle lshistory with empty activity names it appears that most version entries with empty activity names are version or mkbranch items this code is only there to catch it in case some real version has no activity however that should ideally never happen r lynggaard to maj line clearcase plugin branch add additional mkview documentation r lynggaard to maj line clearcase plugin branch small javadoc update r lynggaard to maj line clearcase plugin branch remove old extended changelog code as this is not the way we want to do it r redsolo to maj line clearcase plugin fixed so the changelog actions are adding the c comments to the lshistory format r redsolo to maj line clearacse plugin removed unused class git svn id c de d a be ed b c a,move
added most missing functionality to gmobjectframe fixed and improved some file loading code resnode encapsulated res field gmfilereader fixed a bug when loading gm files with empty sounds changed readsprites and readbackgrounds to use the readimage method made events being loaded get added to start of the list meaning they are in ascending order gmstreamdecoder modified readimage to allow an accurate estimate for inital buffer size added initialsize argument to decompress listener added inner class mlistener to get rid of the unwanted mouselistener methods made various methods static exposed the putnode method for use in gmobjectframe event added copy method to return a duplicate gmobject modified copy to utilise event copy ref added a node field to allow a resource to access it s corresponding node which in turn allows it to access its frame eventframe replaced the replace mode checkbox with a radio group added the ability to duplicate events changed layout slightly so that extra side components only appear when needed gamesettingframe exposed some convenience methods added suggestion to move them to util gmobjectframe implemented most missing functionality new sprite edit sprite sprite preview updates when selection changes still needs to update when sprite changes see todo comment prevents looping inheritance delete event changed eventnodetransferhandler to handle duplicating git svn id f f bc e be cd ,move
yet more refactoring of fieldnamematcher to allow optimized alternatives,push down
big refactoring changed not dealing with shapes but svgelements and shapeelements fixed transforming in path of shapes is respected bugs removeselectedelement in menu doesn t work,pull up
rename and comment on warcwriter stats bits to clarify their use as temporary accumulators on behalf of warcwriterprocessor,rename
more un noticeable stuff renamed cacheset to protectioncache and it now stores a set of hard references to cached protections at some point the other caches will only use weakreferences not hard this will allow more versatile caches so we can use the cache more often while guaranteeing we can keep caches up to date e g when the hard reference disappears the weak references will as well,rename
more tenant repo renames,rename
merged with remote changes,inline
rewritten the state class so that we can gather the information we need to obtain the correct bit widths implements the same cases as before git svn id d f ee a dfeeeb ,push down
wip merge refactoring,inline
simplify codegen and push filtering to caller,push down
more changes towards a massive refactoring of the auctionserver class to be more specific more testable and more sane git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,move
adding missing entry to web xml refactoring and commenting apiservlet,move
even more performance issues fixed i do not guarantee there are no bugs in this build status of what else needs to be done will be assessed later on what has changed if every protection is inside of the cache it is safe to assume that any block not in the cache is not in the database we leverage this fact heavily in this build to give a significant boost to performance caches cache all the computations numerous caches have been added in various places where specific points of bad performance was located at these caches generally only store computationally expensive calls overall this is also significant after the caches are nice and toasty modules before lwc s own module system would broadcast events to every registered module this added a overhead of about k nanoseconds per module if they didn t override the method this has been changed to detect at runtime what methods they have overrided and then only send events to modules that have them overridden we could have modules register what events they use but this would break backwards compatibility with plugins that hook into lwc this uses reflection but is all done on startup so the overhead is minimal the gains is fairly large and worthwhile there is still a potential to shave off even more precious cpu cycles but this will be assessed further once initial results are in for scope here is some example values for events timing is in nanoseconds event before after redstone k k interact k k,inline
refactored criterionview to be better structured use profilesview,pull up
refactoring,inline
rename √§nderung java to pojowithumlaut java,rename
simplified tool api even more the asynchronous ones have less boilerplate stuff to do their work,inline
contentprocessor moved orginal processed fields onto each tree node rather than root content object so each chunk can have both the original and processed removed wrapping content object as it no longer serves a purpose hg rename src main java com opensymphony sitemesh inmemorycontent java src main java com opensymphony sitemesh inmemorycontentproperty java,pull up
katta ashish refactored subscriptionservice to have separate methods of separate actions,extract
rename some internal variables and methods,rename
added support to keep cursors across multiple captures api cleanup mostly in the tools moved properties to anonymous project todo somehow tools are getting incorrect parent frames null this causes their properties to be destroyed,move
pull calcrevisionsfrombuild poll to abstractclearcasescm,pull up
inline helper methods that are no longer needed after f be cc b cd cf e ba relnotes n a created by moe moe migrated revid ,inline
hv renamed site package and classes to location,rename
fixes for nutch changes creation of lib rabbitmq for common functionalities publish rabbitmq and indexer rabbit update of the rabbitmq s library version headers selection from nutchdocument s fields for indexer rabbit optional binding a single or multiple documents into each message options for the creation of exchange queue and binding simplify the configuration options,inline
improve biomegenerator and biomecache handling the biomecache class has it s implementation moved to common our cache is more efficient for our needs than mojang s cache as it can better handle virtual biomes our cache has very similar api to mojang s cache for now previously there was a biome generator called vanillabiomegenerator that had to be special cased now it s up to the implementation of tc common either tc bukkit or tc forge to register a vanilla biome generator that properly implements biomegenerator there is one area left where the vanillabiomegenerator should still be special cased bukkit forge vanillabiomegenerator gets its information from mojang s worldchunkmanager the biome gen base arrays are converted to int arrays if you would use tcworldchunkmanager extends worldchunkmanager to get information from the biomegenerator you would get infinite recursion to make the code more maintainable a check has been added to the forge bukkit vanillabiomegenerator classes as well as documentation to the class,move
simplify configuration ui,inline
refactored rdf steps added cx rdf load cx rdf store and cx sparql,pull up
cleaned up stackimpl and localsimpl by moving logic into typeutils,inline
refactored socketserver so that it extends receiverbase,inline
refactored rdfrelation into a basic executionplan structure,inline
jbide removed hard coded cartridges from openshift java client removed hard coded cartridges from client the only consumers were the tests removed constraints from idomain and iapplication iapplication addembeddedcartridges icartridgeconstraint etc and added latestversionselector allow tests to instantiate standalone cartridges with name and version made abstractcartridgeselector matches public since consumers may want to check individual cartridges if they match the selector moved cartridge selectors to their own public packag moved cartridge selectors to their own public packagee,move
simplification of sharding,push down
aesh added double dash as a marker to signal all values after it are argument values,extract
code formatting reordering rename etc,rename
add a generic interface for trees and randomforests so they can be used interchangeably add support for bagging and random variable selection to randomforest,inline
modules add ability to run a specific class in a given module,extract
removed duplicate customparams for tiledwms layer,push down
minor code comment improvements to service layer renamed some ensure methods as assert when checking client conditions services now indicate whether they use authorisation or not,rename
meclipse add a new mojo eclipse remove cache moved delete file from eclipsecleanmojo into ideutils java added removecachemojo added it tests for removecachemojo added commons io commons io as a dependency git svn id f bb ffa edef ,move
road def pushed down to mapline as it cannot apply to a pointgit svn id d f ee a dfeeeb ,push down
style clean up code,pull up
rename method resolvedestinationgenerictype,rename
additions to remote service admin endpoint listener notification via ecf discovery,extract
inlined keys method,inline
fix lightning normal matrix computation add material colors cleanup code,pull up
rename methods on astifstatement,rename
started refactoring roadmodels created spatialregistry to encapsulate all positional information related to road users,extract
refactored erxstatelesscomponent to extend new erxnonsynchronizingcomponent which makes more sense as the statelessness has nothing to do with the binding resolution per se deprecated valueforxxxbinding created xxxvalueforbinding which is more consitent with the rest of the api,pull up
refactoring change notes,move
rsa additions,extract
rename the new configfile api,rename
test moved from pmtabletest to pageablecollectiontestbase,move
more tests and extracted productgenerator from siteprojectgenerator,extract
enable creation and retrieval of org webhooksmade ghhook abstract and created two concrete subclasses for organd repo hooks created utility class ghhooks to manage creationand retrieval of org repo hooks with minimal code duplication theseare invoked by ghorganization and ghrepository respectively,push down
rename getsocialworkspacecontainer method to getsocialworkspace,rename
mantlr adding antlr report o refactoring to add report support o added test cases o updated documentation o updated dependencies bumped dependencies maven plugin api added dependencies maven reporting impl maven plugin testing harness git svn id f bb ffa edef ,move
hopefully the last of the big exceptions refactorings i went through all of the places we re adding context to our errors object and made sure we re never doubling up specifing the same injection point or key multiple times the new errors have nice at lines for parameters fields and linked bindings hopefully this makes it easier to follow the stacktraces additional context such as the binding s origin in a module could be added later if desired currently we have module specific sources in creationexceptions and plain old binding sources elsewhere the end result is messages that can look like this com google inject provisionexception guice provision errors error injecting constructor java lang unsupportedoperationexception at com google inject provisionexceptiontest reald provisionexceptiontest java at binding for com google inject provisionexceptiontest reald class provisionexceptiontest java at binding for com google inject provisionexceptiontest d class provisionexceptiontest java error git svn id guice googlecode com svn trunk d f a b b b d aecad e,inline
added method for creating custom account limits and added integration tests v tk ,push down
inline helper methods that are no longer needed after f be cc b cd cf e ba relnotes n a created by moe ,inline
refactored hdfs based mapstores and fixed filesystem close issue,pull up
cap updating ajax controller to output json formatted events separated by date this change introduces support for displaying events across multiple days as well as adds fluid based rendering of the event list git svn id f dbab f eb b e eb,extract
resourcemenu opens at mouse position now components correctly sized now still a work in progressgmobjectframe parent and mask now use resourcemenu fixed up sizing a little still a work in progresslistener actionperformed shortened a little by making stringtores method consider extracting to another class actionperformed needs further shorteninggit svn id f f bc e be cd ,extract
inline account initialization,inline
removed button label and renamed clientmessage to errorresponse,rename
rename factory methods for collections,rename
refactor build management and fix xcode scan build to work alongside release configurations,move
added errorreportframe for easier generic report major changes in roi classes warning roi class has more methods better d d and d roi support better booleanmask integration in roi many others changes related to roi and booleanmask in general base kernel roi are now plugins point d point d point d classes improvements rectangle d rectangle d rectangle d classes improvements colormap tabs are now colored to reflect the channel colormap prelemenary bio formats automatic error report added many color conversion methods and tools in colorutil class added overlay isattached sequence method added bytearrayconvert read writexxx methods handy to serialization rewrote sequencechooser class cleaner and updated to new method removed the useless roi tooltips severals fixes and tweaks some refactoring,push down
merged with remote changes,inline
testcase fix and a bit code cleanup change id ic c dca d ca a d e a aaf e ed,extract
further tidying of assessment management views,inline
meclipse incorrect dependencies with different projectnametemplates in submodules eclipseplugin moved calculateprojectnametemplate to ideutils and parameterized ideutils calculateprojectnametemplate is now called once in setup to set the value of projectnametemplate all previous uses of calculateprojectnametemplate now refer to getprojectnametemplate getprojectnameforarifact now checks if the project is in the reactor and uses getprojectnametemplateformavenproject to use that project s name template definition and not the current project s definition getprojectnametemplateformavenproject looks for the variables in the specified project pom and uses ideutils calculateprojectnametemplate to return the project name template abstractidesupportmojo refactored isavailableasareactorproject method body into getreactorproject which returns the project out of the reactor isavailableasareactorproject justs checks for against null from getreactorproject modified test project to use projectnametemplate the side effect of this is that the generated classpath for the web app manifest mf uses the eclipse project name for the jar git svn id f bb ffa edef ,move
improve and make more coherent ssl tls options,push down
rename and expose getrawstatement method,rename
address further pr feedback address confignode pr feedback including add override tags for all tokens methods make children method in confignodecomplexvalue final rename confignodekey to confignodepath rename confignodekeyvalue to confignodefield modify pathparser so it can parse a string into either a path or a confignodepath,rename
renamed the descriptors to match the terminology of the debian policy,rename
renamed simpletouchevent into tapevent,rename
aesh renamed fileresource to resource and defaultfileresource to fileresource added readattributes to resource,rename
major modification added datatype enum class for better consistency in data type modified all methods to support the new datatype instead of the old integer datatype with sign boolean information fixed some bugs in type conversion added generic array methods in arraymath moved from mathutil improved files ordering when loading a sequence from severals files network error now displayed in standard output make some clean up removed old unused classes minors bug fixes here and there,inline
added irc chat added dateutil data utilities class added exttabbedpane component jtabbedpane with externalizablepanel support t and z navigation panel moved to icycanvas so now when you override icycanvas you have to take care about panels configurations canvas d fixed zoom centering when using buttons added invert mouse wheel axis option improved externalizablepanel component it now uses an icyframe for its frame form multi windows mode support completed added overlay support to icydesktoppane easy drawing on application desktoppane added authentification support for networkutil download method others fixes or improvements some refactoring,move
added all elements to parameterenum and associated stub classes,extract
refactoring louds trie,pull up
refactoring graphbase and related classes and adding meaningful errors,pull up
moved bundler and impls out of tp into org jgroups protocols tp bundler string type allows to change the bunder at runtime e g probe sh op udp bundler sender sends changed nobundler to not use a pool of output streams,move
backlog refactor model annotation models,push down
o added javadoc for all the constructors o replaced the non thread safe circular queue by a concurentlinkedqueue o added some constants definition for clarity sake o removed the inner sessionbuffer class o renamed the buffer constants to tasks queue o added comments in the important parts of the code for clarity o renamed queuehandler by eventqueuehandler o removed the maxpoolsize and corpoolsize as they are already present in the parent class o added inheritdoc tags o some other minor cleaning git svn id f bb ffa edef ,rename
moved phase five back to phase four removed existing phase four classes orthology moved phase five classes kam back to phase four updated bel compiler scripts,move
renamed tokenizer and added some complex math ficed the order of function and operator arguments,rename
rework filemover this is pretty much a rewrite of uistarter renamefiles and everything beneath it introduce a new class moverunner to be the driver of individual file moves in the class filemover the uistarter prepares a list of filemovers and creates the moverunner with that list of filemovers the moverunner then executes the filemovers note that now uistarter no longer makes any reference to files path paths callable executorservice executors or future i think this is good those classes were not part of the view move copyanddelete into filemover java and make it a private instance method now that it s private it doesn t have to be so defensive about all the checking it assumes its callers have verified everything is ready to go,move
adds polygon geojson de serialization,extract
rework how pools work to support a shared pool,push down
general cleanup,inline
mongo mapreduce handle collection name extraction from the getcollection function,extract
cleaned up code in example clients,inline
added basic support for twist coordinates and conversion to their exponential format fixed autocode,extract
added two new test refactorings pull to class level push to method level,pull up
merge jgitrepository getindexdiff into isdirtyits the only user anyway,inline
renamed containercreationexception to creationexception shorter renamed factory to locator git svn id guice googlecode com svn trunk d f a b b b d aecad e,rename
patternlayoutbase setcontextforconverters method moved to converterutil minor edits,move
refactored beandiffer to allow for better testing,inline
issue tfj add user geturlentity,extract
refactor to support java when generating scaladoc,pull up
renamed methods,rename
improvement to candidate session launch workflow i have moved the candidate session entry to a separate step after the session is first instantiated this allows an additional page to be presented to the candidate which uses some js to invoke the entry re entry into the session candidates using the back button will end up back at this page which automatically pushes them back into the session again needs a bit of tidying which will be in the next few commits,inline
revert metrics thread context tests and fixes this reverts commit e ade a d a f c eaadc a ,push down
jcbc add tracing to the subdoc api this changeset adds span tracing to the subdoc api alongside related changes in previous commits change id i ab f cd ba c a ec dafed reviewed on tested by build bot reviewed by david nault,extract
java deprecated commentutil move parts to ast comment fix formalcomment,move
bug datainput and dataoutput elements cannot be moved in modeler,move
do not ignore if an mp is tagged with name only this is a partly revert of r mkgmap used the tags of the outer polygons if the mp itself was tagged with name only this is a common tagging error but this tolerant handling produced some errors so revert this this commit also fixes the handling of mps with tags removed by the loader r removed this detection by mistake git svn id d f ee a dfeeeb ,pull up
refactor move bundle dependency lookup to a helper class signed off by igor fedorenko,move
removed unneeded cruft in util,inline
made some refactoring,push down
rtweaver move classvisitor functionality to an inner visitor class,move
jcbc dns srv workaround when ipv nameserver motivation the bootstrap class used to bootstrap the sdk from a dns srv record relies on the default host machine dns resolution in the case where the dns server list configured in the host machine include ipv entries the whole initialization breaks and there s no way of using a different resolution process modifications an additional overload for bootstrap is added that accepts a nameserver ip should be an ipv to use with the dns prefix for direct name resolution instead of attempting to compile a list of name servers from the os the bootstrap test has been amended to use this feature and rely on google s public dns results bootstrap test pass even on a machine where ipv name servers are configured such os configurations can be worked around by providing an explicit name server address if needed change id i c aa c ed e f d b b reviewed on reviewed by simon basl√© tested by simon basl√©,extract
oozie simplify kerberos hadoopaccessorservice code and remove kerberos doas code tucu git svn id f bb ffa edef ,pull up
wagon add unit test for wagon ssh with an embedded ssh server refactor to be able to share test with scp external module git svn id f bb ffa edef ,pull up
extracted bucketlocker tests which verifies that it closes the lock these tests had similar structure and setup whichis the reason why they were extracted,extract
complete rewrite of pojobuilder migrate from stringtemplates to javawriter,push down
support for plist and json responses which when used with default registration can be accessed by using a plist or json extension collapsed erxabstractxmlrestresponsewriter and erxxmlrestresponsewriter by just moving the overriden methods to be the defaults in erxabsrtactrestresponsewriter it appears that i can cheat and not add a billion commons jars for the purposes of serializaing maps and arrays so i m just using jsonlib ezmorph for now,move
rename getversion to get,rename
removed proxystate setters,inline
added dummysession changed protocolcodecsession to extend dummysession git svn id f bb ffa edef ,pull up
refactored removed classes that are not needed after dropping gdata and changed query builders to depend only on resttemplate and not on abstractgoogleoperations added javadoc,move
rsa additions and simplifications,inline
refactor dialog code,extract
remove the subscribe commands move zrank to the base and fix an issue with error handling,pull up
refactor make operation an abstract class and use an anonymous in the insert action itself,pull up
renames p d to c d cartesian d for consistency,rename
rename attributes putxxx to attributes setxxx,rename
fixed typo in file class name and moved getmodule to clojurereplaction with reduced visibility,move
trial of projectionplotter moved to different class,move
refactor scp sftp wagon into a common base class git svn id f bb ffa edef ,pull up
change show hierarchy it uses to go like this showoption extends object show extends showoption localshow extends show failedshow extends localshow now it goes like this showoption extends object failedshow extends showoption show formerly localshow extends showoption series formerly show extends show so places that are supposed to be able to take either a failedshow or a show now must accept a showoption but other places that still take a show can now be guaranteed that the object they get is not a failedshow as mentioned the class that is now show is what used to be a localshow reversing the inheritance makes more sense there is no place that took a localshow but couldn t use a provider recognized show but classes like listingslookup only make sense with a non local show now it uses series so there is no worry about it getting a non series show a fileepisode no longer accepts a failedshow when we fail to get a show to map to the fileepisode we call setepisodeshow with null which updates the seriesstatus we no longer have to check for having a failedshow in the actualshow slot though we still need to check for it being null when we re using instances of series also change variables and comments to refer to series rather than show,push down
revert merge remote tracking branch origin release navigatorx pre release into dev this reverts commit a d b baba a a f c f c d reversing changes made to d b fd fd ad b db c c cd a ,inline
minor refactorings,move
chunking support moved to the remoting itself this was necessary because it needs to send out command boundaries,move
issue renamed static constructor treemap map to treemap,rename
simplified drop assembly a bit,inline
docs for el resolution and tidy up add package info rename classes update javadoc,rename
another now that yes nonrecursive has a proper negation the incorrect behavior is gone,move
major changes to instantiation model now every iteration gets its own instance better support for specification inheritance,inline
ui model and views deep refactoring git svn id b f a e b ddf ,pull up
tp moved version checking from handlesinglemessage and handlemessagebatch into receive tp implements both receive inputstream and receive byte baseserver discards length bytes if no receiver callback has been installed tcpconnection now doesn t create intermediate buffer but passes the input stream directly to the receive callback gossiprouter routerstub now implement both receive callbacks pubclient pubserver now implement both receive callbacks roundtrip receive never used correct offsets to read data,move
removed unused methods,inline
lib refactor org dcm che net service basicretrievetask to facilitate generating of audit log messages from derived classes,move
rename tests and add a legacy test,rename
moved a lot of classes from jaxrs to core,push down
sc qcadoomescls refactor test data and currency,pull up
refactor ide tests introduce testideaminibuffer,pull up
hv enable cdi for value extractors added via the serviceloader,extract
merged revisions via svnmerge from snapshot r redsolo on apr line added new files for ucm activity based change log r redsolo on apr line moved command lsactivity to cleartool r redsolo ti maj line move cleartool executable string into hudsoncleartoollauncher r redsolo ti maj line removed cleartool executable string away from cleartool implementations r redsolo ti maj lines applied path for ucmactivity and ucmhistorybuilder from henrik added outputformat and cleartoolformathandler to help with the clear tool formatting r redsolo to maj line clearcase plugin add ucm parsing of changelog xml patch from henrik r redsolo to maj line clearcase plugin add test for writing ucm changelog xml r redsolo to maj line clearcase plugin added changlogaction from henrik r redsolo to maj line clearcase plugin lshistory now returns reader instead of change logs r redsolo l√∂ maj line clearcase plugin finished importing ucm changes from henrik r redsolo s√∂ maj line clearcase plugin added patch to remove the view from ucm activity from henrik lynggaard r redsolo s√∂ maj line clearcase plugin more test files r redsolo s√∂ maj line clearcase plugin corrected tests for ucmchangelogaction r redsolo s√∂ maj line clearcase plugin fixed failing tests for lshistory ct command r redsolo m√• maj line clearcase plugin fixed change log parsing for base and ucm scms r redsolo m√• maj line clearcase plugin fixed compile error and tests r redsolo m√• maj line clearcase plugin applied patch to remove the view from ucm activity r redsolo m√• maj line clearcase plugin applied patch to add sub activities to change log r lynggaard on maj line dummy change to test developer access r lynggaard on maj line clearcase plugin branch ucm changelog page converted to activity based changelog r lynggaard on maj line clearcase plugin branch preparations for ucm tagging support need to expose the mkbl cleartool command r redsolo to maj line clearcase plugin made get methods in ucm ucmactivity exported r lynggaard to maj line clearcase plugin branch build extended changelog changelog since last not failed build r lynggaard to maj line clearcase plugin branch lsactivity needs the viewname r lynggaard fr maj line clearcase plugin branch if the user writes stream as part of the stream name then strip it r lynggaard fr maj line clearcase plugin branch extra unittest to locate issue r lynggaard fr maj line clearcase plugin branch cleartool is particular about parameter ordering r lynggaard l√∂ maj line clearcase plugin branch add tostring method for easy debug r lynggaard l√∂ maj line clearcase plugin branch improve ucm specific changelog issue r lynggaard l√∂ maj line clearcase plugin branch ensure changelog action is reset for extended changelog r lynggaard l√∂ maj line clearcase plugin branch improve ucm changelog provide stream and user for sub activities r lynggaard l√∂ maj line clearcase plugin branch remove seconds from ucm changelog r lynggaard s√∂ maj line clearcase plugin branch fix tokenize issue on branch also r lynggaard s√∂ maj line clearcase plugin branch improve ucm changelog page r lynggaard s√∂ maj line clearcase plugin branch minor change to regexp generation r lynggaard s√∂ maj line clearcase plugin branch new ucm fake cleartool setup r lynggaard s√∂ maj line clearcase plugin branch re enable edittype icons in ucm r lynggaard s√∂ maj line clearcase plugin branch lsactivity should be run from within the view r redsolo m√• maj line clearcase plugin move vob path handling out from lshistory into clearcasescm class fixed so load rules remove the and before they are used in the lshistory command r redsolo ti maj line clearcase plugin no need to quote the command line args as argumentlistbuilder already does it r redsolo ti maj line clearcase plugin fixed problem that was introduced in my refactoring for vob paths r redsolo ti maj line clearcase plugin added tests for getbranchnames r lynggaard on maj line clearcase plugin branch remove full username from changelog as we now rely on hudson users to display that r lynggaard on maj lines clearcase plugin branch defensive code to handle lshistory with empty activity names it appears that most version entries with empty activity names are version or mkbranch items this code is only there to catch it in case some real version has no activity however that should ideally never happen r lynggaard to maj line clearcase plugin branch add additional mkview documentation r lynggaard to maj line clearcase plugin branch small javadoc update r lynggaard to maj line clearcase plugin branch remove old extended changelog code as this is not the way we want to do it r redsolo to maj line clearcase plugin fixed so the changelog actions are adding the c comments to the lshistory format r redsolo to maj line clearacse plugin removed unused class git svn id c de d a be ed b c a,push down
cleaning up workers inherit from a common base,pull up
added lru collection removed some lambdaj queries i probably am not good at using it,inline
introduce new super class for shortestpath ch this will help us design a better common test for these algorithms and an upcoming bidirectional version,push down
rewrite realoptionalbinder to use the internalfactory interfaces and avoid the overheads of normal providerinstancebindings providers a couple of notes on the implementation all the mutable state besides binder has been moved into a new helper object bindingselection i think by moving things into a helper object the interactions are a bit clearer this also allows us to make all the factories static calculating the keys optional binder name have been delayed until configure time or until setdefault setbinding is called i would assume that most optionalbinders are deduped or that setdefault setbinding is not called so we can avoid work in the common cases none of the factories need circular deps resolution because they simply delegate to other factories in this way they are much like the proxyfactory used for linkedkeybindings we just wrap the result in optional i performed a minor refactoring the the java util optional reflection helpers benchmark results timeoptionalbinderinjection measures how long to inject an object that depends on other optionalbinders in every configuration timeprovidesinjection times how long it takes to inject an provides method timeoptionalbindersetbinding times how long it takes to directly inject an optionalbinder setbinding binding that delegates to the same bindings as timeprovidesinjection so we should be able to see the overhead of optionalbinder to fetch the same object created by moe moe migrated revid ,move
new parent class abstractcontentdigesthistory for implementations to extend abstractcontentdigesthistory java abstract methods load store non abstract persistkeyfor javadocs bdbcontentdigesthistory java extend abstractcontentdigesthistory contentdigesthistoryloader java contentdigesthistorystorer java use abstractcontentdigesthistory,pull up
implements new font editor the new font editor allows for multiple character ranges pretty thoroughly tested the next goal is to move glyph calculation and everything into lgm in a common interface that both the plugin driver egm and gmx can all utilize,move
refactoring of test stages to get rid of the coordinated ommission problem renamed old tests xxx test xxx legacy test and moved to different package functionality is still there beyond the operation count based limit created new tests these should be always in pairs xxx test setup xxx test with the same test name these tests introduce the concept of conversation rather that testing just basic operations thread counts are not set directly test specifies rather frequency of conversations invocation removed the option for data per thread since we don t have fixed number of threads,move
correction don t convert to degrees twice in bearingtoongreatcircle remove debug code move common code to calculate shortestdisttolinesegment into coord improve unit tests git svn id d f ee a dfeeeb ,move
refactored fieldentryreader class it was merged into abstracttemplatebuilder class,move
halfway through refactoring of commands and permissions,inline
renamed confusing usagesummarydto fields to show which are daily averages,rename
jcbc refactoring and viewfuturethis changeset refactors the get method for both the and the viewfuture to extract a common codepathinside and reduce duplication change id i dad cf f b fbbe c reviewed on by michael wiederhold tested by michael nitschinger,extract
her wide crawl performance is limited by lock contention in servercache getserverfor string all especially cachedbdbmap java pbaclace contributed patch ported to h plus statisticstracker java replace longwrapper with atomiclong use non recursive putifabsent based idiom for get or create defaultservercache java clean up host server get or create around non recursive concurrent idiom bdbmodule java add expectedconcurrency property je lock nlocktables tuning topnset java add synchronization as calling statisticstracker method has lost it,inline
refactoring pushed property mgmt functionality into new superclass now shared by the report renderers git svn id baf d a c fc e d,pull up
renamed rectangles added inclusive upper extent for point contained in rectangle box contained added function for computing bounding rectangle of d points,rename
adding an automatic json endpoint for the read verbs git svn id c b a b b d e ,extract
add res removeall command strip out old help system changed list commands to support multiple pages,extract
added remotesharedobjectdescription subclass of sharedobjectdescription updated implementations to deal with sharedobjectdescription or remotesharedobjectdescription,push down
rename bogus test case to fix,rename
a tremendous patch from wouter to move lots of things over to the new rule xml test format git svn id baf d a c fc e d,move
renamed methods to suit the class function,rename
source update only interal refactoring of the synchprotocol class to isolate the multi line response io handling as prepratory step for addressing read inefficiencies of bulk and multibulk responses,push down
add super column to the mutator and rename clusterfactory create to clusterfactory getorcreate,rename
merge finishandinjectpluralmethod into generatepluralmethod,inline
rework of wampmessage serialization added binary message using message pack,push down
each player should have their own chunknetcache instance also moved more code to the common classes,move
arq graphene screenshooter altered to comply with changes in upstream issue now lifecycle observer used from upstream reporter project registry for screenshooter interceptors introduced ftest for screenshooter added,push down
renamed ssl to upgradetossl,rename
refactor extract common method,extract
move all stats to project everything builds,inline
proof of concept spawn mojang structures in bo s it is now possible to spawn a minecraft object like minecraft igloo igloo bottom using minecraftobject x y z name in a bo objects added by mods are not yet supported this requires the bo config to know about all existing objects which the current terraincontrol code doesn t yet support a little refactoring is needed here these minecraft objects are called structures by mojang to distinguish them from the complete structures they are called structure parts in the code these new objects are represented by the interface called spawnableobject customobject now extends this interface see the javadocs of both for more details the structuredcustomobject interface has been removed the methods are now in customobject this eliminates the need of ugly code like this branch branches object instanceof structuredcustomobject structuredcustomobject object getbranches new branch now the code is simply branch branches object getbranches,pull up
fix moving utilitycontext into separate contexts,move
massive changes to support multiple subdivisions many methods moved around into more logical classes so the code just looks better anyway program still works in spite of all the changes git svn id d f ee a dfeeeb ,move
easy way to generate link contract addresses in a graph,extract
logtool remove the hasfieldfor and hasmethodfor methods added additional validation for property annotations on parameters,inline
sgf refactor failing client server integration tests due to static port allocation cherry picked from commit d ee ccc d abda f de e f signed off by john blum,extract
trying to clean up code to trim unneeded code,pull up
move thread pools from freemailplugin to freemail this allows both messagehandler and channel to deal only with the freemail class making it possible to break more dependencies without passing in even more objects,pull up
bugs fixed syntax highlighting huge text replacement find replace huge other moved architecture destroy implementation from studioframe to archhandler,move
bit of refactoring of the calculation classes kenyaemrcalculation becomes basekenyaemrcalculation methods of kenyaemrcalculation that had to be public moved to calculationutils art specific calculations moved into art sub package,move
added importer and exporter interfaces and classes importer base importer class fileimporter base interface for resource import from file sequenceimporter base interface for sequence import sequencefileimporter base interface for sequence import from file sequenceexporter base interface for sequence export not yet fully supported sequencefileexporter base interface for sequence export to file not yet fully supported pluginimporter plugin abstract class for the import interface pluginfileimporter plugin abstract class for the file import interface pluginsequenceimporter plugin abstract class for the sequence import interface pluginsequencefileimporter plugin abstract class for the sequence import interface pluginsequencefileexporter plugin abstract class for the sequence export not yet supported interface added imageprovider interface and abstractimageprovider class describes a flexible image access which is used as base for the sequenceimport interface added lociimporter and lociimporterplugin classes bioformat library implementation for the new importer interface loader major rewrite to use the new importer interface change the serieselectiondialog to use the new importer interface saver minor changes not yet adapted to the new exporter interface imagesaverdialog only accept to select file as destination so file name is not lost when changing directory roi added a basic implementation of contains roi and intersects roi severals bug fixes with boolean operations roiutil added getmasscenter method icybufferedimageutil and sequenceutil added rotate method sequence fixed metadata load save for multi serie images to define serie attached to this sequence used for persistent data file taskframemanager complete rewrote as the old code was lazely done hopefully this fixed some issues actiondialog added iscanceled method to know if the operation has been canceled added editrepositorydialog to replace the old one which contained bugs fileaction fixed new image create and added save metadata action roiaction roi subtraction now produces the possible results xls export now always export all rois some minors issues fixed roipanel fixed some issues in refreshing data or actions rectangle d d d severals fixes with infinite dimension fileutil added tofiles and topaths file string conversion methods several improvements in the exception error catcher and report plugin causing the exception anchor d added anchor dpositionlistener to replace the old deprecated anchor dlistener added support for local plugin repositories others fixes cleanup and refactoring,pull up
wrote some javadoc for genepool and renamed size to getsize,rename
more refactors cleanups javadoc,inline
add support for delay and expires in,extract
p logoptions module becomes optional some of it s options were moved to p spyoptions module,move
refactor xpathrule to support a version property currently defaulting to which will cause an underlying xpathrulequery to be used to handle the xpath query the current xpathrule logic is moved into jaxenxpathrulequery for version a saxonxpathrulequery is added for handling and compatibility mode versions the saxon implementation will be completed in a future commit git svn id baf d a c fc e d,move
 unify altair documentation into one document fix ssem release refactor cpu testsuite finish first draft of cpu developer s tutorial,move
hopefully the last of the big exceptions refactorings i went through all of the places we re adding context to our errors object and made sure we re never doubling up specifing the same injection point or key multiple times the new errors have nice at lines for parameters fields and linked bindings hopefully this makes it easier to follow the stacktraces additional context such as the binding s origin in a module could be added later if desired currently we have module specific sources in creationexceptions and plain old binding sources elsewhere the end result is messages that can look like this com google inject provisionexception guice provision errors error injecting constructor java lang unsupportedoperationexception at com google inject provisionexceptiontest reald provisionexceptiontest java at binding for com google inject provisionexceptiontest reald class provisionexceptiontest java at binding for com google inject provisionexceptiontest d class provisionexceptiontest java error git svn id guice googlecode com svn trunk d f a b b b d aecad e,extract
changed plugin from a class to an interface and changed the various plugins to match mostly just implementing isrunning added support for scripting to plugin and extended the various classes to match most simply return null or an empty array of scriptable hooks at this point only proxy allowconnection is implemented added support for scripting to framework to create and manage the script manager,push down
dependency fixing added lax which can be used explicitly when using the lax header parsing functionality added which just extends lax in the original package to avoid breaking compatibility with code which may still reference explicit commons code changed to use lax in arc warc record reading,pull up
base decoding after changes in step editor some minor refactoring with filters,extract
implement a new generic controller test that allow to test directly the controller without running an embeded servlet container separate genericcontroller interface and genericcontrollerimpl implementation class test classes named refactoring,push down
attribute handling refactoring,inline
simplified replication and fixed issues with testcase,inline
update console tests to use baseconsoletest invoketestconsole invoketestconsole handles creation of pipes creation of console countdownlatch setup verification exceptions invoketestconsole comes in different varieties setup verify callbackcount setup verify callbackcount setup verify settingsbuilder callbackcount is the counddownlatch number to use how many callbacks should we wait for before moving on,move
refactored to make the detectors architecture modular added lck placeholder,move
added intercept to containerbuilder hid constructionproxy proxyfactory etc removed intercept package added query package started struts plugin and example git svn id guice googlecode com svn trunk d f a b b b d aecad e,extract
create ftpserver using a factory ftpserver git svn id f bb ffa edef ,push down
refactoring move code to cut multipolygons into class multipolygoncutter git svn id d f ee a dfeeeb ,move
rename peerfilter to peermapfilter,rename
vishnu dev adding provider remarks renamed setters in auditlog as with propertyname and using data as freemarker resolves property name to this method and throws exception that return type is not string,rename
moved getter and setter for layout to appenderbase removed unused methods from subclasses,pull up
minor protocoldecl refactoring,push down
update notification translators to current specs clean up request types b ,push down
allow f folder option to be a regex when top level folder names change but the folder you are looking for does not the old fixed name logic was insufficient,inline
enhanced simpleretentionstorereader to support different retentions,push down
remove all references possible to udfimpl,inline
starting to refactor to merge unsafe based compressor in mainline,push down
pushed down all non abstract non static methods to abstractiobuffer added more final modifiers to abstractiosessiongit svn id f bb ffa edef ,push down
refactoring of content heirarchy removed htmlcontent moved processing logic into htmlcontentprocessor merged contentstub and basecontent into inmemorycontent and used that everywhere instead hg rename src main java com opensymphony sitemesh basecontent java src main java com opensymphony sitemesh inmemorycontent java,move
ngrinder develop performance test module test listing and editing function move getjavadatamodel and getsystemdatamodel to agentcontroller class,move
move groovy stuff in a special class to make it reusable,pull up
getting closer to something useful still need to clean up the runneroptions somehow git svn id b a c ae a bc d a bd,pull up
 add new option allowdnsreverselookup during a restrictor check by default the hostname is determined which might cause a reverse dns lookup in order to avoid this e g because there is nor restriction on the hostname this configuration property can be set to false for backwards compatibility it is set to true but will change to false in jolokia ,extract
rename list to read,rename
massive refactors this list isn t complete but should give you an idea a many things in lombok eclipse moved to lombok core to enable reuse with lombok javac b lombok javac works now similarly to eclipse s model we first make big asts that are bidirectionally traversable then we walk through that for annotations c instead of getting an annotation instance you now get an object that is more flexible and can e g give you class values in an enum as a string instead of a class object which may fail if that class isn t on the classpath of lombok d sources to the internal sun classes for javac added to contrib,pull up
rename hashmapmapper mapmapper no implementation details please boy scout rule,rename
massive refactors this list isn t complete but should give you an idea a many things in lombok eclipse moved to lombok core to enable reuse with lombok javac b lombok javac works now similarly to eclipse s model we first make big asts that are bidirectionally traversable then we walk through that for annotations c instead of getting an annotation instance you now get an object that is more flexible and can e g give you class values in an enum as a string instead of a class object which may fail if that class isn t on the classpath of lombok d sources to the internal sun classes for javac added to contrib,move
refactor move interval flush method to filelog,move
faces rename responsive attribute of alloy inputdate and alloy inputtime to nativewhenmobile,rename
use update for reftree and workspace polling refactor to remove conditionals in accurevscm and move each to its own delegate add ignore parent changes back remove unnecessary hist commands in changelog calculation filter changelog for reftree and workspace based on update log this avoids promotes upstream being considered as changes clean directory before relocation to avoid stale files,move
first compiling code dump after refactor,pull up
renamed a lot of stuff from emma to jacoco,rename
refactor odt textstyling to extract a pluggable interface for styles generation,extract
refactor iterators to only offer simple static methods that return the expected result,move
jenkins minor refactor,move
more task cmdline fun jdbctest fun cleanup,extract
progress on constraint expression parser working on refactoring content assist processing,pull up
aravind imdad moved handler logic to service methods,move
rename level conversion test method log j,rename
fixed ,push down
added basic support for mixin argument expansion elipsis ,extract
refactoring changes,push down
renamed indexname to index and indextype to type for publicly visible methods to have a consistent api,rename
spotted an unclosed zk connection rename isusesolrcloud to issolrcloudenabled,rename
remove phases from bindingprocessor refactor so that two different classes do the two different bits with an abstract superclass managing the shared pieces git svn id guice googlecode com svn trunk d f a b b b d aecad e,inline
todo change stats to only count removals that were not already expired,pull up
esilco reduced duplicated sql query code limited getproductfromlocation endpoint to active and related with document records only,inline
refactoring load and create bw instance tests,move
o refactored code to reduce complexity git svn id f bb ffa edef ,extract
moving functionality from erd wquerypagewithfetchspecification up to erd wquerypage,pull up
refactored request printing,move
revert merge branch master of this reverts commit ebb fc a da d acfab f f d a ecf f reversing changes made to b c d cc e f b dc fa c ,inline
remove baseurl and do full urls and added getters and setters for these variables added tests renamed genericattributes to defaultgenericattributes,rename
changelog removed static instances from schemeregistry cookiespecregistry and authschemeregistry made sure there is only one instance of schemeregistry per clientconnectionmanager hostconfiguration and routetracker no longer implement cloneable as they do not override clone method abstract should now be threading safe default populates execution context with data required for request execution git svn id f bb ffa edef ,pull up
moved a call to buildfilterchain to abstractioprocessor better exception handling git svn id f bb ffa edef ,inline
fixed tscontroller advancing items in l s mode this was previously ending the item session which was the wrong behaviour in s mode the logic now behaves better suspending the session instead of ending it nb i changed the name of this method to advanceitemlinear as enditemlinear is no longer accurate the corresponding mayenditemlinear has been renamed as mayadvanceitemlinear i have added a unit test for this,rename
sc qcadoo add restrictions paging and orders to gridcomponent,extract
gui now preserve last file filter used on load image dialog fixed multiple plugin launch from ribbon plugin button roi fixed point removing on polygon now selected roi keep their color only border is modified removed selected color property added opacity property imagej wrapper traced roi imagej are now converted to roi darea,pull up
massive refactors this list isn t complete but should give you an idea a many things in lombok eclipse moved to lombok core to enable reuse with lombok javac b lombok javac works now similarly to eclipse s model we first make big asts that are bidirectionally traversable then we walk through that for annotations c instead of getting an annotation instance you now get an object that is more flexible and can e g give you class values in an enum as a string instead of a class object which may fail if that class isn t on the classpath of lombok d sources to the internal sun classes for javac added to contrib,move
renamed test,rename
move versions from item to content,pull up
refactor,pull up
nativefunctiontest modifications for nativefunction var now use gremlinscriptcontext instead of variablelibrary method getvariablebyname moved to gremlinscriptcontext imports optimization,move
rename methods,rename
renamed methods for consistency,rename
a usage sample for factory override extension point an src dev directory has been created so as to host all user development modifications it replaces the generated annotation and ensure to have a unique directory src with only generated code and all overriden code in another directory change the copyright in files too git svn id svn ssh svn opcoach com srv d opcoach svn training trunk ab df a e b a a fef,push down
linkpath linkname was missing method rename,rename
mear fixed ejb clients handling renamed javamodule to jarmodule and deprecated javamodule added defaultlibdir as an alias of defaultjavabundledir which is more understable updated documentation updated tests and added an ejb client test git svn id f bb ffa edef ,rename
add more consistency in the api,extract
refactoring extract tail builder classes and introduce abstracttaildoublearray class,pull up
continued processingcontext refactoring,pull up
a bit of work on the symbol table class names are now recorded in the globalscope come to think of it they should probably be recorded in sourcefilescope or some such interim layer instead to allow for private inner classes at any rate that s where they are for now i also pushed some stuff down from abstractscope into localscope where it seemed to fit better removed a useless unit test added some good ones generally making progress towards fixing the unused private field false positive when inner class private field is referenced from enclosing class git svn id baf d a c fc e d,push down
removal of deprecated drafts removed draft draft draft draft ,pull up
bug manhattan routing is extremely inefficient and slows down editor response arrows are changed unexpectedly when node is moved on the canvas,move
apply fixes outlined in issue lots of extensions to the ant task and a variety of code cleanups,inline
created a fully working handlesetter for eclipse and refactored handlegetter a little mostly to stuff common code into pkg,inline
code refactoring testall moved to parent rules are now added in setup using addrule git svn id baf d a c fc e d,move
inline private method,inline
extracted charsequencebuffer interface from charsequencelist allow tagprocessor to be passsed a custom charsequencebuffer when pushing a new buffer,extract
refactoring of ,move
grammatik angepasst change id i ffddb efc caca d b bc f ,inline
renames,rename
sweeping changes to clean up the auctionentry class and move some of it s responsibilities out to other classes,move
extracted the move logic from the bucket model ,move
renamed gm file stuff to gmfile no longer specifically refactored any references updated references in messages extracted gmstreamencoder writetree to gmfilewriter matches the prior extraction of readtree git svn id f f bc e be cd ,rename
pulled out the atom event framework now we need to replace it,pull up
merge the virtualbiomes and replacetobiomename features into one to do this i had to rewrite a lot of code which is why this task that sounds simple was actually quite complicated we want replacetobiomename to change the savedid this setting is read after the localbiome instance was created and indexed postponing the creation of the localbiome instance also wasn t an option as the biomeconfig requires it to create the default settings the solution to this was to split localbiome into two classes one still called localbiome holds name and id of the biome and one called mojangsettings holds the default settings the mojangsettings instance is created before the biome is loaded the localbiome instance is created after biomeconfigs don t depend on the localbiome instance anymore it s now the other way round localbiome holds a biomeconfig instance most of the code now looks nicer thanks to this change unfortunately the biome generation code didn t really improve as it does a lot of id based lookups custom biomes don t need a mojangsettings instance to be created as no settings from mojang are used for custom biomes the registry in standardbiomefactory has been removed it s now defaultbiome s job to create it standardbiomefactory has been renamed to standardbiometemplate and standardminecraftbiomes has been renamed minecraftbiometemplates a class that holds subclasses of minecraftbiometemplate the concept of nullbiome s is gone now that localbiome instances are no longer required to create biomeconfigs the settings can be checked without creating a nonoperational localbiome implementation,rename
review rename getprojectlistgeneral to getjobs and minor style changes,rename
extract kahn s algorithm from compute method,extract
remove formatted exceptions allow for custom list delimiters,inline
sonar minor fixes,push down
clearcase plugin added option to set the time window when merging change log entries git svn id c de d a be ed b c a,extract
removed system err from run method in script,inline
rename simple image type field to imagetype renames simple image s type field to imagetype and its related methods to getimagetype and setimagetype,rename
avoid code duplication extract a method,extract
renamed generate to get git svn id guice googlecode com svn trunk d f a b b b d aecad e,rename
moved branch delegate up to erd wpage,pull up
refactor role validation configuration validation,push down
rewrote consumerloop a bit narrowed scope of try catch around poll split off the dispatching into method processevent ack is now returned only if event was flushed rudimentary exception handling to deal with possibility of handlers throwing exceptions currently we just log this and continue on our merry way we re postponing figuring out what to do if this happens until we have a concrete case that can help inform our design decisions,extract
oozie tests cleanup testpurgexcommand asalamon via andras piros,extract
extracted method per pull request comment,extract
only validate queue parameter once when batch enqueueing not once per job in the list thus i refactored the validation methods to be smaller i decided against inlining validatearguments method since i am not sure whether this is in line with the design principle of the author of this library,extract
fixed readsettings method length to be within checkstyle limits extracted a readsettingsincludes methodgit svn id f f bc e be cd ,extract
options renamed,rename
move default implementations of the majority of abstract classes from default to abstract git svn id f bb ffa edef ,pull up
fix receive loop insns rename ert receive peek loop rec ert wait forever wait so ert methods match beam insn names make corresponding changes in compiler simplify and correct logic in the messge loop so messages are retrieved in correct order explicitly initialize midx to ,rename
performance improvements in the locationhook the quadtree used in the locationhook was reimplemented using a more optimal data structure all functionality not really used was removed from this quadtree checking if the boundary directory contains bounds is now done once only git svn id d f ee a dfeeeb ,inline
refactor the main run extract a few methods out,extract
sc qcadoomes small fixes,push down
rename variable,rename
added validation for minimum supported tools version in coveritypublisher and checkconfig,extract
remove old bob format support add default directory s and files,extract
created a generic experiment extended by scalabilityexperiment and other minor refactoring,push down
release the database connection on suspend and acquire it again on resume of a transaction if on resume the transaction is no longer valid then the resume will fail otherwise the transaction is upgraded to the current state of the world add support for automatically initializing a root domain object on the first run of an application,extract
fixed test moved other test from examples to core,move
msurefire restructure to allow different test suites to behave identically also improved class loader separation by not merging surefire and test classloaders and renamed battery references to test set testng support is currently commented out and exception handling needs a cleanup which will follow git svn id testng f bb ffa edef ,rename
change address model to be an interface will allow consuming projects to override this funcitonality more easily,push down
refactored classcachemgr to make a leaner more readable class and prevent bloat and make parallel work a bit easier,move
remove some instance variable reduce visibility,inline
pull line information up into nodeinfo,pull up
lots of changes to use new import mechanism to load isatab files next step is to automatically generate the ui components in the investigation and study forms based on the content read from the investigation file,push down
cleaned up treecontextbuilder got random forest and random forest builder implemented,push down
refactoring,extract
resolved issue dirmina move idletime and writetimeout property to iosessionconfig from iosession moved idletime and writetimeout property to iosessionconfig added iosessionconfig setall and added its default implementation to abstractiosessionconfig removed serialsessionconfig timeout because it can be replaced with ioservice connecttimeout git svn id f bb ffa edef ,move
boofcv converter rename converter replace static method by object methods,rename
created new synchronization object moving all real work out of synchronizeservice refactored property peers to be more similar to application property peers in preparation for their demise,move
inlined wordcramengine s shapetoimage to bring its logic closer to what s in drawwordimage they re very similar trying to un tangle the mess there,inline
hv minor refactoring adding tostring implementations making iscascaded explicit,push down
fixed automatic updates in several places using the updatesource system converted resnode to using updatesource and made it listen to its own resource propagating any events from the resource both up the resource tree and to the node s listeners moved some of resnode s update handling from resource frames into resnode replaced resourcemenu s complicated listener system with updatesource removed the setlisten method in roomeditor roomcomponent since the weak references used in updatesource makes this unnecessary added new method invokeoncelater in util which does the same as swingutilities invokelater except that the runnable is only enqueued if not already in the queue made several fields in different resources private to let them generate events when set made a new class for sprite subimages imagelist which calls the sprite s fireupdate when modified added some event propagation paths to simplify listener handling especially in the room editor components sprite gmobject instance background tile fixed updating of the subimage list in spriteframe e g when loading a new image git svn id f f bc e be cd ,move
added custom firefly rename settings renamed season setepisode to addepisode fixed punctuation removal and added unit test,rename
fixing fumbled merge,inline
added eval with inputstream,extract
add column field and fields classes add seven new classes field java an abstract class that defines a field i e a piece of data that we may display in the table once per row textfield java imagefield java combofield java checkboxfield java subclasses of field java which are intended to hold specific types of data with specialized methods for those types fields java defines the fields of the program as public static instances of field column java a column is what is used to display a field our column class encapsulates tablecolumn the actual ui class that is part of the table we are able to keep some other helpful data in the column class too a column must be associated with a field it s required in the constructor and is final a field can either have a null column indicating it is not currently displayed in the table or can have one column which must refer back to the field it is an error to try to assign a column to a field that already has a column or to try to assign a column to a field where that column already refers to a different field in addition to the seven new classes we make major changes to resultstable java the fields had previously been defined as integer constants whose values corresponded to the column ids the column ids are created by the table when the columns are added to it so the definitions required knowing the order in which the code added them now we import the fields from fields java all the cell get set methods from resultstable now become methods on the field resultstable no longer deals with images that s too level it just deals with the itemstate and the imagefield turns that into an actual image methods used for sorting itemdestdisplayedtext and getitemtextvalue previously were static methods defined in resultstable which had to do some checking dispatching depending on the type of the field now the functionality lives in the field classes and is specific to the subclass of field that is being used the sorttable method no longer takes a tablecolumn and a column id those two pieces of data are now encapsulated within the new column class which is what we pass instead move the column creation call into the field we create the column by asking the field to do it in turn it calls into column which can also define the selection behavior sort by this column therefore we no longer need the sorttable wrapper method the code that creates the column knows how to figure out the sortdirection we also add gettablecolumn to field and use it instead of table getcolumn field gettablecolumn could return null under the idea that we may define fields that the user chooses not to display in the table that is currently not supported but it s something i intend to add,move
implemented refresh tokens and additional validation for entities using the validation framework,extract
check all intervals for overlaps simplify code to correct wrong assignments todo check for duplicates is not yet okay random numbers optimizations to increase precision of address search git svn id d f ee a dfeeeb ,inline
begun work towards better database schema added permissions tables for users and groups added members tables for groups started moving major sql queries into jar file resources,extract
rename istoplevel to istoplevelonly,rename
add tokenizer vocab support to all classes add get set methods for tokenizer vocab and stopword removal option,pull up
adds ability to listen for activity on a retrieval operation using the retrievalworker currently only chunk retrieval events are reported in partial resolution of ensure that bridge database connection stays alive during long data transfers,extract
rename response to renderable,rename
java moving rules into correct packages according to the new category part ,move
way to return values from tasks is changed to more typed,inline
added flipping,extract
moving equals and hashcode into content since they re defined to be the same for all content they re still final methods jh,pull up
renamed use to include,rename
exploit new sourcepath option removed all guessing no more guessing of members classes and type casts removed the corresponding compiler options too the downside is that all imports must be accessible and parseable at compile time this means that we will also need something like a classpath before we can use this inside our maven plugin to resolve dependencies on jangaroo libraries the upside jooc warnings should be taken seriously now splitted analyze phase into scope and analyze changed parser to parse dotted identifier sequences as qalifiedide and increased priority of new operator to be higher than dot new a b c d is now correctly parsed as dot new ideexpr qide a b c d handled all code generation for qualified and unqualified ide expressions in ide and qualifiedide generatecodeasexpr no more tree rewriting in dotexpr and elsewhere i think we can remove the parent node slot in astnodes and change the return type of analyze to void code generation now adds the package prefix for imported identifiers and the private prefix for private static members this should be more efficient and less magical than the access via with we should be able to remove the with statements now renamed methoddeclaration to functiondeclaration as it is used for both added ast node for as expressions git p depot paths coremedia jangaroo change ,rename
formatting fix to apt docs i noticed while actually using them refactoring out a bunch of the bean related access stuff from rdfgenerator into a separate class using said class in entitymanagerimpl to correctly implement refresh fixes small tweak to entitymanagerimpl so that merge works as expected w the entitylistener stuff fixes ,move
 add test to demo bug ignore bids for zero quantity,extract
refactor command line tests for cpd and create a basecpdclitest class,pull up
fixed stacktrace in non standard jboss install,push down
updated lib and action code in gmobjectframe and timelineframe moved getlibtabs to gmobject timeline calls it from there renamed getlibtabs to makelibtabs created addactionpane in gmobject timeline calls it from there git svn id f f bc e be cd ,rename
this update completes it adds manifest rest api call to durastore essentially what happened here is that the mill jpa repo module was moved over from the mill project the manifest rest and resource classes were moved from duraboss to durastore and a new manifestgeneratorimpl was written that works with the manifeststore this new setup depends on a property in the catalina opts pointing to a properties file containing the properties specified in mill jpa repo src test resources mill config properties the property that must be set is dduracloud properties path path to props,pull up
added getguilayout as a full method higher up the infrastructure removing a lot of redundant code further down git svn id bcaee e b e be a d c f fc ,pull up
add a unit test that verifies the charset of the multipart is used,extract
pulled createsetwith method to superclass,pull up
fix dependency on client fix imports start fields in singleworld with lowercase as oloflarsson said it is a bad practise to start anything that isn t a class with an uppercase letter complete rename localbiome setcustom to localbiome setvisuals,rename
move clustered tests to clusteredeventbustestbase,push down
extract some stuff to a method git p depot paths coremedia jangaroo change ,extract
renamed imetadata to imetadata pete wot made me do it,rename
hv moved privileged actions into own package git svn id b cb b d ca fae ebed b ,move
refactor vxmlelement,pull up
allow request params and options to be overridden on autopagingiterator we normally pass params and options with the list method invoices invoice list params options autopagingiterable this patch adds support for them to also be overridden from autopagingiterator invoices invoice list autopagingiterable params options the reason for this is to support custom params and options for subcollections which unfortunately do not inherit options from their parent collections for example lineitems invoice getlines autopagingiterable params options there s more context for this in and i tried a more elegant solution which failed in this seems like the easiest option for the time being with the possibility that we could do something more sophisticated later to start consolidating our interfaces fixes ,extract
greatly simplified the implementation of a pipe found a general pattern that existed in all the pipes that exist so far and created an abstractpipe that implemented this methods now all the instantiable pipes have two methods a constructor and a setnext method very concise simple and clean test cases all pass,pull up
added newrules git svn id baf d a c fc e d,extract
fix disk failure step happy path fix by cloning template node for each node with failed disks it will be fixed with step poweroff node step createreplacementvm step a chef bootstrap step on the bad node changes include implement clusterhealservice to fix cluster errors start from disk failure implement disk failure handling job and according steps record system disk in table disk it s a plus besides the data and swap disk update createvmsp to attach existed vmdks only create and add disks that don t have vmdk path,extract
 renamed osgifycontext to osgifiercontext,rename
added invitation listener and presence listener for xmpp chat room,extract
fixing the api for network registration so we can register without having to have a reference to the whole networkcontroller object requiresregistration interface defines a register function for network components which require a networkregistrationrequest before being able to deal with messages networkcontroller now implements requiresregistration and the registerconnector function has been renamed to register in the networkcontroller constructor we can now do a type check on the networkchannel we are given to see if we need to register and do so tests updated for these changes,rename
refactored out fitfixtureexception from restfixture fixed bug on handling js expressions,extract
o added a gitgnore in the benchmarks module o bumped up to netty o added netty udp benchmarks o created sub package nio and tcp for the various benchmarks o started to refactor the iosessionconfig implementing classes to take care of udp o started to mplement the udp client and server,pull up
importer plugins are r w from settings xml just add classes to path and names to xml for new file format defaultpreferences moved to preferencesmanager lasercutter etc are saved in xml by default,move
added an odometerbuilder modified builder build methods and renamed the flipchar to splitflap control,rename
code handled search config settings differently in different places refactored to use a single static method on searchcommandparser instead also some javadoc,extract
fixed bug in the history manager added cursor support to the link listener issue number obtained from submitted by reviewed by,extract
a few more test cases for extractchildgoal,extract
extract time from recording reader without need for it to be a variable,extract
remove unused variant of resolvecontext resolve static method it was broken ignored its restricttochild parameter but since it was also unused just nuked it,inline
more and net refactoring,push down
test method renames,rename
merge and extract of tasks in the task model,extract
tried to incorporate gojomo s suggestions of engine java removed error and warning strings rely on flash class log jobsdir check failure as severe and return early collapse error handling in considerasjobpath and log severe renamed considerasjobdirectory to addjobdirectory remove catch and rethrow from leavejobpathfile when writing instead log severe renamed leavejobpathfile to writejobpathfile added boolean userrequest arg to addjobdirectory and moved call to writejobpathfile inside of addjobdirectory changed void considerasjobpath file to string getjobpathfromfile and removed call to addjobdirectory make seperate calls to addjobdirectory in findjobconfigs engineresource java restructured create logic for clarity eliminate style code rely on flash class remove limit on addpath input change to createpath removed all caps and bangs from error messages removed platform specific path separators call engine addjobdirectory with userrequest true in when form action add,rename
several changes to the action frame the action list and related stuff moved toolbar methods from scriptframe to gmltextarea added modification checking in documentundomanager and made it work with script frame and code action editor added equals method in resid fixes a bug in the action list restored color button functionality in argument this was removed in r by mistake changed default value string in resourcemenu instances made in argument from to etc added code and arrows interfaces to actionframe arrow icons not yet added gave new layout to actionframe no more absolute positioning changed layout manager in resourcemenu to make it work better with the new layouts used in resourceframe implemented applies and not checkboxes in actionframe changed the mouse listener in the action list to select the existing actionframe for the selected action if there is a frame for it already added indentation to action list if else and repeat actions indent the next action or block git svn id f f bc e be cd ,move
renamed equality method on comparators git svn id research chemet trunk e a e c eb c a a ee ,rename
add getallowedlanguages string spacename,extract
tou function rename,rename
refactored tests to make them more readable,pull up
added remove command to nbt utility,extract
created mini spi for plugable testing of annotations packages added spring annotation test harness which can be plugged in for testing,push down
revert rf renamed jqueryobject to jquery,rename
refactor dcm che tool getscu,inline
moved large data from header to message body renaming protocol name if id is set using offset and length for message buffer,move
remove unused code,inline
made an abstract basedatabaseconnection that can be extended for various ways of setting up connections,pull up
nearly everything should be functioning now split the blockgenerator into component parts for clarity changed the behavior from using lists of helpers to reference holders,extract
simplified moh builder code by using emrreportingutils addrow to add columns based on dimensions and also extracted pwp indicators into pwpindicatorlibrary,extract
more refactoring,pull up
refactoring,move
rename where constraints,rename
pc optimization refactoring only unit tests missing it tests refactoring,extract
added builder class for formbodypart instances api improvements in multipartentitybuilder git svn id f bb ffa edef ,push down
created abstract form item to move common code into and changed form item hierarchy to inherit form dataclass,pull up
again files were not checked out in p due to idea offline mode hrmpf on the fly moved exml namespace uri constant where it fits better refactorings got rid of componentsuiteresolver because the componentsuiteregistry has to be filled in advance anyway and this is what the idea plugin now also does simplified componentsuiteregistry accordingly split xmltojsonhandler used for all exml parsing into two handlers one for the metadata exmltometadatahandler and one for the ext component json exmltojsonhandler the metadata is needed to re build the xsd the json is needed when generating the as class opened api to generate a single class removed some too exhaustive logging and a few souts git p depot paths coremedia jangaroo change ,move
make generics usage in memorybackend related much saner that means removing as much as possible because generics suck,pull up
removed activemq implementation from messaging and added messaging to ivory feed,pull up
more code moved from splitdockstation to splitlayoutmanager git svn id d d e b d d fefcacdf,move
many changes reorganization,push down
reworked the html exporting functionality in the same way as was done for the csv exporter now a utility class is used to generate the html output all tools that exported to html were rewritten to this new approach,push down
add support for readvalues as well,extract
renamed private method,rename
oozie refactor classes from launcher jar into oozie sharelib rkanter git svn id f bb ffa edef ,extract
sc qcadoomes refactored production balance moved calculations from production records to production balance included tpz and additional time in calculations,move
biserver reorganizing the parameter processing of prd report viewer the report viewer no longer processes parameters locally everything gets passed blindly to the server the parameter xml is the only source of configuration the gwt application gets gwt side we no longer use raw dom trees to configure everything using doms is cumbersome and easy to mess up a real object model exists now that accepts the new xml structure that is generated by the content generator cleaned out loads of misaligned anonymous inner classes its never good to use inner classes and then still have to rely on if then else streaks if the same can be achieved with smaller classes all parameter names are url encoded now users outside the english language space tend to use their native character set for everything including url components instead of hardcoding the error text color lets use the stylesheet for it server side added proper gwt client support by passing all client properties through the parameter system output targets are now used instead of output types output targets can be redefined by the user by declaring a parameter with the name of output target paginating parameter is no longer treated specially the pagination mode will be activated if the html pageable output target is selected autosubmit autosubmitui and layout are part of the master report object now reports can be hidden split the monolithic contentgenerator into separate classes each dealing with exactly one request type separation of concerns is cool the various inner classes that could have been static are now top level classes if no output target is selected the default for xactions is html stream for content generator it is html page staging handler the configuration for this can now be done via the master report in addition to the existing url or system default settings if the staging mode is set to memory or temp file we now disable the forcebufferedwriting mode of the html export be aware that staging in the current implementation causes extra memory consumption for output types that could have been streamed to the user ie all except bufferd html open points the parameter attributes passed to the client side are not namespace aware yet the date parameter handling must still be fixed as it is broken for time and timestamp types in bi server and ,extract
renamed sourcetype to format somehow sounds more natural,rename
small refactoring excluded some code duplications within reports providers,pull up
rename findmotion to findcharmotion,rename
changed command handling so that we print the command usage string ourselves cleaned up plugin yml so usage help doesn t look awful brought back bad messages formatted in red which where torn out by tim added warning when console tries to use player only command now matching the start of the name of a warzone instead of the exact name because that s how it worked and how it should continue to work,extract
hv create an interface for beanmetadatamanager,push down
moved logindisabled property to instructoruser,push down
the initial jvsthost refactoring,pull up
introduced interface for particlemover we are expecting distributedparticlemover in the future,push down
major refactoring of dropwizard kafka new consumer api kafkaconsumer is now parameterized by the message type consumption now begins when kafkaconsumer start is called during initialization a decoder and streamprocessor needs to be registered before the kafkaconsumer can be constructed this makes construction type safe it s not possible to create a kafkaconsumer via kafkaconsumerfactory that isn t valid scala support updated and simplified removed cumbersome errorpolicy configuration in favour of automatic handling of errors instead of treating all errors the same we now attempt to recover from transient errors still todo error handling mechanism in decoder instances currently any exception thrown by a decoder is treated as a recoverable error creating an infinite loop when a message is invalid,inline
rebase modifiedntripleswriter on rio ntripleswriter and modify nquadswriter to use ntriplesutil append for output,inline
refactor to make dashboard possible,inline
rf move panels to cdk,push down
refactoring rhohub part and final bug fixes,pull up
o javadoc additiono removed some useless method scheduletrafficcontrol o get rid of most of the for construction when not necessaryo added some commento refactoring to make the code more candy to the eyegit svn id f bb ffa edef ,inline
hv rename type argument to container element,rename
feature move getvmarguments to configurationhelper getjvmargs,move
snapshottesttool rename exclude to excludefield,rename
splunkexport and importtool inheirits from splunktool removed the duplication between the splunkexporttool and splunkimporttool,pull up
remove failurestrategytest as failurestrategy is now a fully abstract class with no behavior to test moved the singular test in that class to a more logical location created by moe moe migrated revid ,move
remove old style constants from record classes,inline
added some bipart functions and refactor,pull up
calculate absolute positions incrementally prep work for pagination light cleanup fix bug where floats nested in floats could cause the outer float to be positioned in the wrong place,extract
extract common g gap assertion code into something more readable for processor with methods,extract
while holding down ctrl over an identifier in a sourcecodeview the identifier will now be underlined and the mouse pointer will change to indicate that clicking jumps to the symbol s definition,inline
added support for version command to upload to gist github com,extract
rename parameterholder getparameters to getallparameters,rename
fix memory leak in color cache push calculatedstyle field down to those derived values which need it and remove it from the others remove inheritedlength class which originally resulted in my misinterpretation of the spec,push down
o getting ready for cleaning up inconsistent apis and stuff,inline
 read lifecycle mapping metadata from maven plugin artifact when calculating buildi lifecycle mapping m e will check if main maven plugin artifact has meta inf m e lifecycle mapping metadata xml and will use this resource as additional metadata source new lifecycle mapping metadata sources priorities this pom embedded this pom referenced parent embedded parent referenced grand parent embedded sources contributed by eclipse extensions maven plugin embedded metadata default source if present signed off by igor fedorenko,extract
move to a visitor centric compilation,inline
code clean up introduced array design submission type,push down
jcbc multi values in array mutations this is still an in design part of rfc subdoc api motivation rfc introduces the possibility to insert multiple values at once in an existing array this is the implementation of this part of the rfc modifications a new internal type multivalue is introduced to facilitate the special encoding needed for multi valued array mutations fragmenttranscoder now has two abstract methods one is the classic encoding path the other is the multivalue encoding path new specs have been added to the subdoc builders arrayprependall arrayappendall and arrayinsertall each of these takes a collection of values a convenience alternative signature using varargs is also offered for each but doesn t offer the createparents parameter the different naming xxxall suffix allows to disambiguate some edge cases relative to varargs for the compiler it is also close to the java collections idiom results multi valued inserts are now possible in the java subdoc api using either a collection or a vararg enumeration tests have been adapted change id i d ab abba c a d bb c d reviewed on tested by simon basl√© reviewed by michael nitschinger reviewed by mark nunberg,pull up
add hooks support,extract
generified extraction of a view at a certain index,extract
more tenant repository renames further renaming the tenant concept to simple multiple named repositories,rename
added javadoc,extract
renamed keyparser registeraction to keyparser registerideaaction,rename
heatmap properties view finished improvements on colorscale library to allow generic drawing of scales git svn id b f a e b ddf ,push down
update tooltip when we change the button label not sure why we thought of setup initial and set during the program differently combine them into one method,inline
refactored webprocessor extracted abstractprocessordecorator which handles the core of the implementation of a xformsprocessor,pull up
renamed the paging parameters to something more logical,rename
aravind sharvani removed reportgateway interface,pull up
replaced weakreference resource references with a new class resourcereference this should fix most of each resource now holds its own reference in a public final field in the constructor it can either take a reference as a parameter and optionally update it or it can make a new reference the access to the constructor and set method in resourcereference is intentionally restricted to let only classes in the resources package handle them fixed handling of null references in several places removed util refsareequal since references should be unique and thus can be compared using made resnode res final since this field shouldn t change the reference will update itself added a new method dispose to resource which null s its reference signalling that the resource has been removed reorganized copy methods used by resources resources implement a single protected method for all copying which is used by two methods in resource copy resourcelist src which should do the same as before clone which makes an exact deep copy of the resource with the same reference the reference can later be updated to point to this new clone note that the update parameter now has a different meaning to update the given reference to point to the new resource as in the constructor moved the updatesource system from resource to resourcereference this means already established listener connections won t break when a resource gets replaced git svn id f f bc e be cd ,pull up
part of updates the s storage provider to set a bucket policy on all new spaces which moves all content to storage class standard infrequently accessed after days also adds an s task which sets the same bucket policy to existing spaces also removes s tasks which were used to set storage class item by item,pull up
db version change set,push down
biserver refactored gwtmodelerworkspacehelper and modelerworkspacehelper to not implement their auto model methods just inherit from basemodelerworkspacehelper,pull up
fix typo move methods getvalue and getunit into projectdiskusageactionfactory class,move
change version to beta add commandfactory to xmemcachedclientfactorybean delete some derepcated methods of memcachedclient,inline
renamed the entry features type to events everywhere in the code,rename
add super keyword and main function generator,extract
hv moving check for illegal parameter constraints from beanmetadataimpl to aggregatedmethodmetadata conflicts hibernate validator src main java org hibernate validator metadata beanmetadataimpl java,move
extract xslt logic into something reusable,extract
rename wrongly named unit test,rename
add optional parameter source to get table cell value keywordwhen source is set to model text extractor won t try to get text from cell s component firsts and will get it directly from table model when source is set to auto default old strategy is used i e extractor will first try to extract text from cell s component and then if this fails it will get it from table model,extract
balajin refactoring pulling up common methods in transitions,pull up
create filemover without observer to further reinforce the idea that a filemover does not require an observer remove it from the constructor add a separate method to add the observer there s no great reason to do this given our current usages but it makes things more flexible going forward i think we still are doing too much control inside a view class we could imagine an implementation in the future where the files to move are decided within the controller and it then might notify interested clients who would then add observers for the files they were interested in this setup allows for that,move
convert generation of js to listener compiles tests green needs cleanup,pull up
more tests refactoring,pull up
removed dozerinitializer and moved code into builder ,move
cleaned up alpha code and prepared for final commit,inline
huge refactoring to make prestoresolver,inline
aesh backport some of the changes lincoln provided in the console shutdown branch read now returns a boolean remove methods not needed in process set testterminal to use consoleinputsession aeshinputstream,inline
o moved interpolate to doaputil and take care of array o using interpolate in doapoptions parameters o improved added test cases git svn id f bb ffa edef ,move
fixed new api stub generation completely forgot about member annotations some refactoring later model and code generator are able to handle them,pull up
refactored projector as regular subprotocol visitor refactored debug printing for projections,push down
changed design of rest web services data flow controller service dao found issue with transactions rest servlet was not aware of tx configuration rest webservices should be now working correctly,push down
revert unchecked changes added facility to configure the csv export the same way adding it at the v version of the module only difference reconstruction of the configuration file in cmscsvexportbean java is adjusted details added csv export configuration facility renamed cmscvsexportbean to cmscsvexportbean and adjusted calls refactored cmscsvexportbean this reverts commit a a e cfaaa d b dd d c d fb,rename
push the listiterator code down into the concrete implementation of abstracturlpager so as to clear up a small design flaw where the abstract class knew about the concrete class git svn id svn svn jbidwatcher com jbidwatcher trunk b acfa eb db b a a cd b e,push down
 renamed some methods in featuredescriptor and objectdescriptor to try and make sense of what they actually do,rename
enable creation and retrieval of org webhooks made ghhook abstract and created two concrete subclasses for org and repo hooks created utility class ghhooks to manage creation and retrieval of org repo hooks with minimal code duplication these are invoked by ghorganization and ghrepository respectively,push down
adding new classes as per diagram more work on refactoring,move
faces rename responsive attribute of alloy inputdate and alloy inputtime to nativewhenmobile code review,rename
lookandfeel support moved into common project git svn id d d e b d d fefcacdf,move
some events classes changes result renamed to response and formatting codes signed off by mk ,rename
first iteration of the searchengine changes,push down
various warning clean ups from intellij split valuenode into a separate class to avoid possible race condition in class loading modified arraypathtoken to be super class of arrayindex arrayslice token because intellij warned about null pointer exception possibilities removed redundant boolean checks removed use of stringbuffer stringbuilder removed dangling,push down
rename queue to taskqueue,rename
changes for ,inline
minor refactoring of nodetype and class which reference it stackobject sequencechecker linker etc the aspiration in nodetype was to convert it to an enumeration this refactoring moves abstractdataflownode stringfromtype to make the class a bit more enum like and to make it publicly available for use in debugging other languages,move
renamed forbinding to binder introduced stage added name package to javadocs updated some random javadocs git svn id guice googlecode com svn trunk d f a b b b d aecad e,rename
removed unecessary class and moved its content into evaluatorfilter,move
refactoring renamed query to queryparams reduced string based comparators,rename
refactor some more stuff now it should compile fine,push down
kafka gateway refactor,inline
removes all bulk services from all service plans as they no longer function in hadoop due to a lack of support for java this resolves release issue git svn id ed cd a f c be b fe bcb,inline
configuration parser adds ontology sources removed redundant method in ontologymanager defined strings for ontology service providers,inline
refactored so that the plugin class contains less lines of code,pull up
refactored filters there is now an intermediate class under filter to provide onmatch and onmismatch options,pull up
rename method to commonly used name,rename
fixed several bugs with diagrams removed unused code refactoring of collaborationsessionutil added a savingpolicy doing the marshall removed the navigation bar in the navigator added the feature that close the properties view when the browser is displayed removed the configuration file used to define the diagrams added a properties file to define the url of the web server and of the repository,inline
bugfix jenkins vsphere now respects per slave instance cap bugfix jenkins npe bug in vsphere gettemplate enhancement vsphere java now distributes load over all matching templates this satisfies jenkins if jenkins is configured with a template correction jenkins ui no longer offers facility to manually create a cloud provisioned slave the cloud provisions those itself normal vsphere slaves are still manually provisionable cleaned up logging in vsphere java typo in vspherecloudslavetemplate getnumberofexceutors getnumberofexecutors,inline
major refactoring and moving jelly scripts around,move
rename some vars getters too warnings cleanup,rename
resourcefile datafile modulesfile created from the code at zcalcinput now zcalcinput depends on them zcalcinput is only an interface now implemented by filezcalcinput tests and results and all related stuff has been moved to ztools core git svn id b f a e b ddf ,push down
refactored userstream test case,move
simplify the multi threaded benchmark by not reusing threads hoping to be rid of that occasional liveness failure,inline
final select tests moved,move
extend the result of a task on a batch engine ,push down
allow unquoted whitespace between substitutions that expand to objects lists fixes that object and list substitutions could not have whitespace in between this patch carries quoted ness into configstring which is somewhat bogus and we may be able to clean it up later if we start to track the tokens that each value originates from,push down
big refactoring added ioprocessor a thin layer which is similar to the reactor pattern renamed abstractiofilterchain to defaultiofilterchain because of the abstract methods of abstractiofilterchain are now moved to ioprocessor interface moved common parts of various iofilterchain implementations to defaultiofilterchain removed other unnecessary iofilterchain implementations added iosession getprocessor so that defaultiofilterchain can access the associated ioprocessor extracted interface from serialsession and all the implementation goes to serialsessionimpl git svn id f bb ffa edef ,rename
remove the need for explicit row locks when allocating uids the existing code with explicit row locks exhibited very poor performance and also prevented multiple tsds from allocating uids concurrently the new approach consists in performing an atomic increment to grab a new uid cas ing compareandset the reverse mapping uid name cas ing the forward mapping name uid if we die after step we waste an uid if we die after step we just end up with an orphaned reverse mapping harmless when two tsds race to assign a uid to the same name one of them will fail to cas the forward mapping at step and will retry to find the uid assigned by the winning tsd when that occurs the only net consequence is that a uid will have been wasted by the losing tsd whereas the previous implementation wouldn t waste one when this happened the uid fsck command can easily detect orphaned or wasted uids and we could conceivably put them on some kind of a free list in the future to re allocate them if two tsds are running side by side and one uses the old method while the other uses the new lock less method things still work as expected there are two possible scenarios old tsd goes first locks the maxid row and does its thing the new tsd will have to wait until the row lock is released for its atomic increment to go through the new tsd goes first atomically increments the maxid row and does its thing the second tsd locks the maxid row and proceeds to allocate its own id concurrently,inline
continued refactoring dels,extract
icycanvas added a new synchronization view method canvas d severals fixes and improvements roi improved roi display in canvas d minors fixes and improvements,extract
various fixes and simplifications to is not instanceof mostly under gwt make assertthat is not instanceof someinterface class blow up with a helpful message under gwt rather than always fail in the case of isinstanceof and always succeed in the case of isnotinstanceof make assertthat null isinstanceof fail under gwt instead of throw npe that said see b but for now let s bring our gwt behavior in line with our jvm behavior this also simplifies the code a bit delete platformtest which tests the helper methods directly in favor of adding more tests to subjecttest including tests for the cases above remove isinstanceoftypegwt from the jre copy of platform it s used only from tests not from the actual truth implementation also its tests don t run on gwt we could make them run on gwt but that doesn t help much since again that code isn t used from the actual truth implementation simplify the actual gwt implementation to avoid calling getname and to avoid constructing a set also simplify the jre implementation by inlining the helper method leave a todo to test with class metadata off which will demonstrate additional problems that show up only under that setting relevant relnotes made assertthat is not instanceof someinterface class blow up with a helpful message under gwt rather than always fail in the case of isinstanceof and always succeed in the case of isnotinstanceof made assertthat null isinstanceof fail under gwt instead of throw nullpointerexception created by moe moe migrated revid ,inline
make the core ui plugin free of model edit references move the remaining method to the refactoring plugin which still needs it,move
removing stringforkey method replaces all calls with system getproperty,inline
mostly documentation completion some small refactorings and code style improvements hg branch mapp rename src main java org geolatte graph basicpath java src main java org geolatte graph algorithms basicpath java rename src main java org geolatte graph algorithms graphalgorithmfactory java src main java org geolatte graph algorithms graphalgorithms java,rename
moves setunit and setscalefactor to simplestatenode from avalue adds setparent to avalue class updates tests with new output,push down
refactored and improved hidesoftkeyboard,move
rename getbytes to getcontentbytes for clarity,rename
merged revisions via svnmerge from r redsolo on apr line added new files for ucm activity based change log r redsolo on apr line moved command lsactivity to cleartool r redsolo ti maj line move cleartool executable string into hudsoncleartoollauncher r redsolo ti maj line removed cleartool executable string away from cleartool implementations r redsolo ti maj lines applied path for ucmactivity and ucmhistorybuilder from henrik added outputformat and cleartoolformathandler to help with the clear tool formatting r redsolo to maj line clearcase plugin add ucm parsing of changelog xml patch from henrik r redsolo to maj line clearcase plugin add test for writing ucm changelog xml r redsolo to maj line clearcase plugin added changlogaction from henrik r redsolo to maj line clearcase plugin lshistory now returns reader instead of change logs r redsolo l√∂ maj line clearcase plugin finished importing ucm changes from henrik r redsolo s√∂ maj line clearcase plugin added patch to remove the view from ucm activity from henrik lynggaard r redsolo s√∂ maj line clearcase plugin more test files r redsolo s√∂ maj line clearcase plugin corrected tests for ucmchangelogaction r redsolo s√∂ maj line clearcase plugin fixed failing tests for lshistory ct command r redsolo m√• maj line clearcase plugin fixed change log parsing for base and ucm scms r redsolo m√• maj line clearcase plugin fixed compile error and tests r redsolo m√• maj line clearcase plugin applied patch to remove the view from ucm activity r redsolo m√• maj line clearcase plugin applied patch to add sub activities to change log r lynggaard on maj line dummy change to test developer access r lynggaard on maj line clearcase plugin branch ucm changelog page converted to activity based changelog r lynggaard on maj line clearcase plugin branch preparations for ucm tagging support need to expose the mkbl cleartool command r redsolo to maj line clearcase plugin made get methods in ucm ucmactivity exported r lynggaard to maj line clearcase plugin branch build extended changelog changelog since last not failed build r lynggaard to maj line clearcase plugin branch lsactivity needs the viewname r lynggaard fr maj line clearcase plugin branch if the user writes stream as part of the stream name then strip it r lynggaard fr maj line clearcase plugin branch extra unittest to locate issue r lynggaard fr maj line clearcase plugin branch cleartool is particular about parameter ordering r lynggaard l√∂ maj line clearcase plugin branch add tostring method for easy debug r lynggaard l√∂ maj line clearcase plugin branch improve ucm specific changelog issue r lynggaard l√∂ maj line clearcase plugin branch ensure changelog action is reset for extended changelog r lynggaard l√∂ maj line clearcase plugin branch improve ucm changelog provide stream and user for sub activities r lynggaard l√∂ maj line clearcase plugin branch remove seconds from ucm changelog r lynggaard s√∂ maj line clearcase plugin branch fix tokenize issue on branch also r lynggaard s√∂ maj line clearcase plugin branch improve ucm changelog page r lynggaard s√∂ maj line clearcase plugin branch minor change to regexp generation r lynggaard s√∂ maj line clearcase plugin branch new ucm fake cleartool setup r lynggaard s√∂ maj line clearcase plugin branch re enable edittype icons in ucm r lynggaard s√∂ maj line clearcase plugin branch lsactivity should be run from within the view r redsolo m√• maj line clearcase plugin move vob path handling out from lshistory into clearcasescm class fixed so load rules remove the and before they are used in the lshistory command r redsolo ti maj line clearcase plugin no need to quote the command line args as argumentlistbuilder already does it r redsolo ti maj line clearcase plugin fixed problem that was introduced in my refactoring for vob paths r redsolo ti maj line clearcase plugin added tests for getbranchnames r lynggaard on maj line clearcase plugin branch remove full username from changelog as we now rely on hudson users to display that r lynggaard on maj lines clearcase plugin branch defensive code to handle lshistory with empty activity names it appears that most version entries with empty activity names are version or mkbranch items this code is only there to catch it in case some real version has no activity however that should ideally never happen r lynggaard to maj line clearcase plugin branch add additional mkview documentation r lynggaard to maj line clearcase plugin branch small javadoc update r lynggaard to maj line clearcase plugin branch remove old extended changelog code as this is not the way we want to do it r redsolo to maj line clearcase plugin fixed so the changelog actions are adding the c comments to the lshistory format r redsolo to maj line clearacse plugin removed unused class git svn id c de d a be ed b c a,move
jenkins add small test suite for hudson remoting engine initialization,extract
jcbc implement rest of n ql tutorial and adapt dsl motivation continuing work from jcbc implementing rest of the steps from the n ql tutorial into selectdslsmoketest and adding missing operators or functions in the dsl along the way note that steps make use of dml which will be covered later modifications added remaining steps from tutorial to smoke tests groupbypath can now directly use identifiers in string form modified keypath so that distinction between a string constant key vs an identifier key is more explicit constant keys xxxkeysvalues methods added sum and distinct functions in aggregatefunctions added datefunctions with strtomillis datepartstr numberfunctions moved round there from functions stringfunctions with lower and substr in expression added x method to convert a statement sub method to convert a statement as a sub statement between parenthesis path method to construct a path from expressions separated with dots added arithmetic operators add subtract multiply and divide added a case mini dsl for case and case search expressions eg case a id when b subid then else end removed functions class all have been moved in xxxfunctions classes in the functions package marked various dsl classes as experimental yet public results except for tutorial steps where dml is used all steps are covered by the selectdslsmoketest change id i a c d beb a de b c d c c bf b reviewed on tested by simon basl√© reviewed by michael nitschinger,extract
reimplementing remotelauncher to fix remoting issues,push down
made loggly reporting extendable,push down
renamed requiredclaimset to policy,rename
refactor to make addition of further database specific tests easier,pull up
change the excludemarker to suppressmarker to make this consistent with the use of suppress elsewhere in pmd and with the standard java suppresswarnings annotation remove some of the processfiles apis on the pmd class we really don t need that many of them in this regard the one api that allowed a languageversion to be passed explicitly has been removed and the rulecontext class update to indicate this is the preferred method of indicating the languageversion to use when processing a source file initial cut at adding a configuration class for storing all pmd configuration related items so far i ve just moved the stuff that was stored on the pmd class itself to the configuration class additional work will be done to move the stuff currently in commandlineoptions and in the ant task onto the configuration class then the processfiles methods will be modified to take a configuration option this should prevent the proliferation of processfile methods in the future and make it possible to unify some common aspects of the command line ant usages git svn id baf d a c fc e d,move
renamed passup handleupevent,rename
many small changes unit tests added to the repository dip result root and memory size mb settings moved from code to settings name contains no uppercase letters imports organized all over the code bin files revisited for easier execution and running,move
rewrite multibinder to use the internalfactory interfaces and avoid the overhead of normal providerinstancebindings providerlookups this implementation follows the same pattern as optionalbinder notably all the mutable state is moved into a new inner class named bindingselection calculating keys set names is delayed until configure initialization time none of the factories need circular deps resolution i did my best to mirror the structure of realoptionalbinder instead of trying to maintain the preexisting structure since i thought that having realmultibinder implement provider and module was a little strange let me know what you think benchmark results this shows the cost of injection set and collection for a multibinder containing entries so we save objects bytes and about ns per multibinder entry which is less than i expected created by moe moe migrated revid ,move
simplified the ui key auth no longer session based so timeout issues should no longer occur,inline
some refactoring of slack notification services,push down
rewrite substitution resolver use explicit immutable resolvesource the immediate motivation here was to fix which this does but in this commit a couple of existing test cases are broken in a way which seems to relate to order of resolution and resolve memoization so we need to layer on to this commit better solutions for caching and cycle detection to get rid of yet more mutable state the previous setup used a side effect based lookup table of replacement values to conceptually modify the tree without actually modifying it unfortunately that setup was hacky and hard to reason about and apparently broken in cases such as this new setup actually creates a modified tree and passes it around explicitly instead of inside resolvecontext in this commit resolvecontext still unfortunately has a mutable cache and a mutable table of cycle markers both of those in theory could also be replaced by simply modifying the tree the main downside to this commit and to cleaning up the remaining mutable state is that we re using java collections which have to be copied wholesale for every mutation they are not persistent functional data structures this will have an unknown performance impact though in a sane world config resolve is not a bottleneck in anyone s production app some other details of this commit resolve concerns removed from peekpath in abstractconfigobject and relocated into resolvesource recursive resolution removed from lookupsubst and moved to configreference new hasdescendant method used only in debug tracing it is grossly inefficient to ever call this full tree traversal new replacechild method is inefficient due to java collections but could in theory be made efficient most complexity relates to always knowing the parent of a node that we might have to replace so we can walk up replacing it in its ancestor chain todo in subsequent commits fix failing test cases we cannot replacechild if we are a descendant of configconcatenation but we probably need to be able to consider fix this instead of memoizing resolve results in a hash table just continuously modify the resolvesource to have the most recent results instead of using the cycle markers table change the configreference to a cycle detector value,inline
o extracted booterserializer from surefirebooter extracted an interface for directory scanner minor refactorings with no functional change all this is initial footwork to get surefire moving it looks like it s going to be quite a journey git svn id f bb ffa edef ,move
wip merged with master renamed classes around implicit and explicit property building added additional extensions to extensions pom extensions should depend on current project version re worked named typemaps removed unused test,rename
per world permissions and groups api and more this api will make canarymod act as if everything is global by default a plugin is required to change this behaviour to something else groups can now have a world assigned null if global and permissions can be saved into separate tables each world has a table to determine which permission belong to what world additionally the global permissions are stored in permission table you can always access global settings by passing null as world otherwise the fully qualified world name is required which you can get from a world by calling world getfqname also moved unknownworldexception from implementation to lib dataaccess now defines a getinstance method which needs to return a new instance of the current dataaccess so if your dataaccess it mydataaccess then getinstance must return new mydataaccess this is required to incorporate multiple tables per dataaccess custom table names changed the groupcreate command but it s still wip,move
 improve projectconfiguration sort order introduced new runsafter and runsbefore attributes to the configurator extension point runsafter optional comma separated list of ids of required project configurators this configurator should run after ids suffixed with are considered optional runsbefore optional comma separated list of ids of optional project configurators this configurator should run before ids suffixed with are considered required the secondaryto attribute has been deprecated for any given mojoexecution a directed acyclic graph is built from the configurators list and their runsafter runsbefore configurator dependencies configurators are sorted twice once per mojoexecution only configurators participating to that mojoexecution are considered once for project configuration all configurators from all mojoexecutions are sorted so if a project configurator pc needs to run after another configurator pc defined in a separate mojoexecution it will need to declare runsafter pc so the first mojoexecution sort doesn t fail change id i b ae f b f caafcc b d a signed off by fred bricon,inline
refactored broadcast to allow for node selection,extract
pipeline stuff moved to separate repository,pull up
more code consolidation cleanup,pull up
defaultdifferenceengine removed,pull up
added the ability to set a message on every reward this message is only sent if the specific reward is non zero in addition fixed the following bugs itemfactory didn t implement hashcode and equals causing the message system to not properly merge similar actions,extract
general improvements to the drawdown calculation layout changes to the performanceview for an easier overview added tooltips for the risk metrics calculated and display interval information from to issue ,inline
merge latest luna changes,push down
added lookup tables and caches removed unecessary build files modified database to include a preferences table and tested,pull up
refactor the primitive array and object array infrastructure much more dry than it was,pull up
added documentation to subroutines refactored buffer local variables a bit refactored subroutines handling strategy,move
sdb not far from end changed completely tests structure to provide a stronger test process while implementing a db step by step,push down
refactoring endpointapigenerator,inline
add the new provision exception api guice currently has an exception called errorsexception that is used to signal certain kinds of errors the general strategy is either to call errors adderror if you come across an error but can keep going call throw errors adderror toexception to report an error when you can t keep going the second option throws an errorsexception which is then caught at various api boundaries the idea in this cl is to introduce a parallel api called internalprovisionexception which can take over the analogous usecases for provisioning time errors and errorsexception will be preserved for configuration time errors errorsexception will be renamed to internalconfigurationexception after internalprovisionexception is fully integrated this also refactors errors java to move a bunch of static utilities for dealing with message objects to a new class messages created by moe moe migrated revid ,move
boleto refactoring removendo interface emissor renomeando emissorpadrao para emissor,pull up
bump to snapshot reintroduce shake detection as its own module move yaffs specific directory sync to its own module focus and i o modules queue module for queuefile and future queue related stuff,move
changes related to deprecation removed d wcontext methods and calls,inline
renamed percentiled to quantized also renamed its methods from percentiles to quantiles,rename
addresses for generating ontology renamed new addresses are eegdatabase semantic getontology html type owl output from jena eegdatabase semantic getontologyowlapi html type owl output from owl api git svn id database trunk a f c aaa da e aacc d ,rename
remove checks for wo and reflection for pre wo apis,pull up
boleto rafactoring removendo interface sacado renomeando sacadopadrao para sacado,pull up
rename package the game package contains class about the game logic but not rendering,rename
fleshed out predictivemodeloptimizer added integration test currently not asserting on anythingextracted generic interface for outoftimedatastill a wip ,extract
rename,rename
redesign to positions based geometries,push down
remove asm from intellij structure at all proper refactoring,push down
 section creator modified one parameter added one method removed advanced search refactored abstract controller createdgit svn id database trunk a f c aaa da e aacc d ,inline
rename bankaccount property valid to validated and bump version to ,rename
completely overhaul and clean up basic architecture separate out html generation into ast visitor,push down
rename method to match any java style guide,rename
wagon refactor ssh tests in prep to get some streaming working git svn id f bb ffa edef ,push down
vishal refactoring remove redundant db calls to get patient,inline
handling push link contract results per message not per operation,push down
